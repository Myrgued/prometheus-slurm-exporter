// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package types

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	TokenScopes      = "token.Scopes"
	UserScopes       = "user.Scopes"
)

// Defines values for V0041OpenapiAccountsRespAccountsFlags.
const (
	V0041OpenapiAccountsRespAccountsFlagsDELETED          V0041OpenapiAccountsRespAccountsFlags = "DELETED"
	V0041OpenapiAccountsRespAccountsFlagsNoUsersAreCoords V0041OpenapiAccountsRespAccountsFlags = "NoUsersAreCoords"
	V0041OpenapiAccountsRespAccountsFlagsUsersAreCoords   V0041OpenapiAccountsRespAccountsFlags = "UsersAreCoords"
	V0041OpenapiAccountsRespAccountsFlagsWithAssociations V0041OpenapiAccountsRespAccountsFlags = "WithAssociations"
	V0041OpenapiAccountsRespAccountsFlagsWithCoordinators V0041OpenapiAccountsRespAccountsFlags = "WithCoordinators"
)

// Defines values for V0041OpenapiAssocsRespAssociationsFlags.
const (
	V0041OpenapiAssocsRespAssociationsFlagsDELETED          V0041OpenapiAssocsRespAssociationsFlags = "DELETED"
	V0041OpenapiAssocsRespAssociationsFlagsExact            V0041OpenapiAssocsRespAssociationsFlags = "Exact"
	V0041OpenapiAssocsRespAssociationsFlagsNoUpdate         V0041OpenapiAssocsRespAssociationsFlags = "NoUpdate"
	V0041OpenapiAssocsRespAssociationsFlagsNoUsersAreCoords V0041OpenapiAssocsRespAssociationsFlags = "NoUsersAreCoords"
	V0041OpenapiAssocsRespAssociationsFlagsUsersAreCoords   V0041OpenapiAssocsRespAssociationsFlags = "UsersAreCoords"
)

// Defines values for V0041OpenapiClustersRespClustersFlags.
const (
	V0041OpenapiClustersRespClustersFlagsEXTERNAL       V0041OpenapiClustersRespClustersFlags = "EXTERNAL"
	V0041OpenapiClustersRespClustersFlagsFEDERATION     V0041OpenapiClustersRespClustersFlags = "FEDERATION"
	V0041OpenapiClustersRespClustersFlagsFRONTEND       V0041OpenapiClustersRespClustersFlags = "FRONT_END"
	V0041OpenapiClustersRespClustersFlagsMULTIPLESLURMD V0041OpenapiClustersRespClustersFlags = "MULTIPLE_SLURMD"
	V0041OpenapiClustersRespClustersFlagsREGISTERING    V0041OpenapiClustersRespClustersFlags = "REGISTERING"
)

// Defines values for V0041OpenapiJobInfoRespJobsDerivedExitCodeStatus.
const (
	V0041OpenapiJobInfoRespJobsDerivedExitCodeStatusCOREDUMPED V0041OpenapiJobInfoRespJobsDerivedExitCodeStatus = "CORE_DUMPED"
	V0041OpenapiJobInfoRespJobsDerivedExitCodeStatusERROR      V0041OpenapiJobInfoRespJobsDerivedExitCodeStatus = "ERROR"
	V0041OpenapiJobInfoRespJobsDerivedExitCodeStatusINVALID    V0041OpenapiJobInfoRespJobsDerivedExitCodeStatus = "INVALID"
	V0041OpenapiJobInfoRespJobsDerivedExitCodeStatusPENDING    V0041OpenapiJobInfoRespJobsDerivedExitCodeStatus = "PENDING"
	V0041OpenapiJobInfoRespJobsDerivedExitCodeStatusSIGNALED   V0041OpenapiJobInfoRespJobsDerivedExitCodeStatus = "SIGNALED"
	V0041OpenapiJobInfoRespJobsDerivedExitCodeStatusSUCCESS    V0041OpenapiJobInfoRespJobsDerivedExitCodeStatus = "SUCCESS"
)

// Defines values for V0041OpenapiJobInfoRespJobsExclusive.
const (
	V0041OpenapiJobInfoRespJobsExclusiveFalse V0041OpenapiJobInfoRespJobsExclusive = "false"
	V0041OpenapiJobInfoRespJobsExclusiveMcs   V0041OpenapiJobInfoRespJobsExclusive = "mcs"
	V0041OpenapiJobInfoRespJobsExclusiveTopo  V0041OpenapiJobInfoRespJobsExclusive = "topo"
	V0041OpenapiJobInfoRespJobsExclusiveTrue  V0041OpenapiJobInfoRespJobsExclusive = "true"
	V0041OpenapiJobInfoRespJobsExclusiveUser  V0041OpenapiJobInfoRespJobsExclusive = "user"
)

// Defines values for V0041OpenapiJobInfoRespJobsExitCodeStatus.
const (
	V0041OpenapiJobInfoRespJobsExitCodeStatusCOREDUMPED V0041OpenapiJobInfoRespJobsExitCodeStatus = "CORE_DUMPED"
	V0041OpenapiJobInfoRespJobsExitCodeStatusERROR      V0041OpenapiJobInfoRespJobsExitCodeStatus = "ERROR"
	V0041OpenapiJobInfoRespJobsExitCodeStatusINVALID    V0041OpenapiJobInfoRespJobsExitCodeStatus = "INVALID"
	V0041OpenapiJobInfoRespJobsExitCodeStatusPENDING    V0041OpenapiJobInfoRespJobsExitCodeStatus = "PENDING"
	V0041OpenapiJobInfoRespJobsExitCodeStatusSIGNALED   V0041OpenapiJobInfoRespJobsExitCodeStatus = "SIGNALED"
	V0041OpenapiJobInfoRespJobsExitCodeStatusSUCCESS    V0041OpenapiJobInfoRespJobsExitCodeStatus = "SUCCESS"
)

// Defines values for V0041OpenapiJobInfoRespJobsFlags.
const (
	V0041OpenapiJobInfoRespJobsFlagsACCRUECOUNTCLEARED       V0041OpenapiJobInfoRespJobsFlags = "ACCRUE_COUNT_CLEARED"
	V0041OpenapiJobInfoRespJobsFlagsBACKFILLATTEMPTED        V0041OpenapiJobInfoRespJobsFlags = "BACKFILL_ATTEMPTED"
	V0041OpenapiJobInfoRespJobsFlagsCRONJOB                  V0041OpenapiJobInfoRespJobsFlags = "CRON_JOB"
	V0041OpenapiJobInfoRespJobsFlagsDEPENDENT                V0041OpenapiJobInfoRespJobsFlags = "DEPENDENT"
	V0041OpenapiJobInfoRespJobsFlagsEXACTCPUCOUNTREQUESTED   V0041OpenapiJobInfoRespJobsFlags = "EXACT_CPU_COUNT_REQUESTED"
	V0041OpenapiJobInfoRespJobsFlagsEXACTMEMORYREQUESTED     V0041OpenapiJobInfoRespJobsFlags = "EXACT_MEMORY_REQUESTED"
	V0041OpenapiJobInfoRespJobsFlagsEXACTTASKCOUNTREQUESTED  V0041OpenapiJobInfoRespJobsFlags = "EXACT_TASK_COUNT_REQUESTED"
	V0041OpenapiJobInfoRespJobsFlagsGRESBINDINGDISABLED      V0041OpenapiJobInfoRespJobsFlags = "GRES_BINDING_DISABLED"
	V0041OpenapiJobInfoRespJobsFlagsGRESBINDINGENFORCED      V0041OpenapiJobInfoRespJobsFlags = "GRES_BINDING_ENFORCED"
	V0041OpenapiJobInfoRespJobsFlagsHASSTATEDIRECTORY        V0041OpenapiJobInfoRespJobsFlags = "HAS_STATE_DIRECTORY"
	V0041OpenapiJobInfoRespJobsFlagsHETEROGENEOUSJOB         V0041OpenapiJobInfoRespJobsFlags = "HETEROGENEOUS_JOB"
	V0041OpenapiJobInfoRespJobsFlagsJOBACCRUETIMERESET       V0041OpenapiJobInfoRespJobsFlags = "JOB_ACCRUE_TIME_RESET"
	V0041OpenapiJobInfoRespJobsFlagsJOBKILLHURRY             V0041OpenapiJobInfoRespJobsFlags = "JOB_KILL_HURRY"
	V0041OpenapiJobInfoRespJobsFlagsJOBWASRUNNING            V0041OpenapiJobInfoRespJobsFlags = "JOB_WAS_RUNNING"
	V0041OpenapiJobInfoRespJobsFlagsKILLINVALIDDEPENDENCY    V0041OpenapiJobInfoRespJobsFlags = "KILL_INVALID_DEPENDENCY"
	V0041OpenapiJobInfoRespJobsFlagsMAGNETIC                 V0041OpenapiJobInfoRespJobsFlags = "MAGNETIC"
	V0041OpenapiJobInfoRespJobsFlagsNOKILLINVALIDDEPENDENCY  V0041OpenapiJobInfoRespJobsFlags = "NO_KILL_INVALID_DEPENDENCY"
	V0041OpenapiJobInfoRespJobsFlagsPARTITIONASSIGNED        V0041OpenapiJobInfoRespJobsFlags = "PARTITION_ASSIGNED"
	V0041OpenapiJobInfoRespJobsFlagsPREFERMINIMUMNODECOUNT   V0041OpenapiJobInfoRespJobsFlags = "PREFER_MINIMUM_NODE_COUNT"
	V0041OpenapiJobInfoRespJobsFlagsSCHEDULINGATTEMPTED      V0041OpenapiJobInfoRespJobsFlags = "SCHEDULING_ATTEMPTED"
	V0041OpenapiJobInfoRespJobsFlagsSENDJOBENVIRONMENT       V0041OpenapiJobInfoRespJobsFlags = "SEND_JOB_ENVIRONMENT"
	V0041OpenapiJobInfoRespJobsFlagsSIBLINGCLUSTERUPDATEONLY V0041OpenapiJobInfoRespJobsFlags = "SIBLING_CLUSTER_UPDATE_ONLY"
	V0041OpenapiJobInfoRespJobsFlagsSKIPTRESSTRINGACCOUNTING V0041OpenapiJobInfoRespJobsFlags = "SKIP_TRES_STRING_ACCOUNTING"
	V0041OpenapiJobInfoRespJobsFlagsSPREADJOB                V0041OpenapiJobInfoRespJobsFlags = "SPREAD_JOB"
	V0041OpenapiJobInfoRespJobsFlagsSTEPMGRENABLED           V0041OpenapiJobInfoRespJobsFlags = "STEPMGR_ENABLED"
	V0041OpenapiJobInfoRespJobsFlagsTESTINGBACKFILL          V0041OpenapiJobInfoRespJobsFlags = "TESTING_BACKFILL"
	V0041OpenapiJobInfoRespJobsFlagsTESTINGWHOLENODEBACKFILL V0041OpenapiJobInfoRespJobsFlags = "TESTING_WHOLE_NODE_BACKFILL"
	V0041OpenapiJobInfoRespJobsFlagsTESTNOWONLY              V0041OpenapiJobInfoRespJobsFlags = "TEST_NOW_ONLY"
	V0041OpenapiJobInfoRespJobsFlagsTOPPRIORITYJOB           V0041OpenapiJobInfoRespJobsFlags = "TOP_PRIORITY_JOB"
	V0041OpenapiJobInfoRespJobsFlagsUSINGDEFAULTACCOUNT      V0041OpenapiJobInfoRespJobsFlags = "USING_DEFAULT_ACCOUNT"
	V0041OpenapiJobInfoRespJobsFlagsUSINGDEFAULTPARTITION    V0041OpenapiJobInfoRespJobsFlags = "USING_DEFAULT_PARTITION"
	V0041OpenapiJobInfoRespJobsFlagsUSINGDEFAULTQOS          V0041OpenapiJobInfoRespJobsFlags = "USING_DEFAULT_QOS"
	V0041OpenapiJobInfoRespJobsFlagsUSINGDEFAULTWCKEY        V0041OpenapiJobInfoRespJobsFlags = "USING_DEFAULT_WCKEY"
)

// Defines values for V0041OpenapiJobInfoRespJobsJobResourcesNodesAllocationSocketsCoresStatus.
const (
	V0041OpenapiJobInfoRespJobsJobResourcesNodesAllocationSocketsCoresStatusALLOCATED   V0041OpenapiJobInfoRespJobsJobResourcesNodesAllocationSocketsCoresStatus = "ALLOCATED"
	V0041OpenapiJobInfoRespJobsJobResourcesNodesAllocationSocketsCoresStatusINUSE       V0041OpenapiJobInfoRespJobsJobResourcesNodesAllocationSocketsCoresStatus = "IN_USE"
	V0041OpenapiJobInfoRespJobsJobResourcesNodesAllocationSocketsCoresStatusINVALID     V0041OpenapiJobInfoRespJobsJobResourcesNodesAllocationSocketsCoresStatus = "INVALID"
	V0041OpenapiJobInfoRespJobsJobResourcesNodesAllocationSocketsCoresStatusUNALLOCATED V0041OpenapiJobInfoRespJobsJobResourcesNodesAllocationSocketsCoresStatus = "UNALLOCATED"
)

// Defines values for V0041OpenapiJobInfoRespJobsJobResourcesNodesSelectType.
const (
	V0041OpenapiJobInfoRespJobsJobResourcesNodesSelectTypeAVAILABLE V0041OpenapiJobInfoRespJobsJobResourcesNodesSelectType = "AVAILABLE"
	V0041OpenapiJobInfoRespJobsJobResourcesNodesSelectTypeONEROW    V0041OpenapiJobInfoRespJobsJobResourcesNodesSelectType = "ONE_ROW"
	V0041OpenapiJobInfoRespJobsJobResourcesNodesSelectTypeRESERVED  V0041OpenapiJobInfoRespJobsJobResourcesNodesSelectType = "RESERVED"
)

// Defines values for V0041OpenapiJobInfoRespJobsJobResourcesSelectType.
const (
	V0041OpenapiJobInfoRespJobsJobResourcesSelectTypeBOARD                V0041OpenapiJobInfoRespJobsJobResourcesSelectType = "BOARD"
	V0041OpenapiJobInfoRespJobsJobResourcesSelectTypeCORE                 V0041OpenapiJobInfoRespJobsJobResourcesSelectType = "CORE"
	V0041OpenapiJobInfoRespJobsJobResourcesSelectTypeCOREDEFAULTDISTBLOCK V0041OpenapiJobInfoRespJobsJobResourcesSelectType = "CORE_DEFAULT_DIST_BLOCK"
	V0041OpenapiJobInfoRespJobsJobResourcesSelectTypeCPU                  V0041OpenapiJobInfoRespJobsJobResourcesSelectType = "CPU"
	V0041OpenapiJobInfoRespJobsJobResourcesSelectTypeLINEAR               V0041OpenapiJobInfoRespJobsJobResourcesSelectType = "LINEAR"
	V0041OpenapiJobInfoRespJobsJobResourcesSelectTypeLLN                  V0041OpenapiJobInfoRespJobsJobResourcesSelectType = "LLN"
	V0041OpenapiJobInfoRespJobsJobResourcesSelectTypeMEMORY               V0041OpenapiJobInfoRespJobsJobResourcesSelectType = "MEMORY"
	V0041OpenapiJobInfoRespJobsJobResourcesSelectTypeONETASKPERCORE       V0041OpenapiJobInfoRespJobsJobResourcesSelectType = "ONE_TASK_PER_CORE"
	V0041OpenapiJobInfoRespJobsJobResourcesSelectTypePACKNODES            V0041OpenapiJobInfoRespJobsJobResourcesSelectType = "PACK_NODES"
	V0041OpenapiJobInfoRespJobsJobResourcesSelectTypeSOCKET               V0041OpenapiJobInfoRespJobsJobResourcesSelectType = "SOCKET"
)

// Defines values for V0041OpenapiJobInfoRespJobsJobState.
const (
	V0041OpenapiJobInfoRespJobsJobStateBOOTFAIL     V0041OpenapiJobInfoRespJobsJobState = "BOOT_FAIL"
	V0041OpenapiJobInfoRespJobsJobStateCANCELLED    V0041OpenapiJobInfoRespJobsJobState = "CANCELLED"
	V0041OpenapiJobInfoRespJobsJobStateCOMPLETED    V0041OpenapiJobInfoRespJobsJobState = "COMPLETED"
	V0041OpenapiJobInfoRespJobsJobStateCOMPLETING   V0041OpenapiJobInfoRespJobsJobState = "COMPLETING"
	V0041OpenapiJobInfoRespJobsJobStateCONFIGURING  V0041OpenapiJobInfoRespJobsJobState = "CONFIGURING"
	V0041OpenapiJobInfoRespJobsJobStateDEADLINE     V0041OpenapiJobInfoRespJobsJobState = "DEADLINE"
	V0041OpenapiJobInfoRespJobsJobStateFAILED       V0041OpenapiJobInfoRespJobsJobState = "FAILED"
	V0041OpenapiJobInfoRespJobsJobStateLAUNCHFAILED V0041OpenapiJobInfoRespJobsJobState = "LAUNCH_FAILED"
	V0041OpenapiJobInfoRespJobsJobStateNODEFAIL     V0041OpenapiJobInfoRespJobsJobState = "NODE_FAIL"
	V0041OpenapiJobInfoRespJobsJobStateOUTOFMEMORY  V0041OpenapiJobInfoRespJobsJobState = "OUT_OF_MEMORY"
	V0041OpenapiJobInfoRespJobsJobStatePENDING      V0041OpenapiJobInfoRespJobsJobState = "PENDING"
	V0041OpenapiJobInfoRespJobsJobStatePOWERUPNODE  V0041OpenapiJobInfoRespJobsJobState = "POWER_UP_NODE"
	V0041OpenapiJobInfoRespJobsJobStatePREEMPTED    V0041OpenapiJobInfoRespJobsJobState = "PREEMPTED"
	V0041OpenapiJobInfoRespJobsJobStateRECONFIGFAIL V0041OpenapiJobInfoRespJobsJobState = "RECONFIG_FAIL"
	V0041OpenapiJobInfoRespJobsJobStateREQUEUED     V0041OpenapiJobInfoRespJobsJobState = "REQUEUED"
	V0041OpenapiJobInfoRespJobsJobStateREQUEUEFED   V0041OpenapiJobInfoRespJobsJobState = "REQUEUE_FED"
	V0041OpenapiJobInfoRespJobsJobStateREQUEUEHOLD  V0041OpenapiJobInfoRespJobsJobState = "REQUEUE_HOLD"
	V0041OpenapiJobInfoRespJobsJobStateRESIZING     V0041OpenapiJobInfoRespJobsJobState = "RESIZING"
	V0041OpenapiJobInfoRespJobsJobStateRESVDELHOLD  V0041OpenapiJobInfoRespJobsJobState = "RESV_DEL_HOLD"
	V0041OpenapiJobInfoRespJobsJobStateREVOKED      V0041OpenapiJobInfoRespJobsJobState = "REVOKED"
	V0041OpenapiJobInfoRespJobsJobStateRUNNING      V0041OpenapiJobInfoRespJobsJobState = "RUNNING"
	V0041OpenapiJobInfoRespJobsJobStateSIGNALING    V0041OpenapiJobInfoRespJobsJobState = "SIGNALING"
	V0041OpenapiJobInfoRespJobsJobStateSPECIALEXIT  V0041OpenapiJobInfoRespJobsJobState = "SPECIAL_EXIT"
	V0041OpenapiJobInfoRespJobsJobStateSTAGEOUT     V0041OpenapiJobInfoRespJobsJobState = "STAGE_OUT"
	V0041OpenapiJobInfoRespJobsJobStateSTOPPED      V0041OpenapiJobInfoRespJobsJobState = "STOPPED"
	V0041OpenapiJobInfoRespJobsJobStateSUSPENDED    V0041OpenapiJobInfoRespJobsJobState = "SUSPENDED"
	V0041OpenapiJobInfoRespJobsJobStateTIMEOUT      V0041OpenapiJobInfoRespJobsJobState = "TIMEOUT"
	V0041OpenapiJobInfoRespJobsJobStateUPDATEDB     V0041OpenapiJobInfoRespJobsJobState = "UPDATE_DB"
)

// Defines values for V0041OpenapiJobInfoRespJobsMailType.
const (
	V0041OpenapiJobInfoRespJobsMailTypeARRAYTASKS        V0041OpenapiJobInfoRespJobsMailType = "ARRAY_TASKS"
	V0041OpenapiJobInfoRespJobsMailTypeBEGIN             V0041OpenapiJobInfoRespJobsMailType = "BEGIN"
	V0041OpenapiJobInfoRespJobsMailTypeEND               V0041OpenapiJobInfoRespJobsMailType = "END"
	V0041OpenapiJobInfoRespJobsMailTypeFAIL              V0041OpenapiJobInfoRespJobsMailType = "FAIL"
	V0041OpenapiJobInfoRespJobsMailTypeINVALIDDEPENDENCY V0041OpenapiJobInfoRespJobsMailType = "INVALID_DEPENDENCY"
	V0041OpenapiJobInfoRespJobsMailTypeREQUEUE           V0041OpenapiJobInfoRespJobsMailType = "REQUEUE"
	V0041OpenapiJobInfoRespJobsMailTypeSTAGEOUT          V0041OpenapiJobInfoRespJobsMailType = "STAGE_OUT"
	V0041OpenapiJobInfoRespJobsMailTypeTIME100           V0041OpenapiJobInfoRespJobsMailType = "TIME=100%"
	V0041OpenapiJobInfoRespJobsMailTypeTIME50            V0041OpenapiJobInfoRespJobsMailType = "TIME=50%"
	V0041OpenapiJobInfoRespJobsMailTypeTIME80            V0041OpenapiJobInfoRespJobsMailType = "TIME=80%"
	V0041OpenapiJobInfoRespJobsMailTypeTIME90            V0041OpenapiJobInfoRespJobsMailType = "TIME=90%"
)

// Defines values for V0041OpenapiJobInfoRespJobsProfile.
const (
	V0041OpenapiJobInfoRespJobsProfileENERGY  V0041OpenapiJobInfoRespJobsProfile = "ENERGY"
	V0041OpenapiJobInfoRespJobsProfileLUSTRE  V0041OpenapiJobInfoRespJobsProfile = "LUSTRE"
	V0041OpenapiJobInfoRespJobsProfileNETWORK V0041OpenapiJobInfoRespJobsProfile = "NETWORK"
	V0041OpenapiJobInfoRespJobsProfileNONE    V0041OpenapiJobInfoRespJobsProfile = "NONE"
	V0041OpenapiJobInfoRespJobsProfileNOTSET  V0041OpenapiJobInfoRespJobsProfile = "NOT_SET"
	V0041OpenapiJobInfoRespJobsProfileTASK    V0041OpenapiJobInfoRespJobsProfile = "TASK"
)

// Defines values for V0041OpenapiJobInfoRespJobsShared.
const (
	V0041OpenapiJobInfoRespJobsSharedMcs           V0041OpenapiJobInfoRespJobsShared = "mcs"
	V0041OpenapiJobInfoRespJobsSharedNone          V0041OpenapiJobInfoRespJobsShared = "none"
	V0041OpenapiJobInfoRespJobsSharedOversubscribe V0041OpenapiJobInfoRespJobsShared = "oversubscribe"
	V0041OpenapiJobInfoRespJobsSharedTopo          V0041OpenapiJobInfoRespJobsShared = "topo"
	V0041OpenapiJobInfoRespJobsSharedUser          V0041OpenapiJobInfoRespJobsShared = "user"
)

// Defines values for V0041OpenapiJobInfoRespJobsShowFlags.
const (
	V0041OpenapiJobInfoRespJobsShowFlagsALL        V0041OpenapiJobInfoRespJobsShowFlags = "ALL"
	V0041OpenapiJobInfoRespJobsShowFlagsDETAIL     V0041OpenapiJobInfoRespJobsShowFlags = "DETAIL"
	V0041OpenapiJobInfoRespJobsShowFlagsFEDERATION V0041OpenapiJobInfoRespJobsShowFlags = "FEDERATION"
	V0041OpenapiJobInfoRespJobsShowFlagsFUTURE     V0041OpenapiJobInfoRespJobsShowFlags = "FUTURE"
	V0041OpenapiJobInfoRespJobsShowFlagsLOCAL      V0041OpenapiJobInfoRespJobsShowFlags = "LOCAL"
	V0041OpenapiJobInfoRespJobsShowFlagsMIXED      V0041OpenapiJobInfoRespJobsShowFlags = "MIXED"
	V0041OpenapiJobInfoRespJobsShowFlagsSIBLING    V0041OpenapiJobInfoRespJobsShowFlags = "SIBLING"
)

// Defines values for V0041OpenapiNodesRespNodesNextStateAfterReboot.
const (
	V0041OpenapiNodesRespNodesNextStateAfterRebootALLOCATED       V0041OpenapiNodesRespNodesNextStateAfterReboot = "ALLOCATED"
	V0041OpenapiNodesRespNodesNextStateAfterRebootCLOUD           V0041OpenapiNodesRespNodesNextStateAfterReboot = "CLOUD"
	V0041OpenapiNodesRespNodesNextStateAfterRebootCOMPLETING      V0041OpenapiNodesRespNodesNextStateAfterReboot = "COMPLETING"
	V0041OpenapiNodesRespNodesNextStateAfterRebootDOWN            V0041OpenapiNodesRespNodesNextStateAfterReboot = "DOWN"
	V0041OpenapiNodesRespNodesNextStateAfterRebootDRAIN           V0041OpenapiNodesRespNodesNextStateAfterReboot = "DRAIN"
	V0041OpenapiNodesRespNodesNextStateAfterRebootDYNAMICFUTURE   V0041OpenapiNodesRespNodesNextStateAfterReboot = "DYNAMIC_FUTURE"
	V0041OpenapiNodesRespNodesNextStateAfterRebootDYNAMICNORM     V0041OpenapiNodesRespNodesNextStateAfterReboot = "DYNAMIC_NORM"
	V0041OpenapiNodesRespNodesNextStateAfterRebootERROR           V0041OpenapiNodesRespNodesNextStateAfterReboot = "ERROR"
	V0041OpenapiNodesRespNodesNextStateAfterRebootFAIL            V0041OpenapiNodesRespNodesNextStateAfterReboot = "FAIL"
	V0041OpenapiNodesRespNodesNextStateAfterRebootFUTURE          V0041OpenapiNodesRespNodesNextStateAfterReboot = "FUTURE"
	V0041OpenapiNodesRespNodesNextStateAfterRebootIDLE            V0041OpenapiNodesRespNodesNextStateAfterReboot = "IDLE"
	V0041OpenapiNodesRespNodesNextStateAfterRebootINVALID         V0041OpenapiNodesRespNodesNextStateAfterReboot = "INVALID"
	V0041OpenapiNodesRespNodesNextStateAfterRebootINVALIDREG      V0041OpenapiNodesRespNodesNextStateAfterReboot = "INVALID_REG"
	V0041OpenapiNodesRespNodesNextStateAfterRebootMAINTENANCE     V0041OpenapiNodesRespNodesNextStateAfterReboot = "MAINTENANCE"
	V0041OpenapiNodesRespNodesNextStateAfterRebootMIXED           V0041OpenapiNodesRespNodesNextStateAfterReboot = "MIXED"
	V0041OpenapiNodesRespNodesNextStateAfterRebootNOTRESPONDING   V0041OpenapiNodesRespNodesNextStateAfterReboot = "NOT_RESPONDING"
	V0041OpenapiNodesRespNodesNextStateAfterRebootPLANNED         V0041OpenapiNodesRespNodesNextStateAfterReboot = "PLANNED"
	V0041OpenapiNodesRespNodesNextStateAfterRebootPOWERDOWN       V0041OpenapiNodesRespNodesNextStateAfterReboot = "POWER_DOWN"
	V0041OpenapiNodesRespNodesNextStateAfterRebootPOWERDRAIN      V0041OpenapiNodesRespNodesNextStateAfterReboot = "POWER_DRAIN"
	V0041OpenapiNodesRespNodesNextStateAfterRebootPOWEREDDOWN     V0041OpenapiNodesRespNodesNextStateAfterReboot = "POWERED_DOWN"
	V0041OpenapiNodesRespNodesNextStateAfterRebootPOWERINGDOWN    V0041OpenapiNodesRespNodesNextStateAfterReboot = "POWERING_DOWN"
	V0041OpenapiNodesRespNodesNextStateAfterRebootPOWERINGUP      V0041OpenapiNodesRespNodesNextStateAfterReboot = "POWERING_UP"
	V0041OpenapiNodesRespNodesNextStateAfterRebootPOWERUP         V0041OpenapiNodesRespNodesNextStateAfterReboot = "POWER_UP"
	V0041OpenapiNodesRespNodesNextStateAfterRebootREBOOTCANCELED  V0041OpenapiNodesRespNodesNextStateAfterReboot = "REBOOT_CANCELED"
	V0041OpenapiNodesRespNodesNextStateAfterRebootREBOOTISSUED    V0041OpenapiNodesRespNodesNextStateAfterReboot = "REBOOT_ISSUED"
	V0041OpenapiNodesRespNodesNextStateAfterRebootREBOOTREQUESTED V0041OpenapiNodesRespNodesNextStateAfterReboot = "REBOOT_REQUESTED"
	V0041OpenapiNodesRespNodesNextStateAfterRebootRESERVED        V0041OpenapiNodesRespNodesNextStateAfterReboot = "RESERVED"
	V0041OpenapiNodesRespNodesNextStateAfterRebootRESUME          V0041OpenapiNodesRespNodesNextStateAfterReboot = "RESUME"
	V0041OpenapiNodesRespNodesNextStateAfterRebootUNDRAIN         V0041OpenapiNodesRespNodesNextStateAfterReboot = "UNDRAIN"
	V0041OpenapiNodesRespNodesNextStateAfterRebootUNKNOWN         V0041OpenapiNodesRespNodesNextStateAfterReboot = "UNKNOWN"
)

// Defines values for V0041OpenapiNodesRespNodesState.
const (
	V0041OpenapiNodesRespNodesStateALLOCATED       V0041OpenapiNodesRespNodesState = "ALLOCATED"
	V0041OpenapiNodesRespNodesStateCLOUD           V0041OpenapiNodesRespNodesState = "CLOUD"
	V0041OpenapiNodesRespNodesStateCOMPLETING      V0041OpenapiNodesRespNodesState = "COMPLETING"
	V0041OpenapiNodesRespNodesStateDOWN            V0041OpenapiNodesRespNodesState = "DOWN"
	V0041OpenapiNodesRespNodesStateDRAIN           V0041OpenapiNodesRespNodesState = "DRAIN"
	V0041OpenapiNodesRespNodesStateDYNAMICFUTURE   V0041OpenapiNodesRespNodesState = "DYNAMIC_FUTURE"
	V0041OpenapiNodesRespNodesStateDYNAMICNORM     V0041OpenapiNodesRespNodesState = "DYNAMIC_NORM"
	V0041OpenapiNodesRespNodesStateERROR           V0041OpenapiNodesRespNodesState = "ERROR"
	V0041OpenapiNodesRespNodesStateFAIL            V0041OpenapiNodesRespNodesState = "FAIL"
	V0041OpenapiNodesRespNodesStateFUTURE          V0041OpenapiNodesRespNodesState = "FUTURE"
	V0041OpenapiNodesRespNodesStateIDLE            V0041OpenapiNodesRespNodesState = "IDLE"
	V0041OpenapiNodesRespNodesStateINVALID         V0041OpenapiNodesRespNodesState = "INVALID"
	V0041OpenapiNodesRespNodesStateINVALIDREG      V0041OpenapiNodesRespNodesState = "INVALID_REG"
	V0041OpenapiNodesRespNodesStateMAINTENANCE     V0041OpenapiNodesRespNodesState = "MAINTENANCE"
	V0041OpenapiNodesRespNodesStateMIXED           V0041OpenapiNodesRespNodesState = "MIXED"
	V0041OpenapiNodesRespNodesStateNOTRESPONDING   V0041OpenapiNodesRespNodesState = "NOT_RESPONDING"
	V0041OpenapiNodesRespNodesStatePLANNED         V0041OpenapiNodesRespNodesState = "PLANNED"
	V0041OpenapiNodesRespNodesStatePOWERDOWN       V0041OpenapiNodesRespNodesState = "POWER_DOWN"
	V0041OpenapiNodesRespNodesStatePOWERDRAIN      V0041OpenapiNodesRespNodesState = "POWER_DRAIN"
	V0041OpenapiNodesRespNodesStatePOWEREDDOWN     V0041OpenapiNodesRespNodesState = "POWERED_DOWN"
	V0041OpenapiNodesRespNodesStatePOWERINGDOWN    V0041OpenapiNodesRespNodesState = "POWERING_DOWN"
	V0041OpenapiNodesRespNodesStatePOWERINGUP      V0041OpenapiNodesRespNodesState = "POWERING_UP"
	V0041OpenapiNodesRespNodesStatePOWERUP         V0041OpenapiNodesRespNodesState = "POWER_UP"
	V0041OpenapiNodesRespNodesStateREBOOTCANCELED  V0041OpenapiNodesRespNodesState = "REBOOT_CANCELED"
	V0041OpenapiNodesRespNodesStateREBOOTISSUED    V0041OpenapiNodesRespNodesState = "REBOOT_ISSUED"
	V0041OpenapiNodesRespNodesStateREBOOTREQUESTED V0041OpenapiNodesRespNodesState = "REBOOT_REQUESTED"
	V0041OpenapiNodesRespNodesStateRESERVED        V0041OpenapiNodesRespNodesState = "RESERVED"
	V0041OpenapiNodesRespNodesStateRESUME          V0041OpenapiNodesRespNodesState = "RESUME"
	V0041OpenapiNodesRespNodesStateUNDRAIN         V0041OpenapiNodesRespNodesState = "UNDRAIN"
	V0041OpenapiNodesRespNodesStateUNKNOWN         V0041OpenapiNodesRespNodesState = "UNKNOWN"
)

// Defines values for V0041OpenapiPartitionRespPartitionsMaximumsOversubscribeFlags.
const (
	Force V0041OpenapiPartitionRespPartitionsMaximumsOversubscribeFlags = "force"
)

// Defines values for V0041OpenapiPartitionRespPartitionsPartitionState.
const (
	V0041OpenapiPartitionRespPartitionsPartitionStateDOWN     V0041OpenapiPartitionRespPartitionsPartitionState = "DOWN"
	V0041OpenapiPartitionRespPartitionsPartitionStateDRAIN    V0041OpenapiPartitionRespPartitionsPartitionState = "DRAIN"
	V0041OpenapiPartitionRespPartitionsPartitionStateINACTIVE V0041OpenapiPartitionRespPartitionsPartitionState = "INACTIVE"
	V0041OpenapiPartitionRespPartitionsPartitionStateUNKNOWN  V0041OpenapiPartitionRespPartitionsPartitionState = "UNKNOWN"
	V0041OpenapiPartitionRespPartitionsPartitionStateUP       V0041OpenapiPartitionRespPartitionsPartitionState = "UP"
)

// Defines values for V0041OpenapiPartitionRespPartitionsSelectType.
const (
	V0041OpenapiPartitionRespPartitionsSelectTypeBOARD                V0041OpenapiPartitionRespPartitionsSelectType = "BOARD"
	V0041OpenapiPartitionRespPartitionsSelectTypeCORE                 V0041OpenapiPartitionRespPartitionsSelectType = "CORE"
	V0041OpenapiPartitionRespPartitionsSelectTypeCOREDEFAULTDISTBLOCK V0041OpenapiPartitionRespPartitionsSelectType = "CORE_DEFAULT_DIST_BLOCK"
	V0041OpenapiPartitionRespPartitionsSelectTypeCPU                  V0041OpenapiPartitionRespPartitionsSelectType = "CPU"
	V0041OpenapiPartitionRespPartitionsSelectTypeLINEAR               V0041OpenapiPartitionRespPartitionsSelectType = "LINEAR"
	V0041OpenapiPartitionRespPartitionsSelectTypeLLN                  V0041OpenapiPartitionRespPartitionsSelectType = "LLN"
	V0041OpenapiPartitionRespPartitionsSelectTypeMEMORY               V0041OpenapiPartitionRespPartitionsSelectType = "MEMORY"
	V0041OpenapiPartitionRespPartitionsSelectTypeONETASKPERCORE       V0041OpenapiPartitionRespPartitionsSelectType = "ONE_TASK_PER_CORE"
	V0041OpenapiPartitionRespPartitionsSelectTypePACKNODES            V0041OpenapiPartitionRespPartitionsSelectType = "PACK_NODES"
	V0041OpenapiPartitionRespPartitionsSelectTypeSOCKET               V0041OpenapiPartitionRespPartitionsSelectType = "SOCKET"
)

// Defines values for V0041OpenapiReservationRespReservationsFlags.
const (
	V0041OpenapiReservationRespReservationsFlagsALLNODES           V0041OpenapiReservationRespReservationsFlags = "ALL_NODES"
	V0041OpenapiReservationRespReservationsFlagsANYNODES           V0041OpenapiReservationRespReservationsFlags = "ANY_NODES"
	V0041OpenapiReservationRespReservationsFlagsDAILY              V0041OpenapiReservationRespReservationsFlags = "DAILY"
	V0041OpenapiReservationRespReservationsFlagsDURATIONMINUS      V0041OpenapiReservationRespReservationsFlags = "DURATION_MINUS"
	V0041OpenapiReservationRespReservationsFlagsDURATIONPLUS       V0041OpenapiReservationRespReservationsFlags = "DURATION_PLUS"
	V0041OpenapiReservationRespReservationsFlagsFLEX               V0041OpenapiReservationRespReservationsFlags = "FLEX"
	V0041OpenapiReservationRespReservationsFlagsHOURLY             V0041OpenapiReservationRespReservationsFlags = "HOURLY"
	V0041OpenapiReservationRespReservationsFlagsIGNOREJOBS         V0041OpenapiReservationRespReservationsFlags = "IGNORE_JOBS"
	V0041OpenapiReservationRespReservationsFlagsMAGNETIC           V0041OpenapiReservationRespReservationsFlags = "MAGNETIC"
	V0041OpenapiReservationRespReservationsFlagsMAINT              V0041OpenapiReservationRespReservationsFlags = "MAINT"
	V0041OpenapiReservationRespReservationsFlagsNODAILY            V0041OpenapiReservationRespReservationsFlags = "NO_DAILY"
	V0041OpenapiReservationRespReservationsFlagsNOFLEX             V0041OpenapiReservationRespReservationsFlags = "NO_FLEX"
	V0041OpenapiReservationRespReservationsFlagsNOHOLDJOBSAFTEREND V0041OpenapiReservationRespReservationsFlags = "NO_HOLD_JOBS_AFTER_END"
	V0041OpenapiReservationRespReservationsFlagsNOHOURLY           V0041OpenapiReservationRespReservationsFlags = "NO_HOURLY"
	V0041OpenapiReservationRespReservationsFlagsNOIGNOREJOBS       V0041OpenapiReservationRespReservationsFlags = "NO_IGNORE_JOBS"
	V0041OpenapiReservationRespReservationsFlagsNOMAINT            V0041OpenapiReservationRespReservationsFlags = "NO_MAINT"
	V0041OpenapiReservationRespReservationsFlagsNOPARTNODES        V0041OpenapiReservationRespReservationsFlags = "NO_PART_NODES"
	V0041OpenapiReservationRespReservationsFlagsNOPURGECOMP        V0041OpenapiReservationRespReservationsFlags = "NO_PURGE_COMP"
	V0041OpenapiReservationRespReservationsFlagsNOSTATIC           V0041OpenapiReservationRespReservationsFlags = "NO_STATIC"
	V0041OpenapiReservationRespReservationsFlagsNOUSERDELETE       V0041OpenapiReservationRespReservationsFlags = "NO_USER_DELETE"
	V0041OpenapiReservationRespReservationsFlagsNOWEEKDAY          V0041OpenapiReservationRespReservationsFlags = "NO_WEEKDAY"
	V0041OpenapiReservationRespReservationsFlagsNOWEEKEND          V0041OpenapiReservationRespReservationsFlags = "NO_WEEKEND"
	V0041OpenapiReservationRespReservationsFlagsNOWEEKLY           V0041OpenapiReservationRespReservationsFlags = "NO_WEEKLY"
	V0041OpenapiReservationRespReservationsFlagsOVERLAP            V0041OpenapiReservationRespReservationsFlags = "OVERLAP"
	V0041OpenapiReservationRespReservationsFlagsPARTNODES          V0041OpenapiReservationRespReservationsFlags = "PART_NODES"
	V0041OpenapiReservationRespReservationsFlagsPURGECOMP          V0041OpenapiReservationRespReservationsFlags = "PURGE_COMP"
	V0041OpenapiReservationRespReservationsFlagsREOCCURRING        V0041OpenapiReservationRespReservationsFlags = "REOCCURRING"
	V0041OpenapiReservationRespReservationsFlagsREPLACE            V0041OpenapiReservationRespReservationsFlags = "REPLACE"
	V0041OpenapiReservationRespReservationsFlagsSKIP               V0041OpenapiReservationRespReservationsFlags = "SKIP"
	V0041OpenapiReservationRespReservationsFlagsSPECNODES          V0041OpenapiReservationRespReservationsFlags = "SPEC_NODES"
	V0041OpenapiReservationRespReservationsFlagsSTATIC             V0041OpenapiReservationRespReservationsFlags = "STATIC"
	V0041OpenapiReservationRespReservationsFlagsTIMEFLOAT          V0041OpenapiReservationRespReservationsFlags = "TIME_FLOAT"
	V0041OpenapiReservationRespReservationsFlagsUSERDELETE         V0041OpenapiReservationRespReservationsFlags = "USER_DELETE"
	V0041OpenapiReservationRespReservationsFlagsWEEKDAY            V0041OpenapiReservationRespReservationsFlags = "WEEKDAY"
	V0041OpenapiReservationRespReservationsFlagsWEEKEND            V0041OpenapiReservationRespReservationsFlags = "WEEKEND"
	V0041OpenapiReservationRespReservationsFlagsWEEKLY             V0041OpenapiReservationRespReservationsFlags = "WEEKLY"
)

// Defines values for V0041OpenapiSlurmdbdConfigRespAccountsFlags.
const (
	V0041OpenapiSlurmdbdConfigRespAccountsFlagsDELETED          V0041OpenapiSlurmdbdConfigRespAccountsFlags = "DELETED"
	V0041OpenapiSlurmdbdConfigRespAccountsFlagsNoUsersAreCoords V0041OpenapiSlurmdbdConfigRespAccountsFlags = "NoUsersAreCoords"
	V0041OpenapiSlurmdbdConfigRespAccountsFlagsUsersAreCoords   V0041OpenapiSlurmdbdConfigRespAccountsFlags = "UsersAreCoords"
	V0041OpenapiSlurmdbdConfigRespAccountsFlagsWithAssociations V0041OpenapiSlurmdbdConfigRespAccountsFlags = "WithAssociations"
	V0041OpenapiSlurmdbdConfigRespAccountsFlagsWithCoordinators V0041OpenapiSlurmdbdConfigRespAccountsFlags = "WithCoordinators"
)

// Defines values for V0041OpenapiSlurmdbdConfigRespAssociationsFlags.
const (
	V0041OpenapiSlurmdbdConfigRespAssociationsFlagsDELETED          V0041OpenapiSlurmdbdConfigRespAssociationsFlags = "DELETED"
	V0041OpenapiSlurmdbdConfigRespAssociationsFlagsExact            V0041OpenapiSlurmdbdConfigRespAssociationsFlags = "Exact"
	V0041OpenapiSlurmdbdConfigRespAssociationsFlagsNoUpdate         V0041OpenapiSlurmdbdConfigRespAssociationsFlags = "NoUpdate"
	V0041OpenapiSlurmdbdConfigRespAssociationsFlagsNoUsersAreCoords V0041OpenapiSlurmdbdConfigRespAssociationsFlags = "NoUsersAreCoords"
	V0041OpenapiSlurmdbdConfigRespAssociationsFlagsUsersAreCoords   V0041OpenapiSlurmdbdConfigRespAssociationsFlags = "UsersAreCoords"
)

// Defines values for V0041OpenapiSlurmdbdConfigRespClustersFlags.
const (
	V0041OpenapiSlurmdbdConfigRespClustersFlagsEXTERNAL       V0041OpenapiSlurmdbdConfigRespClustersFlags = "EXTERNAL"
	V0041OpenapiSlurmdbdConfigRespClustersFlagsFEDERATION     V0041OpenapiSlurmdbdConfigRespClustersFlags = "FEDERATION"
	V0041OpenapiSlurmdbdConfigRespClustersFlagsFRONTEND       V0041OpenapiSlurmdbdConfigRespClustersFlags = "FRONT_END"
	V0041OpenapiSlurmdbdConfigRespClustersFlagsMULTIPLESLURMD V0041OpenapiSlurmdbdConfigRespClustersFlags = "MULTIPLE_SLURMD"
	V0041OpenapiSlurmdbdConfigRespClustersFlagsREGISTERING    V0041OpenapiSlurmdbdConfigRespClustersFlags = "REGISTERING"
)

// Defines values for V0041OpenapiSlurmdbdConfigRespQosFlags.
const (
	V0041OpenapiSlurmdbdConfigRespQosFlagsADD                   V0041OpenapiSlurmdbdConfigRespQosFlags = "ADD"
	V0041OpenapiSlurmdbdConfigRespQosFlagsDENYLIMIT             V0041OpenapiSlurmdbdConfigRespQosFlags = "DENY_LIMIT"
	V0041OpenapiSlurmdbdConfigRespQosFlagsENFORCEUSAGETHRESHOLD V0041OpenapiSlurmdbdConfigRespQosFlags = "ENFORCE_USAGE_THRESHOLD"
	V0041OpenapiSlurmdbdConfigRespQosFlagsNODECAY               V0041OpenapiSlurmdbdConfigRespQosFlags = "NO_DECAY"
	V0041OpenapiSlurmdbdConfigRespQosFlagsNORESERVE             V0041OpenapiSlurmdbdConfigRespQosFlags = "NO_RESERVE"
	V0041OpenapiSlurmdbdConfigRespQosFlagsNOTSET                V0041OpenapiSlurmdbdConfigRespQosFlags = "NOT_SET"
	V0041OpenapiSlurmdbdConfigRespQosFlagsOVERRIDEPARTITIONQOS  V0041OpenapiSlurmdbdConfigRespQosFlags = "OVERRIDE_PARTITION_QOS"
	V0041OpenapiSlurmdbdConfigRespQosFlagsPARTITIONMAXIMUMNODE  V0041OpenapiSlurmdbdConfigRespQosFlags = "PARTITION_MAXIMUM_NODE"
	V0041OpenapiSlurmdbdConfigRespQosFlagsPARTITIONMINIMUMNODE  V0041OpenapiSlurmdbdConfigRespQosFlags = "PARTITION_MINIMUM_NODE"
	V0041OpenapiSlurmdbdConfigRespQosFlagsPARTITIONTIMELIMIT    V0041OpenapiSlurmdbdConfigRespQosFlags = "PARTITION_TIME_LIMIT"
	V0041OpenapiSlurmdbdConfigRespQosFlagsRELATIVE              V0041OpenapiSlurmdbdConfigRespQosFlags = "RELATIVE"
	V0041OpenapiSlurmdbdConfigRespQosFlagsREMOVE                V0041OpenapiSlurmdbdConfigRespQosFlags = "REMOVE"
	V0041OpenapiSlurmdbdConfigRespQosFlagsREQUIREDRESERVATION   V0041OpenapiSlurmdbdConfigRespQosFlags = "REQUIRED_RESERVATION"
	V0041OpenapiSlurmdbdConfigRespQosFlagsUSAGEFACTORSAFE       V0041OpenapiSlurmdbdConfigRespQosFlags = "USAGE_FACTOR_SAFE"
)

// Defines values for V0041OpenapiSlurmdbdConfigRespQosPreemptMode.
const (
	V0041OpenapiSlurmdbdConfigRespQosPreemptModeCANCEL   V0041OpenapiSlurmdbdConfigRespQosPreemptMode = "CANCEL"
	V0041OpenapiSlurmdbdConfigRespQosPreemptModeDISABLED V0041OpenapiSlurmdbdConfigRespQosPreemptMode = "DISABLED"
	V0041OpenapiSlurmdbdConfigRespQosPreemptModeGANG     V0041OpenapiSlurmdbdConfigRespQosPreemptMode = "GANG"
	V0041OpenapiSlurmdbdConfigRespQosPreemptModeREQUEUE  V0041OpenapiSlurmdbdConfigRespQosPreemptMode = "REQUEUE"
	V0041OpenapiSlurmdbdConfigRespQosPreemptModeSUSPEND  V0041OpenapiSlurmdbdConfigRespQosPreemptMode = "SUSPEND"
)

// Defines values for V0041OpenapiSlurmdbdConfigRespUsersAdministratorLevel.
const (
	V0041OpenapiSlurmdbdConfigRespUsersAdministratorLevelAdministrator V0041OpenapiSlurmdbdConfigRespUsersAdministratorLevel = "Administrator"
	V0041OpenapiSlurmdbdConfigRespUsersAdministratorLevelNone          V0041OpenapiSlurmdbdConfigRespUsersAdministratorLevel = "None"
	V0041OpenapiSlurmdbdConfigRespUsersAdministratorLevelNotSet        V0041OpenapiSlurmdbdConfigRespUsersAdministratorLevel = "Not Set"
	V0041OpenapiSlurmdbdConfigRespUsersAdministratorLevelOperator      V0041OpenapiSlurmdbdConfigRespUsersAdministratorLevel = "Operator"
)

// Defines values for V0041OpenapiSlurmdbdConfigRespUsersFlags.
const (
	V0041OpenapiSlurmdbdConfigRespUsersFlagsDELETED V0041OpenapiSlurmdbdConfigRespUsersFlags = "DELETED"
	V0041OpenapiSlurmdbdConfigRespUsersFlagsNONE    V0041OpenapiSlurmdbdConfigRespUsersFlags = "NONE"
)

// Defines values for V0041OpenapiSlurmdbdConfigRespUsersWckeysFlags.
const (
	V0041OpenapiSlurmdbdConfigRespUsersWckeysFlagsDELETED V0041OpenapiSlurmdbdConfigRespUsersWckeysFlags = "DELETED"
)

// Defines values for V0041OpenapiSlurmdbdConfigRespWckeysFlags.
const (
	V0041OpenapiSlurmdbdConfigRespWckeysFlagsDELETED V0041OpenapiSlurmdbdConfigRespWckeysFlags = "DELETED"
)

// Defines values for V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatus.
const (
	V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatusCOREDUMPED V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatus = "CORE_DUMPED"
	V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatusERROR      V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatus = "ERROR"
	V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatusINVALID    V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatus = "INVALID"
	V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatusPENDING    V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatus = "PENDING"
	V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatusSIGNALED   V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatus = "SIGNALED"
	V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatusSUCCESS    V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatus = "SUCCESS"
)

// Defines values for V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatus.
const (
	V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatusCOREDUMPED V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatus = "CORE_DUMPED"
	V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatusERROR      V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatus = "ERROR"
	V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatusINVALID    V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatus = "INVALID"
	V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatusPENDING    V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatus = "PENDING"
	V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatusSIGNALED   V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatus = "SIGNALED"
	V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatusSUCCESS    V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatus = "SUCCESS"
)

// Defines values for V0041OpenapiSlurmdbdJobsRespJobsFlags.
const (
	V0041OpenapiSlurmdbdJobsRespJobsFlagsCLEARSCHEDULING   V0041OpenapiSlurmdbdJobsRespJobsFlags = "CLEAR_SCHEDULING"
	V0041OpenapiSlurmdbdJobsRespJobsFlagsNONE              V0041OpenapiSlurmdbdJobsRespJobsFlags = "NONE"
	V0041OpenapiSlurmdbdJobsRespJobsFlagsNOTSET            V0041OpenapiSlurmdbdJobsRespJobsFlags = "NOT_SET"
	V0041OpenapiSlurmdbdJobsRespJobsFlagsSTARTEDONBACKFILL V0041OpenapiSlurmdbdJobsRespJobsFlags = "STARTED_ON_BACKFILL"
	V0041OpenapiSlurmdbdJobsRespJobsFlagsSTARTEDONSCHEDULE V0041OpenapiSlurmdbdJobsRespJobsFlags = "STARTED_ON_SCHEDULE"
	V0041OpenapiSlurmdbdJobsRespJobsFlagsSTARTEDONSUBMIT   V0041OpenapiSlurmdbdJobsRespJobsFlags = "STARTED_ON_SUBMIT"
	V0041OpenapiSlurmdbdJobsRespJobsFlagsSTARTRECEIVED     V0041OpenapiSlurmdbdJobsRespJobsFlags = "START_RECEIVED"
)

// Defines values for V0041OpenapiSlurmdbdJobsRespJobsStateCurrent.
const (
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentBOOTFAIL     V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "BOOT_FAIL"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentCANCELLED    V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "CANCELLED"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentCOMPLETED    V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "COMPLETED"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentCOMPLETING   V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "COMPLETING"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentCONFIGURING  V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "CONFIGURING"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentDEADLINE     V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "DEADLINE"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentFAILED       V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "FAILED"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentLAUNCHFAILED V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "LAUNCH_FAILED"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentNODEFAIL     V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "NODE_FAIL"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentOUTOFMEMORY  V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "OUT_OF_MEMORY"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentPENDING      V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "PENDING"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentPOWERUPNODE  V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "POWER_UP_NODE"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentPREEMPTED    V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "PREEMPTED"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentRECONFIGFAIL V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "RECONFIG_FAIL"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentREQUEUED     V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "REQUEUED"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentREQUEUEFED   V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "REQUEUE_FED"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentREQUEUEHOLD  V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "REQUEUE_HOLD"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentRESIZING     V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "RESIZING"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentRESVDELHOLD  V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "RESV_DEL_HOLD"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentREVOKED      V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "REVOKED"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentRUNNING      V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "RUNNING"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentSIGNALING    V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "SIGNALING"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentSPECIALEXIT  V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "SPECIAL_EXIT"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentSTAGEOUT     V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "STAGE_OUT"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentSTOPPED      V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "STOPPED"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentSUSPENDED    V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "SUSPENDED"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentTIMEOUT      V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "TIMEOUT"
	V0041OpenapiSlurmdbdJobsRespJobsStateCurrentUPDATEDB     V0041OpenapiSlurmdbdJobsRespJobsStateCurrent = "UPDATE_DB"
)

// Defines values for V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatus.
const (
	V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatusCOREDUMPED V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatus = "CORE_DUMPED"
	V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatusERROR      V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatus = "ERROR"
	V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatusINVALID    V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatus = "INVALID"
	V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatusPENDING    V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatus = "PENDING"
	V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatusSIGNALED   V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatus = "SIGNALED"
	V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatusSUCCESS    V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatus = "SUCCESS"
)

// Defines values for V0041OpenapiSlurmdbdJobsRespJobsStepsState.
const (
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateBOOTFAIL     V0041OpenapiSlurmdbdJobsRespJobsStepsState = "BOOT_FAIL"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateCANCELLED    V0041OpenapiSlurmdbdJobsRespJobsStepsState = "CANCELLED"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateCOMPLETED    V0041OpenapiSlurmdbdJobsRespJobsStepsState = "COMPLETED"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateCOMPLETING   V0041OpenapiSlurmdbdJobsRespJobsStepsState = "COMPLETING"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateCONFIGURING  V0041OpenapiSlurmdbdJobsRespJobsStepsState = "CONFIGURING"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateDEADLINE     V0041OpenapiSlurmdbdJobsRespJobsStepsState = "DEADLINE"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateFAILED       V0041OpenapiSlurmdbdJobsRespJobsStepsState = "FAILED"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateLAUNCHFAILED V0041OpenapiSlurmdbdJobsRespJobsStepsState = "LAUNCH_FAILED"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateNODEFAIL     V0041OpenapiSlurmdbdJobsRespJobsStepsState = "NODE_FAIL"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateOUTOFMEMORY  V0041OpenapiSlurmdbdJobsRespJobsStepsState = "OUT_OF_MEMORY"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStatePENDING      V0041OpenapiSlurmdbdJobsRespJobsStepsState = "PENDING"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStatePOWERUPNODE  V0041OpenapiSlurmdbdJobsRespJobsStepsState = "POWER_UP_NODE"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStatePREEMPTED    V0041OpenapiSlurmdbdJobsRespJobsStepsState = "PREEMPTED"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateRECONFIGFAIL V0041OpenapiSlurmdbdJobsRespJobsStepsState = "RECONFIG_FAIL"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateREQUEUED     V0041OpenapiSlurmdbdJobsRespJobsStepsState = "REQUEUED"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateREQUEUEFED   V0041OpenapiSlurmdbdJobsRespJobsStepsState = "REQUEUE_FED"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateREQUEUEHOLD  V0041OpenapiSlurmdbdJobsRespJobsStepsState = "REQUEUE_HOLD"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateRESIZING     V0041OpenapiSlurmdbdJobsRespJobsStepsState = "RESIZING"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateRESVDELHOLD  V0041OpenapiSlurmdbdJobsRespJobsStepsState = "RESV_DEL_HOLD"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateREVOKED      V0041OpenapiSlurmdbdJobsRespJobsStepsState = "REVOKED"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateRUNNING      V0041OpenapiSlurmdbdJobsRespJobsStepsState = "RUNNING"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateSIGNALING    V0041OpenapiSlurmdbdJobsRespJobsStepsState = "SIGNALING"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateSPECIALEXIT  V0041OpenapiSlurmdbdJobsRespJobsStepsState = "SPECIAL_EXIT"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateSTAGEOUT     V0041OpenapiSlurmdbdJobsRespJobsStepsState = "STAGE_OUT"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateSTOPPED      V0041OpenapiSlurmdbdJobsRespJobsStepsState = "STOPPED"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateSUSPENDED    V0041OpenapiSlurmdbdJobsRespJobsStepsState = "SUSPENDED"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateTIMEOUT      V0041OpenapiSlurmdbdJobsRespJobsStepsState = "TIMEOUT"
	V0041OpenapiSlurmdbdJobsRespJobsStepsStateUPDATEDB     V0041OpenapiSlurmdbdJobsRespJobsStepsState = "UPDATE_DB"
)

// Defines values for V0041OpenapiSlurmdbdJobsRespJobsWckeyFlags.
const (
	ASSIGNEDDEFAULT V0041OpenapiSlurmdbdJobsRespJobsWckeyFlags = "ASSIGNED_DEFAULT"
)

// Defines values for V0041OpenapiSlurmdbdQosRespQosFlags.
const (
	V0041OpenapiSlurmdbdQosRespQosFlagsADD                   V0041OpenapiSlurmdbdQosRespQosFlags = "ADD"
	V0041OpenapiSlurmdbdQosRespQosFlagsDENYLIMIT             V0041OpenapiSlurmdbdQosRespQosFlags = "DENY_LIMIT"
	V0041OpenapiSlurmdbdQosRespQosFlagsENFORCEUSAGETHRESHOLD V0041OpenapiSlurmdbdQosRespQosFlags = "ENFORCE_USAGE_THRESHOLD"
	V0041OpenapiSlurmdbdQosRespQosFlagsNODECAY               V0041OpenapiSlurmdbdQosRespQosFlags = "NO_DECAY"
	V0041OpenapiSlurmdbdQosRespQosFlagsNORESERVE             V0041OpenapiSlurmdbdQosRespQosFlags = "NO_RESERVE"
	V0041OpenapiSlurmdbdQosRespQosFlagsNOTSET                V0041OpenapiSlurmdbdQosRespQosFlags = "NOT_SET"
	V0041OpenapiSlurmdbdQosRespQosFlagsOVERRIDEPARTITIONQOS  V0041OpenapiSlurmdbdQosRespQosFlags = "OVERRIDE_PARTITION_QOS"
	V0041OpenapiSlurmdbdQosRespQosFlagsPARTITIONMAXIMUMNODE  V0041OpenapiSlurmdbdQosRespQosFlags = "PARTITION_MAXIMUM_NODE"
	V0041OpenapiSlurmdbdQosRespQosFlagsPARTITIONMINIMUMNODE  V0041OpenapiSlurmdbdQosRespQosFlags = "PARTITION_MINIMUM_NODE"
	V0041OpenapiSlurmdbdQosRespQosFlagsPARTITIONTIMELIMIT    V0041OpenapiSlurmdbdQosRespQosFlags = "PARTITION_TIME_LIMIT"
	V0041OpenapiSlurmdbdQosRespQosFlagsRELATIVE              V0041OpenapiSlurmdbdQosRespQosFlags = "RELATIVE"
	V0041OpenapiSlurmdbdQosRespQosFlagsREMOVE                V0041OpenapiSlurmdbdQosRespQosFlags = "REMOVE"
	V0041OpenapiSlurmdbdQosRespQosFlagsREQUIREDRESERVATION   V0041OpenapiSlurmdbdQosRespQosFlags = "REQUIRED_RESERVATION"
	V0041OpenapiSlurmdbdQosRespQosFlagsUSAGEFACTORSAFE       V0041OpenapiSlurmdbdQosRespQosFlags = "USAGE_FACTOR_SAFE"
)

// Defines values for V0041OpenapiSlurmdbdQosRespQosPreemptMode.
const (
	V0041OpenapiSlurmdbdQosRespQosPreemptModeCANCEL   V0041OpenapiSlurmdbdQosRespQosPreemptMode = "CANCEL"
	V0041OpenapiSlurmdbdQosRespQosPreemptModeDISABLED V0041OpenapiSlurmdbdQosRespQosPreemptMode = "DISABLED"
	V0041OpenapiSlurmdbdQosRespQosPreemptModeGANG     V0041OpenapiSlurmdbdQosRespQosPreemptMode = "GANG"
	V0041OpenapiSlurmdbdQosRespQosPreemptModeREQUEUE  V0041OpenapiSlurmdbdQosRespQosPreemptMode = "REQUEUE"
	V0041OpenapiSlurmdbdQosRespQosPreemptModeSUSPEND  V0041OpenapiSlurmdbdQosRespQosPreemptMode = "SUSPEND"
)

// Defines values for V0041OpenapiUsersRespUsersAdministratorLevel.
const (
	V0041OpenapiUsersRespUsersAdministratorLevelAdministrator V0041OpenapiUsersRespUsersAdministratorLevel = "Administrator"
	V0041OpenapiUsersRespUsersAdministratorLevelNone          V0041OpenapiUsersRespUsersAdministratorLevel = "None"
	V0041OpenapiUsersRespUsersAdministratorLevelNotSet        V0041OpenapiUsersRespUsersAdministratorLevel = "Not Set"
	V0041OpenapiUsersRespUsersAdministratorLevelOperator      V0041OpenapiUsersRespUsersAdministratorLevel = "Operator"
)

// Defines values for V0041OpenapiUsersRespUsersFlags.
const (
	V0041OpenapiUsersRespUsersFlagsDELETED V0041OpenapiUsersRespUsersFlags = "DELETED"
	V0041OpenapiUsersRespUsersFlagsNONE    V0041OpenapiUsersRespUsersFlags = "NONE"
)

// Defines values for V0041OpenapiUsersRespUsersWckeysFlags.
const (
	V0041OpenapiUsersRespUsersWckeysFlagsDELETED V0041OpenapiUsersRespUsersWckeysFlags = "DELETED"
)

// Defines values for V0041OpenapiWckeyRespWckeysFlags.
const (
	V0041OpenapiWckeyRespWckeysFlagsDELETED V0041OpenapiWckeyRespWckeysFlags = "DELETED"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags.
const (
	SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlagsCPUBINDLDMAP            SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags = "CPU_BIND_LDMAP"
	SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlagsCPUBINDLDMASK           SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags = "CPU_BIND_LDMASK"
	SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlagsCPUBINDLDRANK           SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags = "CPU_BIND_LDRANK"
	SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlagsCPUBINDMAP              SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags = "CPU_BIND_MAP"
	SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlagsCPUBINDMASK             SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags = "CPU_BIND_MASK"
	SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlagsCPUBINDNONE             SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags = "CPU_BIND_NONE"
	SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlagsCPUBINDONETHREADPERCORE SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags = "CPU_BIND_ONE_THREAD_PER_CORE"
	SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlagsCPUBINDRANK             SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags = "CPU_BIND_RANK"
	SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlagsCPUBINDTOCORES          SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags = "CPU_BIND_TO_CORES"
	SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlagsCPUBINDTOLDOMS          SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags = "CPU_BIND_TO_LDOMS"
	SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlagsCPUBINDTOSOCKETS        SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags = "CPU_BIND_TO_SOCKETS"
	SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlagsCPUBINDTOTHREADS        SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags = "CPU_BIND_TO_THREADS"
	SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlagsVERBOSE                 SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags = "VERBOSE"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyHetjobCrontabFlags.
const (
	SlurmV0041PostJobAllocateJSONBodyHetjobCrontabFlagsWILDDAYOFMONTH SlurmV0041PostJobAllocateJSONBodyHetjobCrontabFlags = "WILD_DAY_OF_MONTH"
	SlurmV0041PostJobAllocateJSONBodyHetjobCrontabFlagsWILDDAYOFWEEK  SlurmV0041PostJobAllocateJSONBodyHetjobCrontabFlags = "WILD_DAY_OF_WEEK"
	SlurmV0041PostJobAllocateJSONBodyHetjobCrontabFlagsWILDHOUR       SlurmV0041PostJobAllocateJSONBodyHetjobCrontabFlags = "WILD_HOUR"
	SlurmV0041PostJobAllocateJSONBodyHetjobCrontabFlagsWILDMINUTE     SlurmV0041PostJobAllocateJSONBodyHetjobCrontabFlags = "WILD_MINUTE"
	SlurmV0041PostJobAllocateJSONBodyHetjobCrontabFlagsWILDMONTH      SlurmV0041PostJobAllocateJSONBodyHetjobCrontabFlags = "WILD_MONTH"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyHetjobExclusive.
const (
	SlurmV0041PostJobAllocateJSONBodyHetjobExclusiveFalse SlurmV0041PostJobAllocateJSONBodyHetjobExclusive = "false"
	SlurmV0041PostJobAllocateJSONBodyHetjobExclusiveMcs   SlurmV0041PostJobAllocateJSONBodyHetjobExclusive = "mcs"
	SlurmV0041PostJobAllocateJSONBodyHetjobExclusiveTopo  SlurmV0041PostJobAllocateJSONBodyHetjobExclusive = "topo"
	SlurmV0041PostJobAllocateJSONBodyHetjobExclusiveTrue  SlurmV0041PostJobAllocateJSONBodyHetjobExclusive = "true"
	SlurmV0041PostJobAllocateJSONBodyHetjobExclusiveUser  SlurmV0041PostJobAllocateJSONBodyHetjobExclusive = "user"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyHetjobFlags.
const (
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsACCRUECOUNTCLEARED       SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "ACCRUE_COUNT_CLEARED"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsBACKFILLATTEMPTED        SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "BACKFILL_ATTEMPTED"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsCRONJOB                  SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "CRON_JOB"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsDEPENDENT                SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "DEPENDENT"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsEXACTCPUCOUNTREQUESTED   SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "EXACT_CPU_COUNT_REQUESTED"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsEXACTMEMORYREQUESTED     SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "EXACT_MEMORY_REQUESTED"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsEXACTTASKCOUNTREQUESTED  SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "EXACT_TASK_COUNT_REQUESTED"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsGRESBINDINGDISABLED      SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "GRES_BINDING_DISABLED"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsGRESBINDINGENFORCED      SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "GRES_BINDING_ENFORCED"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsHASSTATEDIRECTORY        SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "HAS_STATE_DIRECTORY"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsHETEROGENEOUSJOB         SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "HETEROGENEOUS_JOB"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsJOBACCRUETIMERESET       SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "JOB_ACCRUE_TIME_RESET"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsJOBKILLHURRY             SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "JOB_KILL_HURRY"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsJOBWASRUNNING            SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "JOB_WAS_RUNNING"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsKILLINVALIDDEPENDENCY    SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "KILL_INVALID_DEPENDENCY"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsMAGNETIC                 SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "MAGNETIC"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsNOKILLINVALIDDEPENDENCY  SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "NO_KILL_INVALID_DEPENDENCY"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsPARTITIONASSIGNED        SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "PARTITION_ASSIGNED"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsPREFERMINIMUMNODECOUNT   SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "PREFER_MINIMUM_NODE_COUNT"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsSCHEDULINGATTEMPTED      SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "SCHEDULING_ATTEMPTED"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsSENDJOBENVIRONMENT       SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "SEND_JOB_ENVIRONMENT"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsSIBLINGCLUSTERUPDATEONLY SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "SIBLING_CLUSTER_UPDATE_ONLY"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsSKIPTRESSTRINGACCOUNTING SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "SKIP_TRES_STRING_ACCOUNTING"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsSPREADJOB                SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "SPREAD_JOB"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsSTEPMGRENABLED           SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "STEPMGR_ENABLED"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsTESTINGBACKFILL          SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "TESTING_BACKFILL"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsTESTINGWHOLENODEBACKFILL SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "TESTING_WHOLE_NODE_BACKFILL"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsTESTNOWONLY              SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "TEST_NOW_ONLY"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsTOPPRIORITYJOB           SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "TOP_PRIORITY_JOB"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsUSINGDEFAULTACCOUNT      SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "USING_DEFAULT_ACCOUNT"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsUSINGDEFAULTPARTITION    SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "USING_DEFAULT_PARTITION"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsUSINGDEFAULTQOS          SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "USING_DEFAULT_QOS"
	SlurmV0041PostJobAllocateJSONBodyHetjobFlagsUSINGDEFAULTWCKEY        SlurmV0041PostJobAllocateJSONBodyHetjobFlags = "USING_DEFAULT_WCKEY"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags.
const (
	SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlagsARRAYTASK         SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags = "ARRAY_TASK"
	SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlagsBATCHJOB          SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags = "BATCH_JOB"
	SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlagsCRONJOBS          SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags = "CRON_JOBS"
	SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlagsFEDERATIONREQUEUE SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags = "FEDERATION_REQUEUE"
	SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlagsFULLJOB           SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags = "FULL_JOB"
	SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlagsFULLSTEPSONLY     SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags = "FULL_STEPS_ONLY"
	SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlagsHURRY             SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags = "HURRY"
	SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlagsNOSIBLINGJOBS     SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags = "NO_SIBLING_JOBS"
	SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlagsOUTOFMEMORY       SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags = "OUT_OF_MEMORY"
	SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlagsRESERVATIONJOB    SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags = "RESERVATION_JOB"
	SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlagsVERBOSE           SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags = "VERBOSE"
	SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlagsWARNINGSENT       SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags = "WARNING_SENT"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyHetjobMailType.
const (
	SlurmV0041PostJobAllocateJSONBodyHetjobMailTypeARRAYTASKS        SlurmV0041PostJobAllocateJSONBodyHetjobMailType = "ARRAY_TASKS"
	SlurmV0041PostJobAllocateJSONBodyHetjobMailTypeBEGIN             SlurmV0041PostJobAllocateJSONBodyHetjobMailType = "BEGIN"
	SlurmV0041PostJobAllocateJSONBodyHetjobMailTypeEND               SlurmV0041PostJobAllocateJSONBodyHetjobMailType = "END"
	SlurmV0041PostJobAllocateJSONBodyHetjobMailTypeFAIL              SlurmV0041PostJobAllocateJSONBodyHetjobMailType = "FAIL"
	SlurmV0041PostJobAllocateJSONBodyHetjobMailTypeINVALIDDEPENDENCY SlurmV0041PostJobAllocateJSONBodyHetjobMailType = "INVALID_DEPENDENCY"
	SlurmV0041PostJobAllocateJSONBodyHetjobMailTypeREQUEUE           SlurmV0041PostJobAllocateJSONBodyHetjobMailType = "REQUEUE"
	SlurmV0041PostJobAllocateJSONBodyHetjobMailTypeSTAGEOUT          SlurmV0041PostJobAllocateJSONBodyHetjobMailType = "STAGE_OUT"
	SlurmV0041PostJobAllocateJSONBodyHetjobMailTypeTIME100           SlurmV0041PostJobAllocateJSONBodyHetjobMailType = "TIME=100%"
	SlurmV0041PostJobAllocateJSONBodyHetjobMailTypeTIME50            SlurmV0041PostJobAllocateJSONBodyHetjobMailType = "TIME=50%"
	SlurmV0041PostJobAllocateJSONBodyHetjobMailTypeTIME80            SlurmV0041PostJobAllocateJSONBodyHetjobMailType = "TIME=80%"
	SlurmV0041PostJobAllocateJSONBodyHetjobMailTypeTIME90            SlurmV0041PostJobAllocateJSONBodyHetjobMailType = "TIME=90%"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingType.
const (
	SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingTypeLOCAL   SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingType = "LOCAL"
	SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingTypeMAP     SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingType = "MAP"
	SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingTypeMASK    SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingType = "MASK"
	SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingTypeNONE    SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingType = "NONE"
	SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingTypePREFER  SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingType = "PREFER"
	SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingTypeRANK    SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingType = "RANK"
	SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingTypeSORT    SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingType = "SORT"
	SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingTypeVERBOSE SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingType = "VERBOSE"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyHetjobOpenMode.
const (
	SlurmV0041PostJobAllocateJSONBodyHetjobOpenModeAPPEND   SlurmV0041PostJobAllocateJSONBodyHetjobOpenMode = "APPEND"
	SlurmV0041PostJobAllocateJSONBodyHetjobOpenModeTRUNCATE SlurmV0041PostJobAllocateJSONBodyHetjobOpenMode = "TRUNCATE"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyHetjobProfile.
const (
	SlurmV0041PostJobAllocateJSONBodyHetjobProfileENERGY  SlurmV0041PostJobAllocateJSONBodyHetjobProfile = "ENERGY"
	SlurmV0041PostJobAllocateJSONBodyHetjobProfileLUSTRE  SlurmV0041PostJobAllocateJSONBodyHetjobProfile = "LUSTRE"
	SlurmV0041PostJobAllocateJSONBodyHetjobProfileNETWORK SlurmV0041PostJobAllocateJSONBodyHetjobProfile = "NETWORK"
	SlurmV0041PostJobAllocateJSONBodyHetjobProfileNONE    SlurmV0041PostJobAllocateJSONBodyHetjobProfile = "NONE"
	SlurmV0041PostJobAllocateJSONBodyHetjobProfileNOTSET  SlurmV0041PostJobAllocateJSONBodyHetjobProfile = "NOT_SET"
	SlurmV0041PostJobAllocateJSONBodyHetjobProfileTASK    SlurmV0041PostJobAllocateJSONBodyHetjobProfile = "TASK"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyHetjobShared.
const (
	SlurmV0041PostJobAllocateJSONBodyHetjobSharedMcs           SlurmV0041PostJobAllocateJSONBodyHetjobShared = "mcs"
	SlurmV0041PostJobAllocateJSONBodyHetjobSharedNone          SlurmV0041PostJobAllocateJSONBodyHetjobShared = "none"
	SlurmV0041PostJobAllocateJSONBodyHetjobSharedOversubscribe SlurmV0041PostJobAllocateJSONBodyHetjobShared = "oversubscribe"
	SlurmV0041PostJobAllocateJSONBodyHetjobSharedTopo          SlurmV0041PostJobAllocateJSONBodyHetjobShared = "topo"
	SlurmV0041PostJobAllocateJSONBodyHetjobSharedUser          SlurmV0041PostJobAllocateJSONBodyHetjobShared = "user"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyHetjobX11.
const (
	SlurmV0041PostJobAllocateJSONBodyHetjobX11BATCHNODE       SlurmV0041PostJobAllocateJSONBodyHetjobX11 = "BATCH_NODE"
	SlurmV0041PostJobAllocateJSONBodyHetjobX11FIRSTNODE       SlurmV0041PostJobAllocateJSONBodyHetjobX11 = "FIRST_NODE"
	SlurmV0041PostJobAllocateJSONBodyHetjobX11FORWARDALLNODES SlurmV0041PostJobAllocateJSONBodyHetjobX11 = "FORWARD_ALL_NODES"
	SlurmV0041PostJobAllocateJSONBodyHetjobX11LASTNODE        SlurmV0041PostJobAllocateJSONBodyHetjobX11 = "LAST_NODE"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags.
const (
	SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlagsCPUBINDLDMAP            SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags = "CPU_BIND_LDMAP"
	SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlagsCPUBINDLDMASK           SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags = "CPU_BIND_LDMASK"
	SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlagsCPUBINDLDRANK           SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags = "CPU_BIND_LDRANK"
	SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlagsCPUBINDMAP              SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags = "CPU_BIND_MAP"
	SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlagsCPUBINDMASK             SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags = "CPU_BIND_MASK"
	SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlagsCPUBINDNONE             SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags = "CPU_BIND_NONE"
	SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlagsCPUBINDONETHREADPERCORE SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags = "CPU_BIND_ONE_THREAD_PER_CORE"
	SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlagsCPUBINDRANK             SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags = "CPU_BIND_RANK"
	SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlagsCPUBINDTOCORES          SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags = "CPU_BIND_TO_CORES"
	SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlagsCPUBINDTOLDOMS          SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags = "CPU_BIND_TO_LDOMS"
	SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlagsCPUBINDTOSOCKETS        SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags = "CPU_BIND_TO_SOCKETS"
	SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlagsCPUBINDTOTHREADS        SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags = "CPU_BIND_TO_THREADS"
	SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlagsVERBOSE                 SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags = "VERBOSE"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyJobCrontabFlags.
const (
	SlurmV0041PostJobAllocateJSONBodyJobCrontabFlagsWILDDAYOFMONTH SlurmV0041PostJobAllocateJSONBodyJobCrontabFlags = "WILD_DAY_OF_MONTH"
	SlurmV0041PostJobAllocateJSONBodyJobCrontabFlagsWILDDAYOFWEEK  SlurmV0041PostJobAllocateJSONBodyJobCrontabFlags = "WILD_DAY_OF_WEEK"
	SlurmV0041PostJobAllocateJSONBodyJobCrontabFlagsWILDHOUR       SlurmV0041PostJobAllocateJSONBodyJobCrontabFlags = "WILD_HOUR"
	SlurmV0041PostJobAllocateJSONBodyJobCrontabFlagsWILDMINUTE     SlurmV0041PostJobAllocateJSONBodyJobCrontabFlags = "WILD_MINUTE"
	SlurmV0041PostJobAllocateJSONBodyJobCrontabFlagsWILDMONTH      SlurmV0041PostJobAllocateJSONBodyJobCrontabFlags = "WILD_MONTH"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyJobExclusive.
const (
	SlurmV0041PostJobAllocateJSONBodyJobExclusiveFalse SlurmV0041PostJobAllocateJSONBodyJobExclusive = "false"
	SlurmV0041PostJobAllocateJSONBodyJobExclusiveMcs   SlurmV0041PostJobAllocateJSONBodyJobExclusive = "mcs"
	SlurmV0041PostJobAllocateJSONBodyJobExclusiveTopo  SlurmV0041PostJobAllocateJSONBodyJobExclusive = "topo"
	SlurmV0041PostJobAllocateJSONBodyJobExclusiveTrue  SlurmV0041PostJobAllocateJSONBodyJobExclusive = "true"
	SlurmV0041PostJobAllocateJSONBodyJobExclusiveUser  SlurmV0041PostJobAllocateJSONBodyJobExclusive = "user"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyJobFlags.
const (
	SlurmV0041PostJobAllocateJSONBodyJobFlagsACCRUECOUNTCLEARED       SlurmV0041PostJobAllocateJSONBodyJobFlags = "ACCRUE_COUNT_CLEARED"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsBACKFILLATTEMPTED        SlurmV0041PostJobAllocateJSONBodyJobFlags = "BACKFILL_ATTEMPTED"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsCRONJOB                  SlurmV0041PostJobAllocateJSONBodyJobFlags = "CRON_JOB"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsDEPENDENT                SlurmV0041PostJobAllocateJSONBodyJobFlags = "DEPENDENT"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsEXACTCPUCOUNTREQUESTED   SlurmV0041PostJobAllocateJSONBodyJobFlags = "EXACT_CPU_COUNT_REQUESTED"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsEXACTMEMORYREQUESTED     SlurmV0041PostJobAllocateJSONBodyJobFlags = "EXACT_MEMORY_REQUESTED"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsEXACTTASKCOUNTREQUESTED  SlurmV0041PostJobAllocateJSONBodyJobFlags = "EXACT_TASK_COUNT_REQUESTED"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsGRESBINDINGDISABLED      SlurmV0041PostJobAllocateJSONBodyJobFlags = "GRES_BINDING_DISABLED"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsGRESBINDINGENFORCED      SlurmV0041PostJobAllocateJSONBodyJobFlags = "GRES_BINDING_ENFORCED"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsHASSTATEDIRECTORY        SlurmV0041PostJobAllocateJSONBodyJobFlags = "HAS_STATE_DIRECTORY"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsHETEROGENEOUSJOB         SlurmV0041PostJobAllocateJSONBodyJobFlags = "HETEROGENEOUS_JOB"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsJOBACCRUETIMERESET       SlurmV0041PostJobAllocateJSONBodyJobFlags = "JOB_ACCRUE_TIME_RESET"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsJOBKILLHURRY             SlurmV0041PostJobAllocateJSONBodyJobFlags = "JOB_KILL_HURRY"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsJOBWASRUNNING            SlurmV0041PostJobAllocateJSONBodyJobFlags = "JOB_WAS_RUNNING"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsKILLINVALIDDEPENDENCY    SlurmV0041PostJobAllocateJSONBodyJobFlags = "KILL_INVALID_DEPENDENCY"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsMAGNETIC                 SlurmV0041PostJobAllocateJSONBodyJobFlags = "MAGNETIC"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsNOKILLINVALIDDEPENDENCY  SlurmV0041PostJobAllocateJSONBodyJobFlags = "NO_KILL_INVALID_DEPENDENCY"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsPARTITIONASSIGNED        SlurmV0041PostJobAllocateJSONBodyJobFlags = "PARTITION_ASSIGNED"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsPREFERMINIMUMNODECOUNT   SlurmV0041PostJobAllocateJSONBodyJobFlags = "PREFER_MINIMUM_NODE_COUNT"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsSCHEDULINGATTEMPTED      SlurmV0041PostJobAllocateJSONBodyJobFlags = "SCHEDULING_ATTEMPTED"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsSENDJOBENVIRONMENT       SlurmV0041PostJobAllocateJSONBodyJobFlags = "SEND_JOB_ENVIRONMENT"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsSIBLINGCLUSTERUPDATEONLY SlurmV0041PostJobAllocateJSONBodyJobFlags = "SIBLING_CLUSTER_UPDATE_ONLY"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsSKIPTRESSTRINGACCOUNTING SlurmV0041PostJobAllocateJSONBodyJobFlags = "SKIP_TRES_STRING_ACCOUNTING"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsSPREADJOB                SlurmV0041PostJobAllocateJSONBodyJobFlags = "SPREAD_JOB"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsSTEPMGRENABLED           SlurmV0041PostJobAllocateJSONBodyJobFlags = "STEPMGR_ENABLED"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsTESTINGBACKFILL          SlurmV0041PostJobAllocateJSONBodyJobFlags = "TESTING_BACKFILL"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsTESTINGWHOLENODEBACKFILL SlurmV0041PostJobAllocateJSONBodyJobFlags = "TESTING_WHOLE_NODE_BACKFILL"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsTESTNOWONLY              SlurmV0041PostJobAllocateJSONBodyJobFlags = "TEST_NOW_ONLY"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsTOPPRIORITYJOB           SlurmV0041PostJobAllocateJSONBodyJobFlags = "TOP_PRIORITY_JOB"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsUSINGDEFAULTACCOUNT      SlurmV0041PostJobAllocateJSONBodyJobFlags = "USING_DEFAULT_ACCOUNT"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsUSINGDEFAULTPARTITION    SlurmV0041PostJobAllocateJSONBodyJobFlags = "USING_DEFAULT_PARTITION"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsUSINGDEFAULTQOS          SlurmV0041PostJobAllocateJSONBodyJobFlags = "USING_DEFAULT_QOS"
	SlurmV0041PostJobAllocateJSONBodyJobFlagsUSINGDEFAULTWCKEY        SlurmV0041PostJobAllocateJSONBodyJobFlags = "USING_DEFAULT_WCKEY"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags.
const (
	SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlagsARRAYTASK         SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags = "ARRAY_TASK"
	SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlagsBATCHJOB          SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags = "BATCH_JOB"
	SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlagsCRONJOBS          SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags = "CRON_JOBS"
	SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlagsFEDERATIONREQUEUE SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags = "FEDERATION_REQUEUE"
	SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlagsFULLJOB           SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags = "FULL_JOB"
	SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlagsFULLSTEPSONLY     SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags = "FULL_STEPS_ONLY"
	SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlagsHURRY             SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags = "HURRY"
	SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlagsNOSIBLINGJOBS     SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags = "NO_SIBLING_JOBS"
	SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlagsOUTOFMEMORY       SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags = "OUT_OF_MEMORY"
	SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlagsRESERVATIONJOB    SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags = "RESERVATION_JOB"
	SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlagsVERBOSE           SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags = "VERBOSE"
	SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlagsWARNINGSENT       SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags = "WARNING_SENT"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyJobMailType.
const (
	SlurmV0041PostJobAllocateJSONBodyJobMailTypeARRAYTASKS        SlurmV0041PostJobAllocateJSONBodyJobMailType = "ARRAY_TASKS"
	SlurmV0041PostJobAllocateJSONBodyJobMailTypeBEGIN             SlurmV0041PostJobAllocateJSONBodyJobMailType = "BEGIN"
	SlurmV0041PostJobAllocateJSONBodyJobMailTypeEND               SlurmV0041PostJobAllocateJSONBodyJobMailType = "END"
	SlurmV0041PostJobAllocateJSONBodyJobMailTypeFAIL              SlurmV0041PostJobAllocateJSONBodyJobMailType = "FAIL"
	SlurmV0041PostJobAllocateJSONBodyJobMailTypeINVALIDDEPENDENCY SlurmV0041PostJobAllocateJSONBodyJobMailType = "INVALID_DEPENDENCY"
	SlurmV0041PostJobAllocateJSONBodyJobMailTypeREQUEUE           SlurmV0041PostJobAllocateJSONBodyJobMailType = "REQUEUE"
	SlurmV0041PostJobAllocateJSONBodyJobMailTypeSTAGEOUT          SlurmV0041PostJobAllocateJSONBodyJobMailType = "STAGE_OUT"
	SlurmV0041PostJobAllocateJSONBodyJobMailTypeTIME100           SlurmV0041PostJobAllocateJSONBodyJobMailType = "TIME=100%"
	SlurmV0041PostJobAllocateJSONBodyJobMailTypeTIME50            SlurmV0041PostJobAllocateJSONBodyJobMailType = "TIME=50%"
	SlurmV0041PostJobAllocateJSONBodyJobMailTypeTIME80            SlurmV0041PostJobAllocateJSONBodyJobMailType = "TIME=80%"
	SlurmV0041PostJobAllocateJSONBodyJobMailTypeTIME90            SlurmV0041PostJobAllocateJSONBodyJobMailType = "TIME=90%"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingType.
const (
	SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingTypeLOCAL   SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingType = "LOCAL"
	SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingTypeMAP     SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingType = "MAP"
	SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingTypeMASK    SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingType = "MASK"
	SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingTypeNONE    SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingType = "NONE"
	SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingTypePREFER  SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingType = "PREFER"
	SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingTypeRANK    SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingType = "RANK"
	SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingTypeSORT    SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingType = "SORT"
	SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingTypeVERBOSE SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingType = "VERBOSE"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyJobOpenMode.
const (
	SlurmV0041PostJobAllocateJSONBodyJobOpenModeAPPEND   SlurmV0041PostJobAllocateJSONBodyJobOpenMode = "APPEND"
	SlurmV0041PostJobAllocateJSONBodyJobOpenModeTRUNCATE SlurmV0041PostJobAllocateJSONBodyJobOpenMode = "TRUNCATE"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyJobProfile.
const (
	SlurmV0041PostJobAllocateJSONBodyJobProfileENERGY  SlurmV0041PostJobAllocateJSONBodyJobProfile = "ENERGY"
	SlurmV0041PostJobAllocateJSONBodyJobProfileLUSTRE  SlurmV0041PostJobAllocateJSONBodyJobProfile = "LUSTRE"
	SlurmV0041PostJobAllocateJSONBodyJobProfileNETWORK SlurmV0041PostJobAllocateJSONBodyJobProfile = "NETWORK"
	SlurmV0041PostJobAllocateJSONBodyJobProfileNONE    SlurmV0041PostJobAllocateJSONBodyJobProfile = "NONE"
	SlurmV0041PostJobAllocateJSONBodyJobProfileNOTSET  SlurmV0041PostJobAllocateJSONBodyJobProfile = "NOT_SET"
	SlurmV0041PostJobAllocateJSONBodyJobProfileTASK    SlurmV0041PostJobAllocateJSONBodyJobProfile = "TASK"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyJobShared.
const (
	SlurmV0041PostJobAllocateJSONBodyJobSharedMcs           SlurmV0041PostJobAllocateJSONBodyJobShared = "mcs"
	SlurmV0041PostJobAllocateJSONBodyJobSharedNone          SlurmV0041PostJobAllocateJSONBodyJobShared = "none"
	SlurmV0041PostJobAllocateJSONBodyJobSharedOversubscribe SlurmV0041PostJobAllocateJSONBodyJobShared = "oversubscribe"
	SlurmV0041PostJobAllocateJSONBodyJobSharedTopo          SlurmV0041PostJobAllocateJSONBodyJobShared = "topo"
	SlurmV0041PostJobAllocateJSONBodyJobSharedUser          SlurmV0041PostJobAllocateJSONBodyJobShared = "user"
)

// Defines values for SlurmV0041PostJobAllocateJSONBodyJobX11.
const (
	SlurmV0041PostJobAllocateJSONBodyJobX11BATCHNODE       SlurmV0041PostJobAllocateJSONBodyJobX11 = "BATCH_NODE"
	SlurmV0041PostJobAllocateJSONBodyJobX11FIRSTNODE       SlurmV0041PostJobAllocateJSONBodyJobX11 = "FIRST_NODE"
	SlurmV0041PostJobAllocateJSONBodyJobX11FORWARDALLNODES SlurmV0041PostJobAllocateJSONBodyJobX11 = "FORWARD_ALL_NODES"
	SlurmV0041PostJobAllocateJSONBodyJobX11LASTNODE        SlurmV0041PostJobAllocateJSONBodyJobX11 = "LAST_NODE"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags.
const (
	SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlagsCPUBINDLDMAP            SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags = "CPU_BIND_LDMAP"
	SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlagsCPUBINDLDMASK           SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags = "CPU_BIND_LDMASK"
	SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlagsCPUBINDLDRANK           SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags = "CPU_BIND_LDRANK"
	SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlagsCPUBINDMAP              SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags = "CPU_BIND_MAP"
	SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlagsCPUBINDMASK             SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags = "CPU_BIND_MASK"
	SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlagsCPUBINDNONE             SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags = "CPU_BIND_NONE"
	SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlagsCPUBINDONETHREADPERCORE SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags = "CPU_BIND_ONE_THREAD_PER_CORE"
	SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlagsCPUBINDRANK             SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags = "CPU_BIND_RANK"
	SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlagsCPUBINDTOCORES          SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags = "CPU_BIND_TO_CORES"
	SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlagsCPUBINDTOLDOMS          SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags = "CPU_BIND_TO_LDOMS"
	SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlagsCPUBINDTOSOCKETS        SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags = "CPU_BIND_TO_SOCKETS"
	SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlagsCPUBINDTOTHREADS        SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags = "CPU_BIND_TO_THREADS"
	SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlagsVERBOSE                 SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags = "VERBOSE"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobCrontabFlags.
const (
	SlurmV0041PostJobSubmitJSONBodyJobCrontabFlagsWILDDAYOFMONTH SlurmV0041PostJobSubmitJSONBodyJobCrontabFlags = "WILD_DAY_OF_MONTH"
	SlurmV0041PostJobSubmitJSONBodyJobCrontabFlagsWILDDAYOFWEEK  SlurmV0041PostJobSubmitJSONBodyJobCrontabFlags = "WILD_DAY_OF_WEEK"
	SlurmV0041PostJobSubmitJSONBodyJobCrontabFlagsWILDHOUR       SlurmV0041PostJobSubmitJSONBodyJobCrontabFlags = "WILD_HOUR"
	SlurmV0041PostJobSubmitJSONBodyJobCrontabFlagsWILDMINUTE     SlurmV0041PostJobSubmitJSONBodyJobCrontabFlags = "WILD_MINUTE"
	SlurmV0041PostJobSubmitJSONBodyJobCrontabFlagsWILDMONTH      SlurmV0041PostJobSubmitJSONBodyJobCrontabFlags = "WILD_MONTH"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobExclusive.
const (
	SlurmV0041PostJobSubmitJSONBodyJobExclusiveFalse SlurmV0041PostJobSubmitJSONBodyJobExclusive = "false"
	SlurmV0041PostJobSubmitJSONBodyJobExclusiveMcs   SlurmV0041PostJobSubmitJSONBodyJobExclusive = "mcs"
	SlurmV0041PostJobSubmitJSONBodyJobExclusiveTopo  SlurmV0041PostJobSubmitJSONBodyJobExclusive = "topo"
	SlurmV0041PostJobSubmitJSONBodyJobExclusiveTrue  SlurmV0041PostJobSubmitJSONBodyJobExclusive = "true"
	SlurmV0041PostJobSubmitJSONBodyJobExclusiveUser  SlurmV0041PostJobSubmitJSONBodyJobExclusive = "user"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobFlags.
const (
	SlurmV0041PostJobSubmitJSONBodyJobFlagsACCRUECOUNTCLEARED       SlurmV0041PostJobSubmitJSONBodyJobFlags = "ACCRUE_COUNT_CLEARED"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsBACKFILLATTEMPTED        SlurmV0041PostJobSubmitJSONBodyJobFlags = "BACKFILL_ATTEMPTED"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsCRONJOB                  SlurmV0041PostJobSubmitJSONBodyJobFlags = "CRON_JOB"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsDEPENDENT                SlurmV0041PostJobSubmitJSONBodyJobFlags = "DEPENDENT"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsEXACTCPUCOUNTREQUESTED   SlurmV0041PostJobSubmitJSONBodyJobFlags = "EXACT_CPU_COUNT_REQUESTED"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsEXACTMEMORYREQUESTED     SlurmV0041PostJobSubmitJSONBodyJobFlags = "EXACT_MEMORY_REQUESTED"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsEXACTTASKCOUNTREQUESTED  SlurmV0041PostJobSubmitJSONBodyJobFlags = "EXACT_TASK_COUNT_REQUESTED"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsGRESBINDINGDISABLED      SlurmV0041PostJobSubmitJSONBodyJobFlags = "GRES_BINDING_DISABLED"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsGRESBINDINGENFORCED      SlurmV0041PostJobSubmitJSONBodyJobFlags = "GRES_BINDING_ENFORCED"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsHASSTATEDIRECTORY        SlurmV0041PostJobSubmitJSONBodyJobFlags = "HAS_STATE_DIRECTORY"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsHETEROGENEOUSJOB         SlurmV0041PostJobSubmitJSONBodyJobFlags = "HETEROGENEOUS_JOB"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsJOBACCRUETIMERESET       SlurmV0041PostJobSubmitJSONBodyJobFlags = "JOB_ACCRUE_TIME_RESET"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsJOBKILLHURRY             SlurmV0041PostJobSubmitJSONBodyJobFlags = "JOB_KILL_HURRY"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsJOBWASRUNNING            SlurmV0041PostJobSubmitJSONBodyJobFlags = "JOB_WAS_RUNNING"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsKILLINVALIDDEPENDENCY    SlurmV0041PostJobSubmitJSONBodyJobFlags = "KILL_INVALID_DEPENDENCY"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsMAGNETIC                 SlurmV0041PostJobSubmitJSONBodyJobFlags = "MAGNETIC"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsNOKILLINVALIDDEPENDENCY  SlurmV0041PostJobSubmitJSONBodyJobFlags = "NO_KILL_INVALID_DEPENDENCY"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsPARTITIONASSIGNED        SlurmV0041PostJobSubmitJSONBodyJobFlags = "PARTITION_ASSIGNED"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsPREFERMINIMUMNODECOUNT   SlurmV0041PostJobSubmitJSONBodyJobFlags = "PREFER_MINIMUM_NODE_COUNT"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsSCHEDULINGATTEMPTED      SlurmV0041PostJobSubmitJSONBodyJobFlags = "SCHEDULING_ATTEMPTED"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsSENDJOBENVIRONMENT       SlurmV0041PostJobSubmitJSONBodyJobFlags = "SEND_JOB_ENVIRONMENT"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsSIBLINGCLUSTERUPDATEONLY SlurmV0041PostJobSubmitJSONBodyJobFlags = "SIBLING_CLUSTER_UPDATE_ONLY"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsSKIPTRESSTRINGACCOUNTING SlurmV0041PostJobSubmitJSONBodyJobFlags = "SKIP_TRES_STRING_ACCOUNTING"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsSPREADJOB                SlurmV0041PostJobSubmitJSONBodyJobFlags = "SPREAD_JOB"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsSTEPMGRENABLED           SlurmV0041PostJobSubmitJSONBodyJobFlags = "STEPMGR_ENABLED"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsTESTINGBACKFILL          SlurmV0041PostJobSubmitJSONBodyJobFlags = "TESTING_BACKFILL"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsTESTINGWHOLENODEBACKFILL SlurmV0041PostJobSubmitJSONBodyJobFlags = "TESTING_WHOLE_NODE_BACKFILL"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsTESTNOWONLY              SlurmV0041PostJobSubmitJSONBodyJobFlags = "TEST_NOW_ONLY"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsTOPPRIORITYJOB           SlurmV0041PostJobSubmitJSONBodyJobFlags = "TOP_PRIORITY_JOB"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsUSINGDEFAULTACCOUNT      SlurmV0041PostJobSubmitJSONBodyJobFlags = "USING_DEFAULT_ACCOUNT"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsUSINGDEFAULTPARTITION    SlurmV0041PostJobSubmitJSONBodyJobFlags = "USING_DEFAULT_PARTITION"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsUSINGDEFAULTQOS          SlurmV0041PostJobSubmitJSONBodyJobFlags = "USING_DEFAULT_QOS"
	SlurmV0041PostJobSubmitJSONBodyJobFlagsUSINGDEFAULTWCKEY        SlurmV0041PostJobSubmitJSONBodyJobFlags = "USING_DEFAULT_WCKEY"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags.
const (
	SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlagsARRAYTASK         SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags = "ARRAY_TASK"
	SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlagsBATCHJOB          SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags = "BATCH_JOB"
	SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlagsCRONJOBS          SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags = "CRON_JOBS"
	SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlagsFEDERATIONREQUEUE SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags = "FEDERATION_REQUEUE"
	SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlagsFULLJOB           SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags = "FULL_JOB"
	SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlagsFULLSTEPSONLY     SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags = "FULL_STEPS_ONLY"
	SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlagsHURRY             SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags = "HURRY"
	SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlagsNOSIBLINGJOBS     SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags = "NO_SIBLING_JOBS"
	SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlagsOUTOFMEMORY       SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags = "OUT_OF_MEMORY"
	SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlagsRESERVATIONJOB    SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags = "RESERVATION_JOB"
	SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlagsVERBOSE           SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags = "VERBOSE"
	SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlagsWARNINGSENT       SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags = "WARNING_SENT"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobMailType.
const (
	SlurmV0041PostJobSubmitJSONBodyJobMailTypeARRAYTASKS        SlurmV0041PostJobSubmitJSONBodyJobMailType = "ARRAY_TASKS"
	SlurmV0041PostJobSubmitJSONBodyJobMailTypeBEGIN             SlurmV0041PostJobSubmitJSONBodyJobMailType = "BEGIN"
	SlurmV0041PostJobSubmitJSONBodyJobMailTypeEND               SlurmV0041PostJobSubmitJSONBodyJobMailType = "END"
	SlurmV0041PostJobSubmitJSONBodyJobMailTypeFAIL              SlurmV0041PostJobSubmitJSONBodyJobMailType = "FAIL"
	SlurmV0041PostJobSubmitJSONBodyJobMailTypeINVALIDDEPENDENCY SlurmV0041PostJobSubmitJSONBodyJobMailType = "INVALID_DEPENDENCY"
	SlurmV0041PostJobSubmitJSONBodyJobMailTypeREQUEUE           SlurmV0041PostJobSubmitJSONBodyJobMailType = "REQUEUE"
	SlurmV0041PostJobSubmitJSONBodyJobMailTypeSTAGEOUT          SlurmV0041PostJobSubmitJSONBodyJobMailType = "STAGE_OUT"
	SlurmV0041PostJobSubmitJSONBodyJobMailTypeTIME100           SlurmV0041PostJobSubmitJSONBodyJobMailType = "TIME=100%"
	SlurmV0041PostJobSubmitJSONBodyJobMailTypeTIME50            SlurmV0041PostJobSubmitJSONBodyJobMailType = "TIME=50%"
	SlurmV0041PostJobSubmitJSONBodyJobMailTypeTIME80            SlurmV0041PostJobSubmitJSONBodyJobMailType = "TIME=80%"
	SlurmV0041PostJobSubmitJSONBodyJobMailTypeTIME90            SlurmV0041PostJobSubmitJSONBodyJobMailType = "TIME=90%"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingType.
const (
	SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingTypeLOCAL   SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingType = "LOCAL"
	SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingTypeMAP     SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingType = "MAP"
	SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingTypeMASK    SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingType = "MASK"
	SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingTypeNONE    SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingType = "NONE"
	SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingTypePREFER  SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingType = "PREFER"
	SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingTypeRANK    SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingType = "RANK"
	SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingTypeSORT    SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingType = "SORT"
	SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingTypeVERBOSE SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingType = "VERBOSE"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobOpenMode.
const (
	SlurmV0041PostJobSubmitJSONBodyJobOpenModeAPPEND   SlurmV0041PostJobSubmitJSONBodyJobOpenMode = "APPEND"
	SlurmV0041PostJobSubmitJSONBodyJobOpenModeTRUNCATE SlurmV0041PostJobSubmitJSONBodyJobOpenMode = "TRUNCATE"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobProfile.
const (
	SlurmV0041PostJobSubmitJSONBodyJobProfileENERGY  SlurmV0041PostJobSubmitJSONBodyJobProfile = "ENERGY"
	SlurmV0041PostJobSubmitJSONBodyJobProfileLUSTRE  SlurmV0041PostJobSubmitJSONBodyJobProfile = "LUSTRE"
	SlurmV0041PostJobSubmitJSONBodyJobProfileNETWORK SlurmV0041PostJobSubmitJSONBodyJobProfile = "NETWORK"
	SlurmV0041PostJobSubmitJSONBodyJobProfileNONE    SlurmV0041PostJobSubmitJSONBodyJobProfile = "NONE"
	SlurmV0041PostJobSubmitJSONBodyJobProfileNOTSET  SlurmV0041PostJobSubmitJSONBodyJobProfile = "NOT_SET"
	SlurmV0041PostJobSubmitJSONBodyJobProfileTASK    SlurmV0041PostJobSubmitJSONBodyJobProfile = "TASK"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobShared.
const (
	SlurmV0041PostJobSubmitJSONBodyJobSharedMcs           SlurmV0041PostJobSubmitJSONBodyJobShared = "mcs"
	SlurmV0041PostJobSubmitJSONBodyJobSharedNone          SlurmV0041PostJobSubmitJSONBodyJobShared = "none"
	SlurmV0041PostJobSubmitJSONBodyJobSharedOversubscribe SlurmV0041PostJobSubmitJSONBodyJobShared = "oversubscribe"
	SlurmV0041PostJobSubmitJSONBodyJobSharedTopo          SlurmV0041PostJobSubmitJSONBodyJobShared = "topo"
	SlurmV0041PostJobSubmitJSONBodyJobSharedUser          SlurmV0041PostJobSubmitJSONBodyJobShared = "user"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobX11.
const (
	SlurmV0041PostJobSubmitJSONBodyJobX11BATCHNODE       SlurmV0041PostJobSubmitJSONBodyJobX11 = "BATCH_NODE"
	SlurmV0041PostJobSubmitJSONBodyJobX11FIRSTNODE       SlurmV0041PostJobSubmitJSONBodyJobX11 = "FIRST_NODE"
	SlurmV0041PostJobSubmitJSONBodyJobX11FORWARDALLNODES SlurmV0041PostJobSubmitJSONBodyJobX11 = "FORWARD_ALL_NODES"
	SlurmV0041PostJobSubmitJSONBodyJobX11LASTNODE        SlurmV0041PostJobSubmitJSONBodyJobX11 = "LAST_NODE"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags.
const (
	SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlagsCPUBINDLDMAP            SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags = "CPU_BIND_LDMAP"
	SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlagsCPUBINDLDMASK           SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags = "CPU_BIND_LDMASK"
	SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlagsCPUBINDLDRANK           SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags = "CPU_BIND_LDRANK"
	SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlagsCPUBINDMAP              SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags = "CPU_BIND_MAP"
	SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlagsCPUBINDMASK             SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags = "CPU_BIND_MASK"
	SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlagsCPUBINDNONE             SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags = "CPU_BIND_NONE"
	SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlagsCPUBINDONETHREADPERCORE SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags = "CPU_BIND_ONE_THREAD_PER_CORE"
	SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlagsCPUBINDRANK             SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags = "CPU_BIND_RANK"
	SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlagsCPUBINDTOCORES          SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags = "CPU_BIND_TO_CORES"
	SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlagsCPUBINDTOLDOMS          SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags = "CPU_BIND_TO_LDOMS"
	SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlagsCPUBINDTOSOCKETS        SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags = "CPU_BIND_TO_SOCKETS"
	SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlagsCPUBINDTOTHREADS        SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags = "CPU_BIND_TO_THREADS"
	SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlagsVERBOSE                 SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags = "VERBOSE"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobsCrontabFlags.
const (
	SlurmV0041PostJobSubmitJSONBodyJobsCrontabFlagsWILDDAYOFMONTH SlurmV0041PostJobSubmitJSONBodyJobsCrontabFlags = "WILD_DAY_OF_MONTH"
	SlurmV0041PostJobSubmitJSONBodyJobsCrontabFlagsWILDDAYOFWEEK  SlurmV0041PostJobSubmitJSONBodyJobsCrontabFlags = "WILD_DAY_OF_WEEK"
	SlurmV0041PostJobSubmitJSONBodyJobsCrontabFlagsWILDHOUR       SlurmV0041PostJobSubmitJSONBodyJobsCrontabFlags = "WILD_HOUR"
	SlurmV0041PostJobSubmitJSONBodyJobsCrontabFlagsWILDMINUTE     SlurmV0041PostJobSubmitJSONBodyJobsCrontabFlags = "WILD_MINUTE"
	SlurmV0041PostJobSubmitJSONBodyJobsCrontabFlagsWILDMONTH      SlurmV0041PostJobSubmitJSONBodyJobsCrontabFlags = "WILD_MONTH"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobsExclusive.
const (
	SlurmV0041PostJobSubmitJSONBodyJobsExclusiveFalse SlurmV0041PostJobSubmitJSONBodyJobsExclusive = "false"
	SlurmV0041PostJobSubmitJSONBodyJobsExclusiveMcs   SlurmV0041PostJobSubmitJSONBodyJobsExclusive = "mcs"
	SlurmV0041PostJobSubmitJSONBodyJobsExclusiveTopo  SlurmV0041PostJobSubmitJSONBodyJobsExclusive = "topo"
	SlurmV0041PostJobSubmitJSONBodyJobsExclusiveTrue  SlurmV0041PostJobSubmitJSONBodyJobsExclusive = "true"
	SlurmV0041PostJobSubmitJSONBodyJobsExclusiveUser  SlurmV0041PostJobSubmitJSONBodyJobsExclusive = "user"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobsFlags.
const (
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsACCRUECOUNTCLEARED       SlurmV0041PostJobSubmitJSONBodyJobsFlags = "ACCRUE_COUNT_CLEARED"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsBACKFILLATTEMPTED        SlurmV0041PostJobSubmitJSONBodyJobsFlags = "BACKFILL_ATTEMPTED"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsCRONJOB                  SlurmV0041PostJobSubmitJSONBodyJobsFlags = "CRON_JOB"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsDEPENDENT                SlurmV0041PostJobSubmitJSONBodyJobsFlags = "DEPENDENT"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsEXACTCPUCOUNTREQUESTED   SlurmV0041PostJobSubmitJSONBodyJobsFlags = "EXACT_CPU_COUNT_REQUESTED"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsEXACTMEMORYREQUESTED     SlurmV0041PostJobSubmitJSONBodyJobsFlags = "EXACT_MEMORY_REQUESTED"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsEXACTTASKCOUNTREQUESTED  SlurmV0041PostJobSubmitJSONBodyJobsFlags = "EXACT_TASK_COUNT_REQUESTED"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsGRESBINDINGDISABLED      SlurmV0041PostJobSubmitJSONBodyJobsFlags = "GRES_BINDING_DISABLED"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsGRESBINDINGENFORCED      SlurmV0041PostJobSubmitJSONBodyJobsFlags = "GRES_BINDING_ENFORCED"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsHASSTATEDIRECTORY        SlurmV0041PostJobSubmitJSONBodyJobsFlags = "HAS_STATE_DIRECTORY"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsHETEROGENEOUSJOB         SlurmV0041PostJobSubmitJSONBodyJobsFlags = "HETEROGENEOUS_JOB"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsJOBACCRUETIMERESET       SlurmV0041PostJobSubmitJSONBodyJobsFlags = "JOB_ACCRUE_TIME_RESET"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsJOBKILLHURRY             SlurmV0041PostJobSubmitJSONBodyJobsFlags = "JOB_KILL_HURRY"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsJOBWASRUNNING            SlurmV0041PostJobSubmitJSONBodyJobsFlags = "JOB_WAS_RUNNING"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsKILLINVALIDDEPENDENCY    SlurmV0041PostJobSubmitJSONBodyJobsFlags = "KILL_INVALID_DEPENDENCY"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsMAGNETIC                 SlurmV0041PostJobSubmitJSONBodyJobsFlags = "MAGNETIC"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsNOKILLINVALIDDEPENDENCY  SlurmV0041PostJobSubmitJSONBodyJobsFlags = "NO_KILL_INVALID_DEPENDENCY"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsPARTITIONASSIGNED        SlurmV0041PostJobSubmitJSONBodyJobsFlags = "PARTITION_ASSIGNED"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsPREFERMINIMUMNODECOUNT   SlurmV0041PostJobSubmitJSONBodyJobsFlags = "PREFER_MINIMUM_NODE_COUNT"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsSCHEDULINGATTEMPTED      SlurmV0041PostJobSubmitJSONBodyJobsFlags = "SCHEDULING_ATTEMPTED"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsSENDJOBENVIRONMENT       SlurmV0041PostJobSubmitJSONBodyJobsFlags = "SEND_JOB_ENVIRONMENT"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsSIBLINGCLUSTERUPDATEONLY SlurmV0041PostJobSubmitJSONBodyJobsFlags = "SIBLING_CLUSTER_UPDATE_ONLY"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsSKIPTRESSTRINGACCOUNTING SlurmV0041PostJobSubmitJSONBodyJobsFlags = "SKIP_TRES_STRING_ACCOUNTING"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsSPREADJOB                SlurmV0041PostJobSubmitJSONBodyJobsFlags = "SPREAD_JOB"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsSTEPMGRENABLED           SlurmV0041PostJobSubmitJSONBodyJobsFlags = "STEPMGR_ENABLED"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsTESTINGBACKFILL          SlurmV0041PostJobSubmitJSONBodyJobsFlags = "TESTING_BACKFILL"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsTESTINGWHOLENODEBACKFILL SlurmV0041PostJobSubmitJSONBodyJobsFlags = "TESTING_WHOLE_NODE_BACKFILL"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsTESTNOWONLY              SlurmV0041PostJobSubmitJSONBodyJobsFlags = "TEST_NOW_ONLY"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsTOPPRIORITYJOB           SlurmV0041PostJobSubmitJSONBodyJobsFlags = "TOP_PRIORITY_JOB"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsUSINGDEFAULTACCOUNT      SlurmV0041PostJobSubmitJSONBodyJobsFlags = "USING_DEFAULT_ACCOUNT"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsUSINGDEFAULTPARTITION    SlurmV0041PostJobSubmitJSONBodyJobsFlags = "USING_DEFAULT_PARTITION"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsUSINGDEFAULTQOS          SlurmV0041PostJobSubmitJSONBodyJobsFlags = "USING_DEFAULT_QOS"
	SlurmV0041PostJobSubmitJSONBodyJobsFlagsUSINGDEFAULTWCKEY        SlurmV0041PostJobSubmitJSONBodyJobsFlags = "USING_DEFAULT_WCKEY"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags.
const (
	SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlagsARRAYTASK         SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags = "ARRAY_TASK"
	SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlagsBATCHJOB          SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags = "BATCH_JOB"
	SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlagsCRONJOBS          SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags = "CRON_JOBS"
	SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlagsFEDERATIONREQUEUE SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags = "FEDERATION_REQUEUE"
	SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlagsFULLJOB           SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags = "FULL_JOB"
	SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlagsFULLSTEPSONLY     SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags = "FULL_STEPS_ONLY"
	SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlagsHURRY             SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags = "HURRY"
	SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlagsNOSIBLINGJOBS     SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags = "NO_SIBLING_JOBS"
	SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlagsOUTOFMEMORY       SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags = "OUT_OF_MEMORY"
	SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlagsRESERVATIONJOB    SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags = "RESERVATION_JOB"
	SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlagsVERBOSE           SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags = "VERBOSE"
	SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlagsWARNINGSENT       SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags = "WARNING_SENT"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobsMailType.
const (
	SlurmV0041PostJobSubmitJSONBodyJobsMailTypeARRAYTASKS        SlurmV0041PostJobSubmitJSONBodyJobsMailType = "ARRAY_TASKS"
	SlurmV0041PostJobSubmitJSONBodyJobsMailTypeBEGIN             SlurmV0041PostJobSubmitJSONBodyJobsMailType = "BEGIN"
	SlurmV0041PostJobSubmitJSONBodyJobsMailTypeEND               SlurmV0041PostJobSubmitJSONBodyJobsMailType = "END"
	SlurmV0041PostJobSubmitJSONBodyJobsMailTypeFAIL              SlurmV0041PostJobSubmitJSONBodyJobsMailType = "FAIL"
	SlurmV0041PostJobSubmitJSONBodyJobsMailTypeINVALIDDEPENDENCY SlurmV0041PostJobSubmitJSONBodyJobsMailType = "INVALID_DEPENDENCY"
	SlurmV0041PostJobSubmitJSONBodyJobsMailTypeREQUEUE           SlurmV0041PostJobSubmitJSONBodyJobsMailType = "REQUEUE"
	SlurmV0041PostJobSubmitJSONBodyJobsMailTypeSTAGEOUT          SlurmV0041PostJobSubmitJSONBodyJobsMailType = "STAGE_OUT"
	SlurmV0041PostJobSubmitJSONBodyJobsMailTypeTIME100           SlurmV0041PostJobSubmitJSONBodyJobsMailType = "TIME=100%"
	SlurmV0041PostJobSubmitJSONBodyJobsMailTypeTIME50            SlurmV0041PostJobSubmitJSONBodyJobsMailType = "TIME=50%"
	SlurmV0041PostJobSubmitJSONBodyJobsMailTypeTIME80            SlurmV0041PostJobSubmitJSONBodyJobsMailType = "TIME=80%"
	SlurmV0041PostJobSubmitJSONBodyJobsMailTypeTIME90            SlurmV0041PostJobSubmitJSONBodyJobsMailType = "TIME=90%"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingType.
const (
	SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingTypeLOCAL   SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingType = "LOCAL"
	SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingTypeMAP     SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingType = "MAP"
	SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingTypeMASK    SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingType = "MASK"
	SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingTypeNONE    SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingType = "NONE"
	SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingTypePREFER  SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingType = "PREFER"
	SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingTypeRANK    SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingType = "RANK"
	SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingTypeSORT    SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingType = "SORT"
	SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingTypeVERBOSE SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingType = "VERBOSE"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobsOpenMode.
const (
	SlurmV0041PostJobSubmitJSONBodyJobsOpenModeAPPEND   SlurmV0041PostJobSubmitJSONBodyJobsOpenMode = "APPEND"
	SlurmV0041PostJobSubmitJSONBodyJobsOpenModeTRUNCATE SlurmV0041PostJobSubmitJSONBodyJobsOpenMode = "TRUNCATE"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobsProfile.
const (
	SlurmV0041PostJobSubmitJSONBodyJobsProfileENERGY  SlurmV0041PostJobSubmitJSONBodyJobsProfile = "ENERGY"
	SlurmV0041PostJobSubmitJSONBodyJobsProfileLUSTRE  SlurmV0041PostJobSubmitJSONBodyJobsProfile = "LUSTRE"
	SlurmV0041PostJobSubmitJSONBodyJobsProfileNETWORK SlurmV0041PostJobSubmitJSONBodyJobsProfile = "NETWORK"
	SlurmV0041PostJobSubmitJSONBodyJobsProfileNONE    SlurmV0041PostJobSubmitJSONBodyJobsProfile = "NONE"
	SlurmV0041PostJobSubmitJSONBodyJobsProfileNOTSET  SlurmV0041PostJobSubmitJSONBodyJobsProfile = "NOT_SET"
	SlurmV0041PostJobSubmitJSONBodyJobsProfileTASK    SlurmV0041PostJobSubmitJSONBodyJobsProfile = "TASK"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobsShared.
const (
	SlurmV0041PostJobSubmitJSONBodyJobsSharedMcs           SlurmV0041PostJobSubmitJSONBodyJobsShared = "mcs"
	SlurmV0041PostJobSubmitJSONBodyJobsSharedNone          SlurmV0041PostJobSubmitJSONBodyJobsShared = "none"
	SlurmV0041PostJobSubmitJSONBodyJobsSharedOversubscribe SlurmV0041PostJobSubmitJSONBodyJobsShared = "oversubscribe"
	SlurmV0041PostJobSubmitJSONBodyJobsSharedTopo          SlurmV0041PostJobSubmitJSONBodyJobsShared = "topo"
	SlurmV0041PostJobSubmitJSONBodyJobsSharedUser          SlurmV0041PostJobSubmitJSONBodyJobsShared = "user"
)

// Defines values for SlurmV0041PostJobSubmitJSONBodyJobsX11.
const (
	SlurmV0041PostJobSubmitJSONBodyJobsX11BATCHNODE       SlurmV0041PostJobSubmitJSONBodyJobsX11 = "BATCH_NODE"
	SlurmV0041PostJobSubmitJSONBodyJobsX11FIRSTNODE       SlurmV0041PostJobSubmitJSONBodyJobsX11 = "FIRST_NODE"
	SlurmV0041PostJobSubmitJSONBodyJobsX11FORWARDALLNODES SlurmV0041PostJobSubmitJSONBodyJobsX11 = "FORWARD_ALL_NODES"
	SlurmV0041PostJobSubmitJSONBodyJobsX11LASTNODE        SlurmV0041PostJobSubmitJSONBodyJobsX11 = "LAST_NODE"
)

// Defines values for SlurmV0041DeleteJobParamsFlags.
const (
	SlurmV0041DeleteJobParamsFlagsARRAYTASK         SlurmV0041DeleteJobParamsFlags = "ARRAY_TASK"
	SlurmV0041DeleteJobParamsFlagsBATCHJOB          SlurmV0041DeleteJobParamsFlags = "BATCH_JOB"
	SlurmV0041DeleteJobParamsFlagsCRONJOBS          SlurmV0041DeleteJobParamsFlags = "CRON_JOBS"
	SlurmV0041DeleteJobParamsFlagsFEDERATIONREQUEUE SlurmV0041DeleteJobParamsFlags = "FEDERATION_REQUEUE"
	SlurmV0041DeleteJobParamsFlagsFULLJOB           SlurmV0041DeleteJobParamsFlags = "FULL_JOB"
	SlurmV0041DeleteJobParamsFlagsFULLSTEPSONLY     SlurmV0041DeleteJobParamsFlags = "FULL_STEPS_ONLY"
	SlurmV0041DeleteJobParamsFlagsHURRY             SlurmV0041DeleteJobParamsFlags = "HURRY"
	SlurmV0041DeleteJobParamsFlagsNOSIBLINGJOBS     SlurmV0041DeleteJobParamsFlags = "NO_SIBLING_JOBS"
	SlurmV0041DeleteJobParamsFlagsOUTOFMEMORY       SlurmV0041DeleteJobParamsFlags = "OUT_OF_MEMORY"
	SlurmV0041DeleteJobParamsFlagsRESERVATIONJOB    SlurmV0041DeleteJobParamsFlags = "RESERVATION_JOB"
	SlurmV0041DeleteJobParamsFlagsVERBOSE           SlurmV0041DeleteJobParamsFlags = "VERBOSE"
	SlurmV0041DeleteJobParamsFlagsWARNINGSENT       SlurmV0041DeleteJobParamsFlags = "WARNING_SENT"
)

// Defines values for SlurmV0041GetJobParamsFlags.
const (
	SlurmV0041GetJobParamsFlagsALL        SlurmV0041GetJobParamsFlags = "ALL"
	SlurmV0041GetJobParamsFlagsDETAIL     SlurmV0041GetJobParamsFlags = "DETAIL"
	SlurmV0041GetJobParamsFlagsFEDERATION SlurmV0041GetJobParamsFlags = "FEDERATION"
	SlurmV0041GetJobParamsFlagsFUTURE     SlurmV0041GetJobParamsFlags = "FUTURE"
	SlurmV0041GetJobParamsFlagsLOCAL      SlurmV0041GetJobParamsFlags = "LOCAL"
	SlurmV0041GetJobParamsFlagsMIXED      SlurmV0041GetJobParamsFlags = "MIXED"
	SlurmV0041GetJobParamsFlagsSIBLING    SlurmV0041GetJobParamsFlags = "SIBLING"
)

// Defines values for SlurmV0041PostJobJSONBodyCpuBindingFlags.
const (
	SlurmV0041PostJobJSONBodyCpuBindingFlagsCPUBINDLDMAP            SlurmV0041PostJobJSONBodyCpuBindingFlags = "CPU_BIND_LDMAP"
	SlurmV0041PostJobJSONBodyCpuBindingFlagsCPUBINDLDMASK           SlurmV0041PostJobJSONBodyCpuBindingFlags = "CPU_BIND_LDMASK"
	SlurmV0041PostJobJSONBodyCpuBindingFlagsCPUBINDLDRANK           SlurmV0041PostJobJSONBodyCpuBindingFlags = "CPU_BIND_LDRANK"
	SlurmV0041PostJobJSONBodyCpuBindingFlagsCPUBINDMAP              SlurmV0041PostJobJSONBodyCpuBindingFlags = "CPU_BIND_MAP"
	SlurmV0041PostJobJSONBodyCpuBindingFlagsCPUBINDMASK             SlurmV0041PostJobJSONBodyCpuBindingFlags = "CPU_BIND_MASK"
	SlurmV0041PostJobJSONBodyCpuBindingFlagsCPUBINDNONE             SlurmV0041PostJobJSONBodyCpuBindingFlags = "CPU_BIND_NONE"
	SlurmV0041PostJobJSONBodyCpuBindingFlagsCPUBINDONETHREADPERCORE SlurmV0041PostJobJSONBodyCpuBindingFlags = "CPU_BIND_ONE_THREAD_PER_CORE"
	SlurmV0041PostJobJSONBodyCpuBindingFlagsCPUBINDRANK             SlurmV0041PostJobJSONBodyCpuBindingFlags = "CPU_BIND_RANK"
	SlurmV0041PostJobJSONBodyCpuBindingFlagsCPUBINDTOCORES          SlurmV0041PostJobJSONBodyCpuBindingFlags = "CPU_BIND_TO_CORES"
	SlurmV0041PostJobJSONBodyCpuBindingFlagsCPUBINDTOLDOMS          SlurmV0041PostJobJSONBodyCpuBindingFlags = "CPU_BIND_TO_LDOMS"
	SlurmV0041PostJobJSONBodyCpuBindingFlagsCPUBINDTOSOCKETS        SlurmV0041PostJobJSONBodyCpuBindingFlags = "CPU_BIND_TO_SOCKETS"
	SlurmV0041PostJobJSONBodyCpuBindingFlagsCPUBINDTOTHREADS        SlurmV0041PostJobJSONBodyCpuBindingFlags = "CPU_BIND_TO_THREADS"
	SlurmV0041PostJobJSONBodyCpuBindingFlagsVERBOSE                 SlurmV0041PostJobJSONBodyCpuBindingFlags = "VERBOSE"
)

// Defines values for SlurmV0041PostJobJSONBodyCrontabFlags.
const (
	WILDDAYOFMONTH SlurmV0041PostJobJSONBodyCrontabFlags = "WILD_DAY_OF_MONTH"
	WILDDAYOFWEEK  SlurmV0041PostJobJSONBodyCrontabFlags = "WILD_DAY_OF_WEEK"
	WILDHOUR       SlurmV0041PostJobJSONBodyCrontabFlags = "WILD_HOUR"
	WILDMINUTE     SlurmV0041PostJobJSONBodyCrontabFlags = "WILD_MINUTE"
	WILDMONTH      SlurmV0041PostJobJSONBodyCrontabFlags = "WILD_MONTH"
)

// Defines values for SlurmV0041PostJobJSONBodyExclusive.
const (
	SlurmV0041PostJobJSONBodyExclusiveFalse SlurmV0041PostJobJSONBodyExclusive = "false"
	SlurmV0041PostJobJSONBodyExclusiveMcs   SlurmV0041PostJobJSONBodyExclusive = "mcs"
	SlurmV0041PostJobJSONBodyExclusiveTopo  SlurmV0041PostJobJSONBodyExclusive = "topo"
	SlurmV0041PostJobJSONBodyExclusiveTrue  SlurmV0041PostJobJSONBodyExclusive = "true"
	SlurmV0041PostJobJSONBodyExclusiveUser  SlurmV0041PostJobJSONBodyExclusive = "user"
)

// Defines values for SlurmV0041PostJobJSONBodyFlags.
const (
	ACCRUECOUNTCLEARED       SlurmV0041PostJobJSONBodyFlags = "ACCRUE_COUNT_CLEARED"
	BACKFILLATTEMPTED        SlurmV0041PostJobJSONBodyFlags = "BACKFILL_ATTEMPTED"
	CRONJOB                  SlurmV0041PostJobJSONBodyFlags = "CRON_JOB"
	DEPENDENT                SlurmV0041PostJobJSONBodyFlags = "DEPENDENT"
	EXACTCPUCOUNTREQUESTED   SlurmV0041PostJobJSONBodyFlags = "EXACT_CPU_COUNT_REQUESTED"
	EXACTMEMORYREQUESTED     SlurmV0041PostJobJSONBodyFlags = "EXACT_MEMORY_REQUESTED"
	EXACTTASKCOUNTREQUESTED  SlurmV0041PostJobJSONBodyFlags = "EXACT_TASK_COUNT_REQUESTED"
	GRESBINDINGDISABLED      SlurmV0041PostJobJSONBodyFlags = "GRES_BINDING_DISABLED"
	GRESBINDINGENFORCED      SlurmV0041PostJobJSONBodyFlags = "GRES_BINDING_ENFORCED"
	HASSTATEDIRECTORY        SlurmV0041PostJobJSONBodyFlags = "HAS_STATE_DIRECTORY"
	HETEROGENEOUSJOB         SlurmV0041PostJobJSONBodyFlags = "HETEROGENEOUS_JOB"
	JOBACCRUETIMERESET       SlurmV0041PostJobJSONBodyFlags = "JOB_ACCRUE_TIME_RESET"
	JOBKILLHURRY             SlurmV0041PostJobJSONBodyFlags = "JOB_KILL_HURRY"
	JOBWASRUNNING            SlurmV0041PostJobJSONBodyFlags = "JOB_WAS_RUNNING"
	KILLINVALIDDEPENDENCY    SlurmV0041PostJobJSONBodyFlags = "KILL_INVALID_DEPENDENCY"
	MAGNETIC                 SlurmV0041PostJobJSONBodyFlags = "MAGNETIC"
	NOKILLINVALIDDEPENDENCY  SlurmV0041PostJobJSONBodyFlags = "NO_KILL_INVALID_DEPENDENCY"
	PARTITIONASSIGNED        SlurmV0041PostJobJSONBodyFlags = "PARTITION_ASSIGNED"
	PREFERMINIMUMNODECOUNT   SlurmV0041PostJobJSONBodyFlags = "PREFER_MINIMUM_NODE_COUNT"
	SCHEDULINGATTEMPTED      SlurmV0041PostJobJSONBodyFlags = "SCHEDULING_ATTEMPTED"
	SENDJOBENVIRONMENT       SlurmV0041PostJobJSONBodyFlags = "SEND_JOB_ENVIRONMENT"
	SIBLINGCLUSTERUPDATEONLY SlurmV0041PostJobJSONBodyFlags = "SIBLING_CLUSTER_UPDATE_ONLY"
	SKIPTRESSTRINGACCOUNTING SlurmV0041PostJobJSONBodyFlags = "SKIP_TRES_STRING_ACCOUNTING"
	SPREADJOB                SlurmV0041PostJobJSONBodyFlags = "SPREAD_JOB"
	STEPMGRENABLED           SlurmV0041PostJobJSONBodyFlags = "STEPMGR_ENABLED"
	TESTINGBACKFILL          SlurmV0041PostJobJSONBodyFlags = "TESTING_BACKFILL"
	TESTINGWHOLENODEBACKFILL SlurmV0041PostJobJSONBodyFlags = "TESTING_WHOLE_NODE_BACKFILL"
	TESTNOWONLY              SlurmV0041PostJobJSONBodyFlags = "TEST_NOW_ONLY"
	TOPPRIORITYJOB           SlurmV0041PostJobJSONBodyFlags = "TOP_PRIORITY_JOB"
	USINGDEFAULTACCOUNT      SlurmV0041PostJobJSONBodyFlags = "USING_DEFAULT_ACCOUNT"
	USINGDEFAULTPARTITION    SlurmV0041PostJobJSONBodyFlags = "USING_DEFAULT_PARTITION"
	USINGDEFAULTQOS          SlurmV0041PostJobJSONBodyFlags = "USING_DEFAULT_QOS"
	USINGDEFAULTWCKEY        SlurmV0041PostJobJSONBodyFlags = "USING_DEFAULT_WCKEY"
)

// Defines values for SlurmV0041PostJobJSONBodyKillWarningFlags.
const (
	SlurmV0041PostJobJSONBodyKillWarningFlagsARRAYTASK         SlurmV0041PostJobJSONBodyKillWarningFlags = "ARRAY_TASK"
	SlurmV0041PostJobJSONBodyKillWarningFlagsBATCHJOB          SlurmV0041PostJobJSONBodyKillWarningFlags = "BATCH_JOB"
	SlurmV0041PostJobJSONBodyKillWarningFlagsCRONJOBS          SlurmV0041PostJobJSONBodyKillWarningFlags = "CRON_JOBS"
	SlurmV0041PostJobJSONBodyKillWarningFlagsFEDERATIONREQUEUE SlurmV0041PostJobJSONBodyKillWarningFlags = "FEDERATION_REQUEUE"
	SlurmV0041PostJobJSONBodyKillWarningFlagsFULLJOB           SlurmV0041PostJobJSONBodyKillWarningFlags = "FULL_JOB"
	SlurmV0041PostJobJSONBodyKillWarningFlagsFULLSTEPSONLY     SlurmV0041PostJobJSONBodyKillWarningFlags = "FULL_STEPS_ONLY"
	SlurmV0041PostJobJSONBodyKillWarningFlagsHURRY             SlurmV0041PostJobJSONBodyKillWarningFlags = "HURRY"
	SlurmV0041PostJobJSONBodyKillWarningFlagsNOSIBLINGJOBS     SlurmV0041PostJobJSONBodyKillWarningFlags = "NO_SIBLING_JOBS"
	SlurmV0041PostJobJSONBodyKillWarningFlagsOUTOFMEMORY       SlurmV0041PostJobJSONBodyKillWarningFlags = "OUT_OF_MEMORY"
	SlurmV0041PostJobJSONBodyKillWarningFlagsRESERVATIONJOB    SlurmV0041PostJobJSONBodyKillWarningFlags = "RESERVATION_JOB"
	SlurmV0041PostJobJSONBodyKillWarningFlagsVERBOSE           SlurmV0041PostJobJSONBodyKillWarningFlags = "VERBOSE"
	SlurmV0041PostJobJSONBodyKillWarningFlagsWARNINGSENT       SlurmV0041PostJobJSONBodyKillWarningFlags = "WARNING_SENT"
)

// Defines values for SlurmV0041PostJobJSONBodyMailType.
const (
	SlurmV0041PostJobJSONBodyMailTypeARRAYTASKS        SlurmV0041PostJobJSONBodyMailType = "ARRAY_TASKS"
	SlurmV0041PostJobJSONBodyMailTypeBEGIN             SlurmV0041PostJobJSONBodyMailType = "BEGIN"
	SlurmV0041PostJobJSONBodyMailTypeEND               SlurmV0041PostJobJSONBodyMailType = "END"
	SlurmV0041PostJobJSONBodyMailTypeFAIL              SlurmV0041PostJobJSONBodyMailType = "FAIL"
	SlurmV0041PostJobJSONBodyMailTypeINVALIDDEPENDENCY SlurmV0041PostJobJSONBodyMailType = "INVALID_DEPENDENCY"
	SlurmV0041PostJobJSONBodyMailTypeREQUEUE           SlurmV0041PostJobJSONBodyMailType = "REQUEUE"
	SlurmV0041PostJobJSONBodyMailTypeSTAGEOUT          SlurmV0041PostJobJSONBodyMailType = "STAGE_OUT"
	SlurmV0041PostJobJSONBodyMailTypeTIME100           SlurmV0041PostJobJSONBodyMailType = "TIME=100%"
	SlurmV0041PostJobJSONBodyMailTypeTIME50            SlurmV0041PostJobJSONBodyMailType = "TIME=50%"
	SlurmV0041PostJobJSONBodyMailTypeTIME80            SlurmV0041PostJobJSONBodyMailType = "TIME=80%"
	SlurmV0041PostJobJSONBodyMailTypeTIME90            SlurmV0041PostJobJSONBodyMailType = "TIME=90%"
)

// Defines values for SlurmV0041PostJobJSONBodyMemoryBindingType.
const (
	SlurmV0041PostJobJSONBodyMemoryBindingTypeLOCAL   SlurmV0041PostJobJSONBodyMemoryBindingType = "LOCAL"
	SlurmV0041PostJobJSONBodyMemoryBindingTypeMAP     SlurmV0041PostJobJSONBodyMemoryBindingType = "MAP"
	SlurmV0041PostJobJSONBodyMemoryBindingTypeMASK    SlurmV0041PostJobJSONBodyMemoryBindingType = "MASK"
	SlurmV0041PostJobJSONBodyMemoryBindingTypeNONE    SlurmV0041PostJobJSONBodyMemoryBindingType = "NONE"
	SlurmV0041PostJobJSONBodyMemoryBindingTypePREFER  SlurmV0041PostJobJSONBodyMemoryBindingType = "PREFER"
	SlurmV0041PostJobJSONBodyMemoryBindingTypeRANK    SlurmV0041PostJobJSONBodyMemoryBindingType = "RANK"
	SlurmV0041PostJobJSONBodyMemoryBindingTypeSORT    SlurmV0041PostJobJSONBodyMemoryBindingType = "SORT"
	SlurmV0041PostJobJSONBodyMemoryBindingTypeVERBOSE SlurmV0041PostJobJSONBodyMemoryBindingType = "VERBOSE"
)

// Defines values for SlurmV0041PostJobJSONBodyOpenMode.
const (
	APPEND   SlurmV0041PostJobJSONBodyOpenMode = "APPEND"
	TRUNCATE SlurmV0041PostJobJSONBodyOpenMode = "TRUNCATE"
)

// Defines values for SlurmV0041PostJobJSONBodyProfile.
const (
	ENERGY  SlurmV0041PostJobJSONBodyProfile = "ENERGY"
	LUSTRE  SlurmV0041PostJobJSONBodyProfile = "LUSTRE"
	NETWORK SlurmV0041PostJobJSONBodyProfile = "NETWORK"
	NONE    SlurmV0041PostJobJSONBodyProfile = "NONE"
	NOTSET  SlurmV0041PostJobJSONBodyProfile = "NOT_SET"
	TASK    SlurmV0041PostJobJSONBodyProfile = "TASK"
)

// Defines values for SlurmV0041PostJobJSONBodyShared.
const (
	SlurmV0041PostJobJSONBodySharedMcs           SlurmV0041PostJobJSONBodyShared = "mcs"
	SlurmV0041PostJobJSONBodySharedNone          SlurmV0041PostJobJSONBodyShared = "none"
	SlurmV0041PostJobJSONBodySharedOversubscribe SlurmV0041PostJobJSONBodyShared = "oversubscribe"
	SlurmV0041PostJobJSONBodySharedTopo          SlurmV0041PostJobJSONBodyShared = "topo"
	SlurmV0041PostJobJSONBodySharedUser          SlurmV0041PostJobJSONBodyShared = "user"
)

// Defines values for SlurmV0041PostJobJSONBodyX11.
const (
	BATCHNODE       SlurmV0041PostJobJSONBodyX11 = "BATCH_NODE"
	FIRSTNODE       SlurmV0041PostJobJSONBodyX11 = "FIRST_NODE"
	FORWARDALLNODES SlurmV0041PostJobJSONBodyX11 = "FORWARD_ALL_NODES"
	LASTNODE        SlurmV0041PostJobJSONBodyX11 = "LAST_NODE"
)

// Defines values for SlurmV0041DeleteJobsJSONBodyFlags.
const (
	SlurmV0041DeleteJobsJSONBodyFlagsARRAYTASK         SlurmV0041DeleteJobsJSONBodyFlags = "ARRAY_TASK"
	SlurmV0041DeleteJobsJSONBodyFlagsBATCHJOB          SlurmV0041DeleteJobsJSONBodyFlags = "BATCH_JOB"
	SlurmV0041DeleteJobsJSONBodyFlagsCRONJOBS          SlurmV0041DeleteJobsJSONBodyFlags = "CRON_JOBS"
	SlurmV0041DeleteJobsJSONBodyFlagsFEDERATIONREQUEUE SlurmV0041DeleteJobsJSONBodyFlags = "FEDERATION_REQUEUE"
	SlurmV0041DeleteJobsJSONBodyFlagsFULLJOB           SlurmV0041DeleteJobsJSONBodyFlags = "FULL_JOB"
	SlurmV0041DeleteJobsJSONBodyFlagsFULLSTEPSONLY     SlurmV0041DeleteJobsJSONBodyFlags = "FULL_STEPS_ONLY"
	SlurmV0041DeleteJobsJSONBodyFlagsHURRY             SlurmV0041DeleteJobsJSONBodyFlags = "HURRY"
	SlurmV0041DeleteJobsJSONBodyFlagsNOSIBLINGJOBS     SlurmV0041DeleteJobsJSONBodyFlags = "NO_SIBLING_JOBS"
	SlurmV0041DeleteJobsJSONBodyFlagsOUTOFMEMORY       SlurmV0041DeleteJobsJSONBodyFlags = "OUT_OF_MEMORY"
	SlurmV0041DeleteJobsJSONBodyFlagsRESERVATIONJOB    SlurmV0041DeleteJobsJSONBodyFlags = "RESERVATION_JOB"
	SlurmV0041DeleteJobsJSONBodyFlagsVERBOSE           SlurmV0041DeleteJobsJSONBodyFlags = "VERBOSE"
	SlurmV0041DeleteJobsJSONBodyFlagsWARNINGSENT       SlurmV0041DeleteJobsJSONBodyFlags = "WARNING_SENT"
)

// Defines values for SlurmV0041DeleteJobsJSONBodyJobState.
const (
	SlurmV0041DeleteJobsJSONBodyJobStateBOOTFAIL     SlurmV0041DeleteJobsJSONBodyJobState = "BOOT_FAIL"
	SlurmV0041DeleteJobsJSONBodyJobStateCANCELLED    SlurmV0041DeleteJobsJSONBodyJobState = "CANCELLED"
	SlurmV0041DeleteJobsJSONBodyJobStateCOMPLETED    SlurmV0041DeleteJobsJSONBodyJobState = "COMPLETED"
	SlurmV0041DeleteJobsJSONBodyJobStateCOMPLETING   SlurmV0041DeleteJobsJSONBodyJobState = "COMPLETING"
	SlurmV0041DeleteJobsJSONBodyJobStateCONFIGURING  SlurmV0041DeleteJobsJSONBodyJobState = "CONFIGURING"
	SlurmV0041DeleteJobsJSONBodyJobStateDEADLINE     SlurmV0041DeleteJobsJSONBodyJobState = "DEADLINE"
	SlurmV0041DeleteJobsJSONBodyJobStateFAILED       SlurmV0041DeleteJobsJSONBodyJobState = "FAILED"
	SlurmV0041DeleteJobsJSONBodyJobStateLAUNCHFAILED SlurmV0041DeleteJobsJSONBodyJobState = "LAUNCH_FAILED"
	SlurmV0041DeleteJobsJSONBodyJobStateNODEFAIL     SlurmV0041DeleteJobsJSONBodyJobState = "NODE_FAIL"
	SlurmV0041DeleteJobsJSONBodyJobStateOUTOFMEMORY  SlurmV0041DeleteJobsJSONBodyJobState = "OUT_OF_MEMORY"
	SlurmV0041DeleteJobsJSONBodyJobStatePENDING      SlurmV0041DeleteJobsJSONBodyJobState = "PENDING"
	SlurmV0041DeleteJobsJSONBodyJobStatePOWERUPNODE  SlurmV0041DeleteJobsJSONBodyJobState = "POWER_UP_NODE"
	SlurmV0041DeleteJobsJSONBodyJobStatePREEMPTED    SlurmV0041DeleteJobsJSONBodyJobState = "PREEMPTED"
	SlurmV0041DeleteJobsJSONBodyJobStateRECONFIGFAIL SlurmV0041DeleteJobsJSONBodyJobState = "RECONFIG_FAIL"
	SlurmV0041DeleteJobsJSONBodyJobStateREQUEUED     SlurmV0041DeleteJobsJSONBodyJobState = "REQUEUED"
	SlurmV0041DeleteJobsJSONBodyJobStateREQUEUEFED   SlurmV0041DeleteJobsJSONBodyJobState = "REQUEUE_FED"
	SlurmV0041DeleteJobsJSONBodyJobStateREQUEUEHOLD  SlurmV0041DeleteJobsJSONBodyJobState = "REQUEUE_HOLD"
	SlurmV0041DeleteJobsJSONBodyJobStateRESIZING     SlurmV0041DeleteJobsJSONBodyJobState = "RESIZING"
	SlurmV0041DeleteJobsJSONBodyJobStateRESVDELHOLD  SlurmV0041DeleteJobsJSONBodyJobState = "RESV_DEL_HOLD"
	SlurmV0041DeleteJobsJSONBodyJobStateREVOKED      SlurmV0041DeleteJobsJSONBodyJobState = "REVOKED"
	SlurmV0041DeleteJobsJSONBodyJobStateRUNNING      SlurmV0041DeleteJobsJSONBodyJobState = "RUNNING"
	SlurmV0041DeleteJobsJSONBodyJobStateSIGNALING    SlurmV0041DeleteJobsJSONBodyJobState = "SIGNALING"
	SlurmV0041DeleteJobsJSONBodyJobStateSPECIALEXIT  SlurmV0041DeleteJobsJSONBodyJobState = "SPECIAL_EXIT"
	SlurmV0041DeleteJobsJSONBodyJobStateSTAGEOUT     SlurmV0041DeleteJobsJSONBodyJobState = "STAGE_OUT"
	SlurmV0041DeleteJobsJSONBodyJobStateSTOPPED      SlurmV0041DeleteJobsJSONBodyJobState = "STOPPED"
	SlurmV0041DeleteJobsJSONBodyJobStateSUSPENDED    SlurmV0041DeleteJobsJSONBodyJobState = "SUSPENDED"
	SlurmV0041DeleteJobsJSONBodyJobStateTIMEOUT      SlurmV0041DeleteJobsJSONBodyJobState = "TIMEOUT"
	SlurmV0041DeleteJobsJSONBodyJobStateUPDATEDB     SlurmV0041DeleteJobsJSONBodyJobState = "UPDATE_DB"
)

// Defines values for SlurmV0041GetJobsParamsFlags.
const (
	SlurmV0041GetJobsParamsFlagsALL        SlurmV0041GetJobsParamsFlags = "ALL"
	SlurmV0041GetJobsParamsFlagsDETAIL     SlurmV0041GetJobsParamsFlags = "DETAIL"
	SlurmV0041GetJobsParamsFlagsFEDERATION SlurmV0041GetJobsParamsFlags = "FEDERATION"
	SlurmV0041GetJobsParamsFlagsFUTURE     SlurmV0041GetJobsParamsFlags = "FUTURE"
	SlurmV0041GetJobsParamsFlagsLOCAL      SlurmV0041GetJobsParamsFlags = "LOCAL"
	SlurmV0041GetJobsParamsFlagsMIXED      SlurmV0041GetJobsParamsFlags = "MIXED"
	SlurmV0041GetJobsParamsFlagsSIBLING    SlurmV0041GetJobsParamsFlags = "SIBLING"
)

// Defines values for SlurmV0041GetJobsStateParamsFlags.
const (
	SlurmV0041GetJobsStateParamsFlagsALL        SlurmV0041GetJobsStateParamsFlags = "ALL"
	SlurmV0041GetJobsStateParamsFlagsDETAIL     SlurmV0041GetJobsStateParamsFlags = "DETAIL"
	SlurmV0041GetJobsStateParamsFlagsFEDERATION SlurmV0041GetJobsStateParamsFlags = "FEDERATION"
	SlurmV0041GetJobsStateParamsFlagsFUTURE     SlurmV0041GetJobsStateParamsFlags = "FUTURE"
	SlurmV0041GetJobsStateParamsFlagsLOCAL      SlurmV0041GetJobsStateParamsFlags = "LOCAL"
	SlurmV0041GetJobsStateParamsFlagsMIXED      SlurmV0041GetJobsStateParamsFlags = "MIXED"
	SlurmV0041GetJobsStateParamsFlagsSIBLING    SlurmV0041GetJobsStateParamsFlags = "SIBLING"
)

// Defines values for SlurmV0041GetNodeParamsFlags.
const (
	SlurmV0041GetNodeParamsFlagsALL        SlurmV0041GetNodeParamsFlags = "ALL"
	SlurmV0041GetNodeParamsFlagsDETAIL     SlurmV0041GetNodeParamsFlags = "DETAIL"
	SlurmV0041GetNodeParamsFlagsFEDERATION SlurmV0041GetNodeParamsFlags = "FEDERATION"
	SlurmV0041GetNodeParamsFlagsFUTURE     SlurmV0041GetNodeParamsFlags = "FUTURE"
	SlurmV0041GetNodeParamsFlagsLOCAL      SlurmV0041GetNodeParamsFlags = "LOCAL"
	SlurmV0041GetNodeParamsFlagsMIXED      SlurmV0041GetNodeParamsFlags = "MIXED"
	SlurmV0041GetNodeParamsFlagsSIBLING    SlurmV0041GetNodeParamsFlags = "SIBLING"
)

// Defines values for SlurmV0041PostNodeJSONBodyState.
const (
	SlurmV0041PostNodeJSONBodyStateALLOCATED       SlurmV0041PostNodeJSONBodyState = "ALLOCATED"
	SlurmV0041PostNodeJSONBodyStateCLOUD           SlurmV0041PostNodeJSONBodyState = "CLOUD"
	SlurmV0041PostNodeJSONBodyStateCOMPLETING      SlurmV0041PostNodeJSONBodyState = "COMPLETING"
	SlurmV0041PostNodeJSONBodyStateDOWN            SlurmV0041PostNodeJSONBodyState = "DOWN"
	SlurmV0041PostNodeJSONBodyStateDRAIN           SlurmV0041PostNodeJSONBodyState = "DRAIN"
	SlurmV0041PostNodeJSONBodyStateDYNAMICFUTURE   SlurmV0041PostNodeJSONBodyState = "DYNAMIC_FUTURE"
	SlurmV0041PostNodeJSONBodyStateDYNAMICNORM     SlurmV0041PostNodeJSONBodyState = "DYNAMIC_NORM"
	SlurmV0041PostNodeJSONBodyStateERROR           SlurmV0041PostNodeJSONBodyState = "ERROR"
	SlurmV0041PostNodeJSONBodyStateFAIL            SlurmV0041PostNodeJSONBodyState = "FAIL"
	SlurmV0041PostNodeJSONBodyStateFUTURE          SlurmV0041PostNodeJSONBodyState = "FUTURE"
	SlurmV0041PostNodeJSONBodyStateIDLE            SlurmV0041PostNodeJSONBodyState = "IDLE"
	SlurmV0041PostNodeJSONBodyStateINVALID         SlurmV0041PostNodeJSONBodyState = "INVALID"
	SlurmV0041PostNodeJSONBodyStateINVALIDREG      SlurmV0041PostNodeJSONBodyState = "INVALID_REG"
	SlurmV0041PostNodeJSONBodyStateMAINTENANCE     SlurmV0041PostNodeJSONBodyState = "MAINTENANCE"
	SlurmV0041PostNodeJSONBodyStateMIXED           SlurmV0041PostNodeJSONBodyState = "MIXED"
	SlurmV0041PostNodeJSONBodyStateNOTRESPONDING   SlurmV0041PostNodeJSONBodyState = "NOT_RESPONDING"
	SlurmV0041PostNodeJSONBodyStatePLANNED         SlurmV0041PostNodeJSONBodyState = "PLANNED"
	SlurmV0041PostNodeJSONBodyStatePOWERDOWN       SlurmV0041PostNodeJSONBodyState = "POWER_DOWN"
	SlurmV0041PostNodeJSONBodyStatePOWERDRAIN      SlurmV0041PostNodeJSONBodyState = "POWER_DRAIN"
	SlurmV0041PostNodeJSONBodyStatePOWEREDDOWN     SlurmV0041PostNodeJSONBodyState = "POWERED_DOWN"
	SlurmV0041PostNodeJSONBodyStatePOWERINGDOWN    SlurmV0041PostNodeJSONBodyState = "POWERING_DOWN"
	SlurmV0041PostNodeJSONBodyStatePOWERINGUP      SlurmV0041PostNodeJSONBodyState = "POWERING_UP"
	SlurmV0041PostNodeJSONBodyStatePOWERUP         SlurmV0041PostNodeJSONBodyState = "POWER_UP"
	SlurmV0041PostNodeJSONBodyStateREBOOTCANCELED  SlurmV0041PostNodeJSONBodyState = "REBOOT_CANCELED"
	SlurmV0041PostNodeJSONBodyStateREBOOTISSUED    SlurmV0041PostNodeJSONBodyState = "REBOOT_ISSUED"
	SlurmV0041PostNodeJSONBodyStateREBOOTREQUESTED SlurmV0041PostNodeJSONBodyState = "REBOOT_REQUESTED"
	SlurmV0041PostNodeJSONBodyStateRESERVED        SlurmV0041PostNodeJSONBodyState = "RESERVED"
	SlurmV0041PostNodeJSONBodyStateRESUME          SlurmV0041PostNodeJSONBodyState = "RESUME"
	SlurmV0041PostNodeJSONBodyStateUNDRAIN         SlurmV0041PostNodeJSONBodyState = "UNDRAIN"
	SlurmV0041PostNodeJSONBodyStateUNKNOWN         SlurmV0041PostNodeJSONBodyState = "UNKNOWN"
)

// Defines values for SlurmV0041GetNodesParamsFlags.
const (
	SlurmV0041GetNodesParamsFlagsALL        SlurmV0041GetNodesParamsFlags = "ALL"
	SlurmV0041GetNodesParamsFlagsDETAIL     SlurmV0041GetNodesParamsFlags = "DETAIL"
	SlurmV0041GetNodesParamsFlagsFEDERATION SlurmV0041GetNodesParamsFlags = "FEDERATION"
	SlurmV0041GetNodesParamsFlagsFUTURE     SlurmV0041GetNodesParamsFlags = "FUTURE"
	SlurmV0041GetNodesParamsFlagsLOCAL      SlurmV0041GetNodesParamsFlags = "LOCAL"
	SlurmV0041GetNodesParamsFlagsMIXED      SlurmV0041GetNodesParamsFlags = "MIXED"
	SlurmV0041GetNodesParamsFlagsSIBLING    SlurmV0041GetNodesParamsFlags = "SIBLING"
)

// Defines values for SlurmV0041GetPartitionParamsFlags.
const (
	SlurmV0041GetPartitionParamsFlagsALL        SlurmV0041GetPartitionParamsFlags = "ALL"
	SlurmV0041GetPartitionParamsFlagsDETAIL     SlurmV0041GetPartitionParamsFlags = "DETAIL"
	SlurmV0041GetPartitionParamsFlagsFEDERATION SlurmV0041GetPartitionParamsFlags = "FEDERATION"
	SlurmV0041GetPartitionParamsFlagsFUTURE     SlurmV0041GetPartitionParamsFlags = "FUTURE"
	SlurmV0041GetPartitionParamsFlagsLOCAL      SlurmV0041GetPartitionParamsFlags = "LOCAL"
	SlurmV0041GetPartitionParamsFlagsMIXED      SlurmV0041GetPartitionParamsFlags = "MIXED"
	SlurmV0041GetPartitionParamsFlagsSIBLING    SlurmV0041GetPartitionParamsFlags = "SIBLING"
)

// Defines values for SlurmV0041GetPartitionsParamsFlags.
const (
	SlurmV0041GetPartitionsParamsFlagsALL        SlurmV0041GetPartitionsParamsFlags = "ALL"
	SlurmV0041GetPartitionsParamsFlagsDETAIL     SlurmV0041GetPartitionsParamsFlags = "DETAIL"
	SlurmV0041GetPartitionsParamsFlagsFEDERATION SlurmV0041GetPartitionsParamsFlags = "FEDERATION"
	SlurmV0041GetPartitionsParamsFlagsFUTURE     SlurmV0041GetPartitionsParamsFlags = "FUTURE"
	SlurmV0041GetPartitionsParamsFlagsLOCAL      SlurmV0041GetPartitionsParamsFlags = "LOCAL"
	SlurmV0041GetPartitionsParamsFlagsMIXED      SlurmV0041GetPartitionsParamsFlags = "MIXED"
	SlurmV0041GetPartitionsParamsFlagsSIBLING    SlurmV0041GetPartitionsParamsFlags = "SIBLING"
)

// Defines values for SlurmdbV0041DeleteClusterParamsClassification.
const (
	SlurmdbV0041DeleteClusterParamsClassificationCAPABILITY                          SlurmdbV0041DeleteClusterParamsClassification = "CAPABILITY"
	SlurmdbV0041DeleteClusterParamsClassificationCAPACITY                            SlurmdbV0041DeleteClusterParamsClassification = "CAPACITY"
	SlurmdbV0041DeleteClusterParamsClassificationCAPAPACITYBothCAPABILITYAndCAPACITY SlurmdbV0041DeleteClusterParamsClassification = "CAPAPACITY (both CAPABILITY and CAPACITY)"
	SlurmdbV0041DeleteClusterParamsClassificationUNCLASSIFIED                        SlurmdbV0041DeleteClusterParamsClassification = "UNCLASSIFIED"
)

// Defines values for SlurmdbV0041DeleteClusterParamsFlags.
const (
	SlurmdbV0041DeleteClusterParamsFlagsEXTERNAL       SlurmdbV0041DeleteClusterParamsFlags = "EXTERNAL"
	SlurmdbV0041DeleteClusterParamsFlagsFEDERATION     SlurmdbV0041DeleteClusterParamsFlags = "FEDERATION"
	SlurmdbV0041DeleteClusterParamsFlagsFRONTEND       SlurmdbV0041DeleteClusterParamsFlags = "FRONT_END"
	SlurmdbV0041DeleteClusterParamsFlagsMULTIPLESLURMD SlurmdbV0041DeleteClusterParamsFlags = "MULTIPLE_SLURMD"
	SlurmdbV0041DeleteClusterParamsFlagsREGISTERING    SlurmdbV0041DeleteClusterParamsFlags = "REGISTERING"
)

// Defines values for SlurmdbV0041GetClusterParamsClassification.
const (
	SlurmdbV0041GetClusterParamsClassificationCAPABILITY                          SlurmdbV0041GetClusterParamsClassification = "CAPABILITY"
	SlurmdbV0041GetClusterParamsClassificationCAPACITY                            SlurmdbV0041GetClusterParamsClassification = "CAPACITY"
	SlurmdbV0041GetClusterParamsClassificationCAPAPACITYBothCAPABILITYAndCAPACITY SlurmdbV0041GetClusterParamsClassification = "CAPAPACITY (both CAPABILITY and CAPACITY)"
	SlurmdbV0041GetClusterParamsClassificationUNCLASSIFIED                        SlurmdbV0041GetClusterParamsClassification = "UNCLASSIFIED"
)

// Defines values for SlurmdbV0041GetClusterParamsFlags.
const (
	SlurmdbV0041GetClusterParamsFlagsEXTERNAL       SlurmdbV0041GetClusterParamsFlags = "EXTERNAL"
	SlurmdbV0041GetClusterParamsFlagsFEDERATION     SlurmdbV0041GetClusterParamsFlags = "FEDERATION"
	SlurmdbV0041GetClusterParamsFlagsFRONTEND       SlurmdbV0041GetClusterParamsFlags = "FRONT_END"
	SlurmdbV0041GetClusterParamsFlagsMULTIPLESLURMD SlurmdbV0041GetClusterParamsFlags = "MULTIPLE_SLURMD"
	SlurmdbV0041GetClusterParamsFlagsREGISTERING    SlurmdbV0041GetClusterParamsFlags = "REGISTERING"
)

// Defines values for SlurmdbV0041GetQosParamsPreemptMode.
const (
	SlurmdbV0041GetQosParamsPreemptModeCANCEL   SlurmdbV0041GetQosParamsPreemptMode = "CANCEL"
	SlurmdbV0041GetQosParamsPreemptModeDISABLED SlurmdbV0041GetQosParamsPreemptMode = "DISABLED"
	SlurmdbV0041GetQosParamsPreemptModeGANG     SlurmdbV0041GetQosParamsPreemptMode = "GANG"
	SlurmdbV0041GetQosParamsPreemptModeREQUEUE  SlurmdbV0041GetQosParamsPreemptMode = "REQUEUE"
	SlurmdbV0041GetQosParamsPreemptModeSUSPEND  SlurmdbV0041GetQosParamsPreemptMode = "SUSPEND"
)

// Defines values for SlurmdbV0041PostQosParamsPreemptMode.
const (
	SlurmdbV0041PostQosParamsPreemptModeCANCEL   SlurmdbV0041PostQosParamsPreemptMode = "CANCEL"
	SlurmdbV0041PostQosParamsPreemptModeDISABLED SlurmdbV0041PostQosParamsPreemptMode = "DISABLED"
	SlurmdbV0041PostQosParamsPreemptModeGANG     SlurmdbV0041PostQosParamsPreemptMode = "GANG"
	SlurmdbV0041PostQosParamsPreemptModeREQUEUE  SlurmdbV0041PostQosParamsPreemptMode = "REQUEUE"
	SlurmdbV0041PostQosParamsPreemptModeSUSPEND  SlurmdbV0041PostQosParamsPreemptMode = "SUSPEND"
)

// Defines values for SlurmdbV0041GetUsersParamsAdminLevel.
const (
	SlurmdbV0041GetUsersParamsAdminLevelAdministrator SlurmdbV0041GetUsersParamsAdminLevel = "Administrator"
	SlurmdbV0041GetUsersParamsAdminLevelNone          SlurmdbV0041GetUsersParamsAdminLevel = "None"
	SlurmdbV0041GetUsersParamsAdminLevelNotSet        SlurmdbV0041GetUsersParamsAdminLevel = "Not Set"
	SlurmdbV0041GetUsersParamsAdminLevelOperator      SlurmdbV0041GetUsersParamsAdminLevel = "Operator"
)

// Defines values for SlurmdbV0041PostUsersAssociationParamsFlags.
const (
	ALL        SlurmdbV0041PostUsersAssociationParamsFlags = "ALL"
	DETAIL     SlurmdbV0041PostUsersAssociationParamsFlags = "DETAIL"
	FEDERATION SlurmdbV0041PostUsersAssociationParamsFlags = "FEDERATION"
	FUTURE     SlurmdbV0041PostUsersAssociationParamsFlags = "FUTURE"
	LOCAL      SlurmdbV0041PostUsersAssociationParamsFlags = "LOCAL"
	MIXED      SlurmdbV0041PostUsersAssociationParamsFlags = "MIXED"
	SIBLING    SlurmdbV0041PostUsersAssociationParamsFlags = "SIBLING"
)

// Defines values for SlurmdbV0041PostUsersAssociationJSONBodyUserAdminlevel.
const (
	SlurmdbV0041PostUsersAssociationJSONBodyUserAdminlevelAdministrator SlurmdbV0041PostUsersAssociationJSONBodyUserAdminlevel = "Administrator"
	SlurmdbV0041PostUsersAssociationJSONBodyUserAdminlevelNone          SlurmdbV0041PostUsersAssociationJSONBodyUserAdminlevel = "None"
	SlurmdbV0041PostUsersAssociationJSONBodyUserAdminlevelNotSet        SlurmdbV0041PostUsersAssociationJSONBodyUserAdminlevel = "Not Set"
	SlurmdbV0041PostUsersAssociationJSONBodyUserAdminlevelOperator      SlurmdbV0041PostUsersAssociationJSONBodyUserAdminlevel = "Operator"
)

// V0041OpenapiAccountsResp defines model for v0.0.41_openapi_accounts_resp.
type V0041OpenapiAccountsResp struct {
	// Accounts accounts
	Accounts []struct {
		// Associations Associations involving this account (only populated if requested)
		Associations *[]struct {
			// Account Account
			Account *string `json:"account,omitempty"`

			// Cluster Cluster
			Cluster *string `json:"cluster,omitempty"`

			// Id Numeric association ID
			Id *int32 `json:"id,omitempty"`

			// Partition Partition
			Partition *string `json:"partition,omitempty"`

			// User User name
			User string `json:"user"`
		} `json:"associations,omitempty"`

		// Coordinators List of users that are a coordinator of this account (only populated if requested)
		Coordinators *[]struct {
			// Direct Indicates whether the coordinator was directly assigned to this account
			Direct *bool `json:"direct,omitempty"`

			// Name User name
			Name string `json:"name"`
		} `json:"coordinators,omitempty"`

		// Description Arbitrary string describing the account
		Description string `json:"description"`

		// Flags Flags associated with the account
		Flags *[]V0041OpenapiAccountsRespAccountsFlags `json:"flags,omitempty"`

		// Name Account name
		Name string `json:"name"`

		// Organization Organization to which the account belongs
		Organization string `json:"organization"`
	} `json:"accounts"`

	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// V0041OpenapiAccountsRespAccountsFlags defines model for V0041OpenapiAccountsResp.Accounts.Flags.
type V0041OpenapiAccountsRespAccountsFlags string

// V0041OpenapiAssocsRemovedResp defines model for v0.0.41_openapi_assocs_removed_resp.
type V0041OpenapiAssocsRemovedResp struct {
	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// RemovedAssociations removed_associations
	RemovedAssociations []string `json:"removed_associations"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// V0041OpenapiAssocsResp defines model for v0.0.41_openapi_assocs_resp.
type V0041OpenapiAssocsResp struct {
	// Associations associations
	Associations []struct {
		// Account Account
		Account *string `json:"account,omitempty"`

		// Accounting Accounting records containing related resource usage
		Accounting *[]struct {
			// TRES Trackable resources
			TRES *struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"TRES,omitempty"`
			Allocated *struct {
				// Seconds Number of cpu seconds allocated
				Seconds *int64 `json:"seconds,omitempty"`
			} `json:"allocated,omitempty"`

			// Id Association ID or Workload characterization key ID
			Id *int32 `json:"id,omitempty"`

			// Start When the record was started
			Start *int64 `json:"start,omitempty"`
		} `json:"accounting,omitempty"`

		// Cluster Cluster name
		Cluster *string `json:"cluster,omitempty"`

		// Comment Arbitrary comment
		Comment *string `json:"comment,omitempty"`
		Default *struct {
			// Qos Default QOS
			Qos *string `json:"qos,omitempty"`
		} `json:"default,omitempty"`

		// Flags Flags on the association
		Flags *[]V0041OpenapiAssocsRespAssociationsFlags `json:"flags,omitempty"`

		// Id Unique ID
		Id *int32 `json:"id,omitempty"`

		// IsDefault Is default association for user
		IsDefault *bool `json:"is_default,omitempty"`

		// Lineage Complete path up the hierarchy to the root association
		Lineage *string `json:"lineage,omitempty"`
		Max     *struct {
			Jobs *struct {
				// Accruing MaxJobsAccrue
				Accruing *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int32 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"accruing,omitempty"`

				// Active MaxJobs
				Active *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int32 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"active,omitempty"`
				Per *struct {
					// Accruing GrpJobsAccrue
					Accruing *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"accruing,omitempty"`

					// Count GrpJobs
					Count *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"count,omitempty"`

					// Submitted GrpSubmitJobs
					Submitted *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"submitted,omitempty"`

					// WallClock MaxWallDurationPerJob
					WallClock *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"wall_clock,omitempty"`
				} `json:"per,omitempty"`

				// Total MaxSubmitJobs
				Total *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int32 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"total,omitempty"`
			} `json:"jobs,omitempty"`
			Per *struct {
				Account *struct {
					// WallClock GrpWall
					WallClock *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"wall_clock,omitempty"`
				} `json:"account,omitempty"`
			} `json:"per,omitempty"`
			Tres *struct {
				Group *struct {
					// Active GrpTRESRunMins
					Active *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"active,omitempty"`

					// Minutes GrpTRESMins
					Minutes *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"minutes,omitempty"`
				} `json:"group,omitempty"`
				Minutes *struct {
					Per *struct {
						// Job MaxTRESMinsPerJob
						Job *[]struct {
							// Count TRES count (0 if listed generically)
							Count *int64 `json:"count,omitempty"`

							// Id ID used in database
							Id *int32 `json:"id,omitempty"`

							// Name TRES name (if applicable)
							Name *string `json:"name,omitempty"`

							// Type TRES type (CPU, MEM, etc)
							Type string `json:"type"`
						} `json:"job,omitempty"`
					} `json:"per,omitempty"`

					// Total MaxTRESMinsPerJob
					Total *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"total,omitempty"`
				} `json:"minutes,omitempty"`
				Per *struct {
					// Job MaxTRESPerJob
					Job *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"job,omitempty"`

					// Node MaxTRESPerNode
					Node *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"node,omitempty"`
				} `json:"per,omitempty"`

				// Total GrpTRES
				Total *[]struct {
					// Count TRES count (0 if listed generically)
					Count *int64 `json:"count,omitempty"`

					// Id ID used in database
					Id *int32 `json:"id,omitempty"`

					// Name TRES name (if applicable)
					Name *string `json:"name,omitempty"`

					// Type TRES type (CPU, MEM, etc)
					Type string `json:"type"`
				} `json:"total,omitempty"`
			} `json:"tres,omitempty"`
		} `json:"max,omitempty"`
		Min *struct {
			// PriorityThreshold MinPrioThreshold
			PriorityThreshold *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"priority_threshold,omitempty"`
		} `json:"min,omitempty"`

		// ParentAccount Name of parent account
		ParentAccount *string `json:"parent_account,omitempty"`

		// Partition Partition name
		Partition *string `json:"partition,omitempty"`

		// Priority Association priority factor
		Priority *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"priority,omitempty"`

		// Qos List of available QOS names
		Qos *[]string `json:"qos,omitempty"`

		// SharesRaw Allocated shares used for fairshare calculation
		SharesRaw *int32 `json:"shares_raw,omitempty"`

		// User User name
		User string `json:"user"`
	} `json:"associations"`

	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// V0041OpenapiAssocsRespAssociationsFlags defines model for V0041OpenapiAssocsResp.Associations.Flags.
type V0041OpenapiAssocsRespAssociationsFlags string

// V0041OpenapiClustersResp defines model for v0.0.41_openapi_clusters_resp.
type V0041OpenapiClustersResp struct {
	// Clusters clusters
	Clusters []struct {
		Associations *struct {
			// Root Root association information
			Root *struct {
				// Account Account
				Account *string `json:"account,omitempty"`

				// Cluster Cluster
				Cluster *string `json:"cluster,omitempty"`

				// Id Numeric association ID
				Id *int32 `json:"id,omitempty"`

				// Partition Partition
				Partition *string `json:"partition,omitempty"`

				// User User name
				User string `json:"user"`
			} `json:"root,omitempty"`
		} `json:"associations,omitempty"`
		Controller *struct {
			// Host ControlHost
			Host *string `json:"host,omitempty"`

			// Port ControlPort
			Port *int32 `json:"port,omitempty"`
		} `json:"controller,omitempty"`

		// Flags Flags
		Flags *[]V0041OpenapiClustersRespClustersFlags `json:"flags,omitempty"`

		// Name ClusterName
		Name *string `json:"name,omitempty"`

		// Nodes Node names
		Nodes *string `json:"nodes,omitempty"`

		// RpcVersion RPC version used in the cluster
		RpcVersion *int32 `json:"rpc_version,omitempty"`
		// Deprecated:
		SelectPlugin *string `json:"select_plugin,omitempty"`

		// Tres Trackable resources
		Tres *[]struct {
			// Count TRES count (0 if listed generically)
			Count *int64 `json:"count,omitempty"`

			// Id ID used in database
			Id *int32 `json:"id,omitempty"`

			// Name TRES name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type TRES type (CPU, MEM, etc)
			Type string `json:"type"`
		} `json:"tres,omitempty"`
	} `json:"clusters"`

	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// V0041OpenapiClustersRespClustersFlags defines model for V0041OpenapiClustersResp.Clusters.Flags.
type V0041OpenapiClustersRespClustersFlags string

// V0041OpenapiInstancesResp defines model for v0.0.41_openapi_instances_resp.
type V0041OpenapiInstancesResp struct {
	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Instances instances
	Instances []struct {
		// Cluster Cluster name
		Cluster *string `json:"cluster,omitempty"`

		// Extra Arbitrary string used for node filtering if extra constraints are enabled
		Extra *string `json:"extra,omitempty"`

		// InstanceId Cloud instance ID
		InstanceId *string `json:"instance_id,omitempty"`

		// InstanceType Cloud instance type
		InstanceType *string `json:"instance_type,omitempty"`

		// NodeName NodeName
		NodeName *string `json:"node_name,omitempty"`
		Time     *struct {
			// TimeEnd When the instance will end (UNIX timestamp)
			TimeEnd *int64 `json:"time_end,omitempty"`

			// TimeStart When the instance will start (UNIX timestamp)
			TimeStart *int64 `json:"time_start,omitempty"`
		} `json:"time,omitempty"`
	} `json:"instances"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// V0041OpenapiJobInfoResp defines model for v0.0.41_openapi_job_info_resp.
type V0041OpenapiJobInfoResp struct {
	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Jobs List of jobs
	Jobs []struct {
		// Account Account associated with the job
		Account *string `json:"account,omitempty"`

		// AccrueTime When the job started accruing age priority (UNIX timestamp)
		AccrueTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"accrue_time,omitempty"`

		// AdminComment Arbitrary comment made by administrator
		AdminComment *string `json:"admin_comment,omitempty"`

		// AllocatingNode Local node making the resource allocation
		AllocatingNode *string `json:"allocating_node,omitempty"`

		// ArrayJobId Job ID of job array, or 0 if N/A
		ArrayJobId *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"array_job_id,omitempty"`

		// ArrayMaxTasks Maximum number of simultaneously running array tasks, 0 if no limit
		ArrayMaxTasks *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"array_max_tasks,omitempty"`

		// ArrayTaskId Task ID of this task in job array
		ArrayTaskId *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"array_task_id,omitempty"`

		// ArrayTaskString String expression of task IDs in this record
		ArrayTaskString *string `json:"array_task_string,omitempty"`

		// AssociationId Unique identifier for the association
		AssociationId *int32 `json:"association_id,omitempty"`

		// BatchFeatures Features required for batch script's node
		BatchFeatures *string `json:"batch_features,omitempty"`

		// BatchFlag True if batch job
		BatchFlag *bool `json:"batch_flag,omitempty"`

		// BatchHost Name of host running batch script
		BatchHost *string `json:"batch_host,omitempty"`

		// BillableTres Billable TRES
		BillableTres *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *float64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"billable_tres,omitempty"`

		// BurstBuffer Burst buffer specifications
		BurstBuffer *string `json:"burst_buffer,omitempty"`

		// BurstBufferState Burst buffer state details
		BurstBufferState *string `json:"burst_buffer_state,omitempty"`

		// Cluster Cluster name
		Cluster *string `json:"cluster,omitempty"`

		// ClusterFeatures List of required cluster features
		ClusterFeatures *string `json:"cluster_features,omitempty"`

		// Command Executed command
		Command *string `json:"command,omitempty"`

		// Comment Arbitrary comment
		Comment *string `json:"comment,omitempty"`

		// Container Absolute path to OCI container bundle
		Container *string `json:"container,omitempty"`

		// ContainerId OCI container ID
		ContainerId *string `json:"container_id,omitempty"`

		// Contiguous True if job requires contiguous nodes
		Contiguous *bool `json:"contiguous,omitempty"`

		// CoreSpec Specialized core count
		CoreSpec *int32 `json:"core_spec,omitempty"`

		// CoresPerSocket Cores per socket required
		CoresPerSocket *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"cores_per_socket,omitempty"`

		// CpuFrequencyGovernor CPU frequency governor
		CpuFrequencyGovernor *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"cpu_frequency_governor,omitempty"`

		// CpuFrequencyMaximum Maximum CPU frequency
		CpuFrequencyMaximum *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"cpu_frequency_maximum,omitempty"`

		// CpuFrequencyMinimum Minimum CPU frequency
		CpuFrequencyMinimum *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"cpu_frequency_minimum,omitempty"`

		// Cpus Minimum number of CPUs required
		Cpus *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"cpus,omitempty"`

		// CpusPerTask Number of CPUs required by each task
		CpusPerTask *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"cpus_per_task,omitempty"`

		// CpusPerTres Semicolon delimited list of TRES=# values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)
		CpusPerTres *string `json:"cpus_per_tres,omitempty"`

		// Cron Time specification for scrontab job
		Cron *string `json:"cron,omitempty"`

		// CurrentWorkingDirectory Working directory to use for the job
		CurrentWorkingDirectory *string `json:"current_working_directory,omitempty"`

		// Deadline Latest time that the job may start (UNIX timestamp)
		Deadline *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"deadline,omitempty"`

		// DelayBoot Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification
		DelayBoot *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"delay_boot,omitempty"`

		// Dependency Other jobs that must meet certain criteria before this job can start
		Dependency *string `json:"dependency,omitempty"`

		// DerivedExitCode Highest exit code of all job steps
		DerivedExitCode *struct {
			// ReturnCode Process return code (numeric)
			ReturnCode *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"return_code,omitempty"`
			Signal *struct {
				// Id Signal sent to process (numeric)
				Id *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int32 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"id,omitempty"`

				// Name Signal sent to process
				Name *string `json:"name,omitempty"`
			} `json:"signal,omitempty"`

			// Status Status given by return code
			Status *[]V0041OpenapiJobInfoRespJobsDerivedExitCodeStatus `json:"status,omitempty"`
		} `json:"derived_exit_code,omitempty"`

		// EligibleTime Time when the job became eligible to run (UNIX timestamp)
		EligibleTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"eligible_time,omitempty"`

		// EndTime End time, real or expected (UNIX timestamp)
		EndTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"end_time,omitempty"`

		// ExcludedNodes Comma separated list of nodes that may not be used
		ExcludedNodes *string `json:"excluded_nodes,omitempty"`
		// Deprecated:
		Exclusive *[]V0041OpenapiJobInfoRespJobsExclusive `json:"exclusive,omitempty"`

		// ExitCode Exit code of the job
		ExitCode *struct {
			// ReturnCode Process return code (numeric)
			ReturnCode *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"return_code,omitempty"`
			Signal *struct {
				// Id Signal sent to process (numeric)
				Id *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int32 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"id,omitempty"`

				// Name Signal sent to process
				Name *string `json:"name,omitempty"`
			} `json:"signal,omitempty"`

			// Status Status given by return code
			Status *[]V0041OpenapiJobInfoRespJobsExitCodeStatus `json:"status,omitempty"`
		} `json:"exit_code,omitempty"`

		// Extra Arbitrary string used for node filtering if extra constraints are enabled
		Extra *string `json:"extra,omitempty"`

		// FailedNode Name of node that caused job failure
		FailedNode *string `json:"failed_node,omitempty"`

		// Features Comma separated list of features that are required
		Features *string `json:"features,omitempty"`

		// FederationOrigin Origin cluster's name (when using federation)
		FederationOrigin *string `json:"federation_origin,omitempty"`

		// FederationSiblingsActive Active sibling job names
		FederationSiblingsActive *string `json:"federation_siblings_active,omitempty"`

		// FederationSiblingsViable Viable sibling job names
		FederationSiblingsViable *string `json:"federation_siblings_viable,omitempty"`

		// Flags Job flags
		Flags *[]V0041OpenapiJobInfoRespJobsFlags `json:"flags,omitempty"`

		// GresDetail List of GRES index and counts allocated per node
		GresDetail *[]string `json:"gres_detail,omitempty"`

		// GroupId Group ID of the user that owns the job
		GroupId *int32 `json:"group_id,omitempty"`

		// GroupName Group name of the user that owns the job
		GroupName *string `json:"group_name,omitempty"`

		// HetJobId Heterogeneous job ID, if applicable
		HetJobId *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"het_job_id,omitempty"`

		// HetJobIdSet Job ID range for all heterogeneous job components
		HetJobIdSet *string `json:"het_job_id_set,omitempty"`

		// HetJobOffset Unique sequence number applied to this component of the heterogeneous job
		HetJobOffset *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"het_job_offset,omitempty"`

		// Hold Hold (true) or release (false) job
		Hold *bool `json:"hold,omitempty"`

		// JobId Job ID
		JobId *int32 `json:"job_id,omitempty"`

		// JobResources Resources used by the job
		JobResources *struct {
			// Cpus Number of allocated CPUs
			Cpus  int32 `json:"cpus"`
			Nodes *struct {
				// Allocation Allocated node resources
				Allocation *[]struct {
					Cpus *struct {
						// Count Total number of CPUs assigned to job
						Count *int32 `json:"count,omitempty"`

						// Used Total number of CPUs used by job
						Used *int32 `json:"used,omitempty"`
					} `json:"cpus,omitempty"`

					// Index Node index
					Index  int32 `json:"index"`
					Memory *struct {
						// Allocated Total memory (MiB) allocated to job
						Allocated *int64 `json:"allocated,omitempty"`

						// Used Total memory (MiB) used by job
						Used *int64 `json:"used,omitempty"`
					} `json:"memory,omitempty"`

					// Name Node name
					Name string `json:"name"`

					// Sockets Socket allocations in node
					Sockets []struct {
						// Cores Core in socket
						Cores []struct {
							// Index Core index
							Index int32 `json:"index"`

							// Status Core status
							Status []V0041OpenapiJobInfoRespJobsJobResourcesNodesAllocationSocketsCoresStatus `json:"status"`
						} `json:"cores"`

						// Index Core index
						Index int32 `json:"index"`
					} `json:"sockets"`
				} `json:"allocation,omitempty"`

				// Count Number of allocated nodes
				Count *int32 `json:"count,omitempty"`

				// List Node(s) allocated to the job
				List *string `json:"list,omitempty"`

				// SelectType Node scheduling selection method
				SelectType *[]V0041OpenapiJobInfoRespJobsJobResourcesNodesSelectType `json:"select_type,omitempty"`

				// Whole Whether whole nodes were allocated
				Whole *bool `json:"whole,omitempty"`
			} `json:"nodes,omitempty"`

			// SelectType Scheduler consumable resource selection type
			SelectType []V0041OpenapiJobInfoRespJobsJobResourcesSelectType `json:"select_type"`

			// ThreadsPerCore Number of processor threads per CPU core
			ThreadsPerCore struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"threads_per_core"`
		} `json:"job_resources,omitempty"`

		// JobSizeStr Number of nodes (in a range) required for this job
		JobSizeStr *[]string `json:"job_size_str,omitempty"`

		// JobState Current state
		JobState *[]V0041OpenapiJobInfoRespJobsJobState `json:"job_state,omitempty"`

		// LastSchedEvaluation Last time job was evaluated for scheduling (UNIX timestamp)
		LastSchedEvaluation *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"last_sched_evaluation,omitempty"`

		// Licenses License(s) required by the job
		Licenses *string `json:"licenses,omitempty"`

		// MailType Mail event type(s)
		MailType *[]V0041OpenapiJobInfoRespJobsMailType `json:"mail_type,omitempty"`

		// MailUser User to receive email notifications
		MailUser *string `json:"mail_user,omitempty"`

		// MaxCpus Maximum number of CPUs usable by the job
		MaxCpus *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"max_cpus,omitempty"`

		// MaxNodes Maximum number of nodes usable by the job
		MaxNodes *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"max_nodes,omitempty"`

		// MaximumSwitchWaitTime Maximum time to wait for switches in seconds
		MaximumSwitchWaitTime *int32 `json:"maximum_switch_wait_time,omitempty"`

		// McsLabel Multi-Category Security label on the job
		McsLabel *string `json:"mcs_label,omitempty"`

		// MemoryPerCpu Minimum memory in megabytes per allocated CPU
		MemoryPerCpu *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"memory_per_cpu,omitempty"`

		// MemoryPerNode Minimum memory in megabytes per allocated node
		MemoryPerNode *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"memory_per_node,omitempty"`

		// MemoryPerTres Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)
		MemoryPerTres *string `json:"memory_per_tres,omitempty"`

		// MinimumCpusPerNode Minimum number of CPUs per node
		MinimumCpusPerNode *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"minimum_cpus_per_node,omitempty"`

		// MinimumSwitches Maximum number of switches (the 'minimum' in the key is incorrect)
		MinimumSwitches *int32 `json:"minimum_switches,omitempty"`

		// MinimumTmpDiskPerNode Minimum tmp disk space required per node
		MinimumTmpDiskPerNode *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"minimum_tmp_disk_per_node,omitempty"`

		// Name Job name
		Name *string `json:"name,omitempty"`

		// Network Network specs for the job
		Network *string `json:"network,omitempty"`

		// Nice Requested job priority change
		Nice *int32 `json:"nice,omitempty"`

		// NodeCount Minimum number of nodes required
		NodeCount *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"node_count,omitempty"`

		// Nodes Node(s) allocated to the job
		Nodes *string `json:"nodes,omitempty"`
		// Deprecated:
		Oversubscribe *bool `json:"oversubscribe,omitempty"`

		// Partition Partition assigned to the job
		Partition *string `json:"partition,omitempty"`
		Power     *struct {
			// Deprecated:
			Flags *[]interface{} `json:"flags,omitempty"`
		} `json:"power,omitempty"`

		// PreSusTime Total run time prior to last suspend in seconds
		PreSusTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"pre_sus_time,omitempty"`

		// PreemptTime Time job received preemption signal (UNIX timestamp)
		PreemptTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"preempt_time,omitempty"`

		// PreemptableTime Time job becomes eligible for preemption (UNIX timestamp)
		PreemptableTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"preemptable_time,omitempty"`

		// Prefer Feature(s) the job requested but that are not required
		Prefer *string `json:"prefer,omitempty"`

		// Priority Request specific job priority
		Priority *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"priority,omitempty"`

		// Profile Profile used by the acct_gather_profile plugin
		Profile *[]V0041OpenapiJobInfoRespJobsProfile `json:"profile,omitempty"`

		// Qos Quality of Service assigned to the job
		Qos *string `json:"qos,omitempty"`

		// Reboot Node reboot requested before start
		Reboot *bool `json:"reboot,omitempty"`

		// Requeue Determines whether the job may be requeued
		Requeue *bool `json:"requeue,omitempty"`

		// RequiredNodes Comma separated list of required nodes
		RequiredNodes *string `json:"required_nodes,omitempty"`

		// ResizeTime Time of last size change (UNIX timestamp)
		ResizeTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"resize_time,omitempty"`

		// RestartCnt Number of job restarts
		RestartCnt *int32 `json:"restart_cnt,omitempty"`

		// ResvName Name of reservation to use
		ResvName *string `json:"resv_name,omitempty"`

		// ScheduledNodes List of nodes scheduled to be used for the job
		ScheduledNodes *string `json:"scheduled_nodes,omitempty"`

		// SelinuxContext SELinux context
		SelinuxContext *string `json:"selinux_context,omitempty"`

		// Shared How the job can share resources with other jobs, if at all
		Shared *[]V0041OpenapiJobInfoRespJobsShared `json:"shared,omitempty"`

		// ShowFlags Job details shown in this response
		ShowFlags *[]V0041OpenapiJobInfoRespJobsShowFlags `json:"show_flags,omitempty"`

		// SocketsPerBoard Number of sockets per board required
		SocketsPerBoard *int32 `json:"sockets_per_board,omitempty"`

		// SocketsPerNode Number of sockets per node required
		SocketsPerNode *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"sockets_per_node,omitempty"`

		// StandardError Path to stderr file
		StandardError *string `json:"standard_error,omitempty"`

		// StandardInput Path to stdin file
		StandardInput *string `json:"standard_input,omitempty"`

		// StandardOutput Path to stdout file
		StandardOutput *string `json:"standard_output,omitempty"`

		// StartTime Time execution began, or is expected to begin (UNIX timestamp)
		StartTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"start_time,omitempty"`

		// StateDescription Optional details for state_reason
		StateDescription *string `json:"state_description,omitempty"`

		// StateReason Reason for current Pending or Failed state
		StateReason *string `json:"state_reason,omitempty"`

		// SubmitTime Time when the job was submitted (UNIX timestamp)
		SubmitTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"submit_time,omitempty"`

		// SuspendTime Time the job was last suspended or resumed (UNIX timestamp)
		SuspendTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"suspend_time,omitempty"`

		// SystemComment Arbitrary comment from slurmctld
		SystemComment *string `json:"system_comment,omitempty"`

		// Tasks Number of tasks
		Tasks *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"tasks,omitempty"`

		// TasksPerBoard Number of tasks invoked on each board
		TasksPerBoard *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"tasks_per_board,omitempty"`

		// TasksPerCore Number of tasks invoked on each core
		TasksPerCore *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"tasks_per_core,omitempty"`

		// TasksPerNode Number of tasks invoked on each node
		TasksPerNode *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"tasks_per_node,omitempty"`

		// TasksPerSocket Number of tasks invoked on each socket
		TasksPerSocket *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"tasks_per_socket,omitempty"`

		// TasksPerTres Number of tasks that can assess each GPU
		TasksPerTres *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"tasks_per_tres,omitempty"`

		// ThreadSpec Specialized thread count
		ThreadSpec *int32 `json:"thread_spec,omitempty"`

		// ThreadsPerCore Number of processor threads per CPU core required
		ThreadsPerCore *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"threads_per_core,omitempty"`

		// TimeLimit Maximum run time in minutes
		TimeLimit *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"time_limit,omitempty"`

		// TimeMinimum Minimum run time in minutes
		TimeMinimum *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"time_minimum,omitempty"`

		// TresAllocStr TRES used by the job
		TresAllocStr *string `json:"tres_alloc_str,omitempty"`

		// TresBind Task to TRES binding directives
		TresBind *string `json:"tres_bind,omitempty"`

		// TresFreq TRES frequency directives
		TresFreq *string `json:"tres_freq,omitempty"`

		// TresPerJob Comma separated list of TRES=# values to be allocated per job
		TresPerJob *string `json:"tres_per_job,omitempty"`

		// TresPerNode Comma separated list of TRES=# values to be allocated per node
		TresPerNode *string `json:"tres_per_node,omitempty"`

		// TresPerSocket Comma separated list of TRES=# values to be allocated per socket
		TresPerSocket *string `json:"tres_per_socket,omitempty"`

		// TresPerTask Comma separated list of TRES=# values to be allocated per task
		TresPerTask *string `json:"tres_per_task,omitempty"`

		// TresReqStr TRES requested by the job
		TresReqStr *string `json:"tres_req_str,omitempty"`

		// UserId User ID that owns the job
		UserId *int32 `json:"user_id,omitempty"`

		// UserName User name that owns the job
		UserName *string `json:"user_name,omitempty"`

		// Wckey Workload characterization key
		Wckey *string `json:"wckey,omitempty"`
	} `json:"jobs"`

	// LastBackfill Time of last backfill scheduler run (UNIX timestamp)
	LastBackfill struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int64 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"last_backfill"`

	// LastUpdate Time of last job change (UNIX timestamp)
	LastUpdate struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int64 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"last_update"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// V0041OpenapiJobInfoRespJobsDerivedExitCodeStatus defines model for V0041OpenapiJobInfoResp.Jobs.DerivedExitCode.Status.
type V0041OpenapiJobInfoRespJobsDerivedExitCodeStatus string

// V0041OpenapiJobInfoRespJobsExclusive defines model for V0041OpenapiJobInfoResp.Jobs.Exclusive.
type V0041OpenapiJobInfoRespJobsExclusive string

// V0041OpenapiJobInfoRespJobsExitCodeStatus defines model for V0041OpenapiJobInfoResp.Jobs.ExitCode.Status.
type V0041OpenapiJobInfoRespJobsExitCodeStatus string

// V0041OpenapiJobInfoRespJobsFlags defines model for V0041OpenapiJobInfoResp.Jobs.Flags.
type V0041OpenapiJobInfoRespJobsFlags string

// V0041OpenapiJobInfoRespJobsJobResourcesNodesAllocationSocketsCoresStatus defines model for V0041OpenapiJobInfoResp.Jobs.JobResources.Nodes.Allocation.Sockets.Cores.Status.
type V0041OpenapiJobInfoRespJobsJobResourcesNodesAllocationSocketsCoresStatus string

// V0041OpenapiJobInfoRespJobsJobResourcesNodesSelectType defines model for V0041OpenapiJobInfoResp.Jobs.JobResources.Nodes.SelectType.
type V0041OpenapiJobInfoRespJobsJobResourcesNodesSelectType string

// V0041OpenapiJobInfoRespJobsJobResourcesSelectType defines model for V0041OpenapiJobInfoResp.Jobs.JobResources.SelectType.
type V0041OpenapiJobInfoRespJobsJobResourcesSelectType string

// V0041OpenapiJobInfoRespJobsJobState defines model for V0041OpenapiJobInfoResp.Jobs.JobState.
type V0041OpenapiJobInfoRespJobsJobState string

// V0041OpenapiJobInfoRespJobsMailType defines model for V0041OpenapiJobInfoResp.Jobs.MailType.
type V0041OpenapiJobInfoRespJobsMailType string

// V0041OpenapiJobInfoRespJobsProfile defines model for V0041OpenapiJobInfoResp.Jobs.Profile.
type V0041OpenapiJobInfoRespJobsProfile string

// V0041OpenapiJobInfoRespJobsShared defines model for V0041OpenapiJobInfoResp.Jobs.Shared.
type V0041OpenapiJobInfoRespJobsShared string

// V0041OpenapiJobInfoRespJobsShowFlags defines model for V0041OpenapiJobInfoResp.Jobs.ShowFlags.
type V0041OpenapiJobInfoRespJobsShowFlags string

// V0041OpenapiNodesResp defines model for v0.0.41_openapi_nodes_resp.
type V0041OpenapiNodesResp struct {
	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// LastUpdate Time of last node change (UNIX timestamp)
	LastUpdate struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int64 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"last_update"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Nodes List of nodes
	Nodes []struct {
		// ActiveFeatures Currently active features
		ActiveFeatures *[]string `json:"active_features,omitempty"`

		// Address NodeAddr, used to establish a communication path
		Address *string `json:"address,omitempty"`

		// AllocCpus Total number of CPUs currently allocated for jobs
		AllocCpus *int32 `json:"alloc_cpus,omitempty"`

		// AllocIdleCpus Total number of idle CPUs
		AllocIdleCpus *int32 `json:"alloc_idle_cpus,omitempty"`

		// AllocMemory Total memory in MB currently allocated for jobs
		AllocMemory *int64 `json:"alloc_memory,omitempty"`

		// Architecture Computer architecture
		Architecture *string `json:"architecture,omitempty"`

		// Boards Number of Baseboards in nodes with a baseboard controller
		Boards *int32 `json:"boards,omitempty"`

		// BootTime Time when the node booted (UNIX timestamp)
		BootTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"boot_time,omitempty"`

		// BurstbufferNetworkAddress Alternate network path to be used for sbcast network traffic
		BurstbufferNetworkAddress *string `json:"burstbuffer_network_address,omitempty"`

		// ClusterName Cluster name (only set in federated environments)
		ClusterName *string `json:"cluster_name,omitempty"`

		// Comment Arbitrary comment
		Comment *string `json:"comment,omitempty"`

		// Cores Number of cores in a single physical processor socket
		Cores *int32 `json:"cores,omitempty"`

		// CpuBinding Default method for binding tasks to allocated CPUs
		CpuBinding *int32 `json:"cpu_binding,omitempty"`

		// CpuLoad CPU load as reported by the OS
		CpuLoad *int32 `json:"cpu_load,omitempty"`

		// Cpus Total CPUs, including cores and threads
		Cpus *int32 `json:"cpus,omitempty"`

		// EffectiveCpus Number of effective CPUs (excluding specialized CPUs)
		EffectiveCpus *int32 `json:"effective_cpus,omitempty"`

		// Energy Energy usage data
		Energy *struct {
			// AverageWatts Average power consumption, in watts
			AverageWatts *int32 `json:"average_watts,omitempty"`

			// BaseConsumedEnergy The energy consumed between when the node was powered on and the last time it was registered by slurmd, in joules
			BaseConsumedEnergy *int64 `json:"base_consumed_energy,omitempty"`

			// ConsumedEnergy The energy consumed between the last time the node was registered by the slurmd daemon and the last node energy accounting sample, in joules
			ConsumedEnergy *int64 `json:"consumed_energy,omitempty"`

			// CurrentWatts The instantaneous power consumption at the time of the last node energy accounting sample, in watts
			CurrentWatts *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"current_watts,omitempty"`

			// LastCollected Time when energy data was last retrieved (UNIX timestamp)
			LastCollected *int64 `json:"last_collected,omitempty"`

			// PreviousConsumedEnergy Previous value of consumed_energy
			PreviousConsumedEnergy *int64 `json:"previous_consumed_energy,omitempty"`
		} `json:"energy,omitempty"`
		// Deprecated:
		ExternalSensors *map[string]interface{} `json:"external_sensors,omitempty"`

		// Extra Arbitrary string used for node filtering if extra constraints are enabled
		Extra *string `json:"extra,omitempty"`

		// Features Available features
		Features *[]string `json:"features,omitempty"`

		// FreeMem Total memory in MB currently free as reported by the OS
		FreeMem *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"free_mem,omitempty"`

		// GpuSpec CPU cores reserved for jobs that also use a GPU
		GpuSpec *string `json:"gpu_spec,omitempty"`

		// Gres Generic resources
		Gres *string `json:"gres,omitempty"`

		// GresDrained Drained generic resources
		GresDrained *string `json:"gres_drained,omitempty"`

		// GresUsed Generic resources currently in use
		GresUsed *string `json:"gres_used,omitempty"`

		// Hostname NodeHostname
		Hostname *string `json:"hostname,omitempty"`

		// InstanceId Cloud instance ID
		InstanceId *string `json:"instance_id,omitempty"`

		// InstanceType Cloud instance type
		InstanceType *string `json:"instance_type,omitempty"`

		// LastBusy Time when the node was last busy (UNIX timestamp)
		LastBusy *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"last_busy,omitempty"`

		// McsLabel Multi-Category Security label
		McsLabel *string `json:"mcs_label,omitempty"`

		// Name NodeName
		Name *string `json:"name,omitempty"`

		// NextStateAfterReboot The state the node will be assigned after rebooting
		NextStateAfterReboot *[]V0041OpenapiNodesRespNodesNextStateAfterReboot `json:"next_state_after_reboot,omitempty"`

		// OperatingSystem Operating system reported by the node
		OperatingSystem *string `json:"operating_system,omitempty"`

		// Owner User allowed to run jobs on this node (unset if no restriction)
		Owner *string `json:"owner,omitempty"`

		// Partitions Partitions containing this node
		Partitions *[]string `json:"partitions,omitempty"`

		// Port TCP port number of the slurmd
		Port *int32 `json:"port,omitempty"`
		// Deprecated:
		Power *map[string]interface{} `json:"power,omitempty"`

		// RealMemory Total memory in MB on the node
		RealMemory *int64 `json:"real_memory,omitempty"`

		// Reason Describes why the node is in a "DOWN", "DRAINED", "DRAINING", "FAILING" or "FAIL" state
		Reason *string `json:"reason,omitempty"`

		// ReasonChangedAt When the reason changed (UNIX timestamp)
		ReasonChangedAt *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"reason_changed_at,omitempty"`

		// ReasonSetByUser User who set the reason
		ReasonSetByUser *string `json:"reason_set_by_user,omitempty"`

		// ResCoresPerGpu Number of CPU cores per GPU restricted to GPU jobs
		ResCoresPerGpu *int32 `json:"res_cores_per_gpu,omitempty"`

		// Reservation Name of reservation containing this node
		Reservation *string `json:"reservation,omitempty"`

		// ResumeAfter Number of seconds after the node's state is updated to "DOWN" or "DRAIN" before scheduling a node state resume
		ResumeAfter *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"resume_after,omitempty"`

		// SlurmdStartTime Time when the slurmd started (UNIX timestamp)
		SlurmdStartTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"slurmd_start_time,omitempty"`

		// Sockets Number of physical processor sockets/chips on the node
		Sockets *int32 `json:"sockets,omitempty"`

		// SpecializedCores Number of cores reserved for system use
		SpecializedCores *int32 `json:"specialized_cores,omitempty"`

		// SpecializedCpus Abstract CPU IDs on this node reserved for exclusive use by slurmd and slurmstepd
		SpecializedCpus *string `json:"specialized_cpus,omitempty"`

		// SpecializedMemory Combined memory limit, in MB, for Slurm compute node daemons
		SpecializedMemory *int64 `json:"specialized_memory,omitempty"`

		// State Node state(s) applicable to this node
		State *[]V0041OpenapiNodesRespNodesState `json:"state,omitempty"`

		// TemporaryDisk Total size in MB of temporary disk storage in TmpFS
		TemporaryDisk *int32 `json:"temporary_disk,omitempty"`

		// Threads Number of logical threads in a single physical core
		Threads *int32 `json:"threads,omitempty"`

		// Tres Configured trackable resources
		Tres *string `json:"tres,omitempty"`

		// TresUsed Trackable resources currently allocated for jobs
		TresUsed *string `json:"tres_used,omitempty"`

		// TresWeighted Weighted number of billable trackable resources allocated
		TresWeighted *float64 `json:"tres_weighted,omitempty"`

		// Version Slurmd version
		Version *string `json:"version,omitempty"`

		// Weight Weight of the node for scheduling purposes
		Weight *int32 `json:"weight,omitempty"`
	} `json:"nodes"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// V0041OpenapiNodesRespNodesNextStateAfterReboot defines model for V0041OpenapiNodesResp.Nodes.NextStateAfterReboot.
type V0041OpenapiNodesRespNodesNextStateAfterReboot string

// V0041OpenapiNodesRespNodesState defines model for V0041OpenapiNodesResp.Nodes.State.
type V0041OpenapiNodesRespNodesState string

// V0041OpenapiPartitionResp defines model for v0.0.41_openapi_partition_resp.
type V0041OpenapiPartitionResp struct {
	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// LastUpdate Time of last partition change (UNIX timestamp)
	LastUpdate struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int64 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"last_update"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Partitions List of partitions
	Partitions []struct {
		Accounts *struct {
			// Allowed AllowAccounts
			Allowed *string `json:"allowed,omitempty"`

			// Deny DenyAccounts
			Deny *string `json:"deny,omitempty"`
		} `json:"accounts,omitempty"`

		// Alternate Alternate
		Alternate *string `json:"alternate,omitempty"`

		// Cluster Cluster name
		Cluster *string `json:"cluster,omitempty"`
		Cpus    *struct {
			// TaskBinding CpuBind
			TaskBinding *int32 `json:"task_binding,omitempty"`

			// Total TotalCPUs
			Total *int32 `json:"total,omitempty"`
		} `json:"cpus,omitempty"`
		Defaults *struct {
			// Job JobDefaults
			Job *string `json:"job,omitempty"`

			// MemoryPerCpu DefMemPerCPU or DefMemPerNode
			MemoryPerCpu *int64 `json:"memory_per_cpu,omitempty"`

			// PartitionMemoryPerCpu DefMemPerCPU
			PartitionMemoryPerCpu *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"partition_memory_per_cpu,omitempty"`

			// PartitionMemoryPerNode DefMemPerNode
			PartitionMemoryPerNode *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"partition_memory_per_node,omitempty"`

			// Time DefaultTime in minutes
			Time *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"time,omitempty"`
		} `json:"defaults,omitempty"`

		// GraceTime GraceTime
		GraceTime *int32 `json:"grace_time,omitempty"`
		Groups    *struct {
			// Allowed AllowGroups
			Allowed *string `json:"allowed,omitempty"`
		} `json:"groups,omitempty"`
		Maximums *struct {
			// CpusPerNode MaxCPUsPerNode
			CpusPerNode *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"cpus_per_node,omitempty"`

			// CpusPerSocket MaxCPUsPerSocket
			CpusPerSocket *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"cpus_per_socket,omitempty"`

			// MemoryPerCpu MaxMemPerCPU or MaxMemPerNode
			MemoryPerCpu *int64 `json:"memory_per_cpu,omitempty"`

			// Nodes MaxNodes
			Nodes *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"nodes,omitempty"`

			// OverTimeLimit OverTimeLimit
			OverTimeLimit *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"over_time_limit,omitempty"`
			Oversubscribe *struct {
				// Flags Flags applicable to the OverSubscribe setting
				Flags *[]V0041OpenapiPartitionRespPartitionsMaximumsOversubscribeFlags `json:"flags,omitempty"`

				// Jobs Maximum number of jobs allowed to oversubscribe resources
				Jobs *int32 `json:"jobs,omitempty"`
			} `json:"oversubscribe,omitempty"`

			// PartitionMemoryPerCpu MaxMemPerCPU
			PartitionMemoryPerCpu *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"partition_memory_per_cpu,omitempty"`

			// PartitionMemoryPerNode MaxMemPerNode
			PartitionMemoryPerNode *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"partition_memory_per_node,omitempty"`

			// Shares OverSubscribe
			Shares *int32 `json:"shares,omitempty"`

			// Time MaxTime
			Time *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"time,omitempty"`
		} `json:"maximums,omitempty"`
		Minimums *struct {
			// Nodes MinNodes
			Nodes *int32 `json:"nodes,omitempty"`
		} `json:"minimums,omitempty"`

		// Name PartitionName
		Name *string `json:"name,omitempty"`

		// NodeSets NodeSets
		NodeSets *string `json:"node_sets,omitempty"`
		Nodes    *struct {
			// AllowedAllocation AllocNodes
			AllowedAllocation *string `json:"allowed_allocation,omitempty"`

			// Configured Nodes
			Configured *string `json:"configured,omitempty"`

			// Total TotalNodes
			Total *int32 `json:"total,omitempty"`
		} `json:"nodes,omitempty"`
		Partition *struct {
			// State Current state(s)
			State *[]V0041OpenapiPartitionRespPartitionsPartitionState `json:"state,omitempty"`
		} `json:"partition,omitempty"`
		Priority *struct {
			// JobFactor PriorityJobFactor
			JobFactor *int32 `json:"job_factor,omitempty"`

			// Tier PriorityTier
			Tier *int32 `json:"tier,omitempty"`
		} `json:"priority,omitempty"`
		Qos *struct {
			// Allowed AllowQOS
			Allowed *string `json:"allowed,omitempty"`

			// Assigned QOS
			Assigned *string `json:"assigned,omitempty"`

			// Deny DenyQOS
			Deny *string `json:"deny,omitempty"`
		} `json:"qos,omitempty"`

		// SelectType Scheduler consumable resource selection type
		SelectType *[]V0041OpenapiPartitionRespPartitionsSelectType `json:"select_type,omitempty"`

		// SuspendTime SuspendTime (GLOBAL if both set and infinite are false)
		SuspendTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"suspend_time,omitempty"`
		Timeouts *struct {
			// Resume ResumeTimeout (GLOBAL if both set and infinite are false)
			Resume *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"resume,omitempty"`

			// Suspend SuspendTimeout (GLOBAL if both set and infinite are false)
			Suspend *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"suspend,omitempty"`
		} `json:"timeouts,omitempty"`
		Tres *struct {
			// BillingWeights TRESBillingWeights
			BillingWeights *string `json:"billing_weights,omitempty"`

			// Configured TRES
			Configured *string `json:"configured,omitempty"`
		} `json:"tres,omitempty"`
	} `json:"partitions"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// V0041OpenapiPartitionRespPartitionsMaximumsOversubscribeFlags defines model for V0041OpenapiPartitionResp.Partitions.Maximums.Oversubscribe.Flags.
type V0041OpenapiPartitionRespPartitionsMaximumsOversubscribeFlags string

// V0041OpenapiPartitionRespPartitionsPartitionState defines model for V0041OpenapiPartitionResp.Partitions.Partition.State.
type V0041OpenapiPartitionRespPartitionsPartitionState string

// V0041OpenapiPartitionRespPartitionsSelectType defines model for V0041OpenapiPartitionResp.Partitions.SelectType.
type V0041OpenapiPartitionRespPartitionsSelectType string

// V0041OpenapiReservationResp defines model for v0.0.41_openapi_reservation_resp.
type V0041OpenapiReservationResp struct {
	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// LastUpdate Time of last reservation change (UNIX timestamp)
	LastUpdate struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int64 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"last_update"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Reservations List of reservations
	Reservations []struct {
		// Accounts Comma separated list of permitted accounts
		Accounts *string `json:"accounts,omitempty"`

		// BurstBuffer BurstBuffer
		BurstBuffer *string `json:"burst_buffer,omitempty"`

		// CoreCount CoreCnt
		CoreCount *int32 `json:"core_count,omitempty"`

		// CoreSpecializations Reserved cores specification
		CoreSpecializations *[]struct {
			// Core IDs of reserved cores
			Core *string `json:"core,omitempty"`

			// Node Name of reserved node
			Node *string `json:"node,omitempty"`
		} `json:"core_specializations,omitempty"`

		// EndTime EndTime (UNIX timestamp)
		EndTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"end_time,omitempty"`

		// Features Features
		Features *string `json:"features,omitempty"`

		// Flags Flags associated with the reservation
		Flags *[]V0041OpenapiReservationRespReservationsFlags `json:"flags,omitempty"`

		// Groups Groups
		Groups *string `json:"groups,omitempty"`

		// Licenses Licenses
		Licenses *string `json:"licenses,omitempty"`

		// MaxStartDelay MaxStartDelay in seconds
		MaxStartDelay *int32 `json:"max_start_delay,omitempty"`

		// Name ReservationName
		Name *string `json:"name,omitempty"`

		// NodeCount NodeCnt
		NodeCount *int32 `json:"node_count,omitempty"`

		// NodeList Nodes
		NodeList *string `json:"node_list,omitempty"`

		// Partition PartitionName
		Partition      *string `json:"partition,omitempty"`
		PurgeCompleted *struct {
			// Time If PURGE_COMP flag is set, the number of seconds this reservation will sit idle until it is revoked
			Time *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"time,omitempty"`
		} `json:"purge_completed,omitempty"`

		// StartTime StartTime (UNIX timestamp)
		StartTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"start_time,omitempty"`

		// Tres Comma separated list of required TRES
		Tres *string `json:"tres,omitempty"`

		// Users Comma separated list of permitted users
		Users *string `json:"users,omitempty"`

		// Watts 32 bit integer number with flags
		// Deprecated:
		Watts *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"watts,omitempty"`
	} `json:"reservations"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// V0041OpenapiReservationRespReservationsFlags defines model for V0041OpenapiReservationResp.Reservations.Flags.
type V0041OpenapiReservationRespReservationsFlags string

// V0041OpenapiResp defines model for v0.0.41_openapi_resp.
type V0041OpenapiResp struct {
	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// V0041OpenapiSlurmdbdConfigResp defines model for v0.0.41_openapi_slurmdbd_config_resp.
type V0041OpenapiSlurmdbdConfigResp struct {
	// Accounts Accounts
	Accounts *[]struct {
		// Associations Associations involving this account (only populated if requested)
		Associations *[]struct {
			// Account Account
			Account *string `json:"account,omitempty"`

			// Cluster Cluster
			Cluster *string `json:"cluster,omitempty"`

			// Id Numeric association ID
			Id *int32 `json:"id,omitempty"`

			// Partition Partition
			Partition *string `json:"partition,omitempty"`

			// User User name
			User string `json:"user"`
		} `json:"associations,omitempty"`

		// Coordinators List of users that are a coordinator of this account (only populated if requested)
		Coordinators *[]struct {
			// Direct Indicates whether the coordinator was directly assigned to this account
			Direct *bool `json:"direct,omitempty"`

			// Name User name
			Name string `json:"name"`
		} `json:"coordinators,omitempty"`

		// Description Arbitrary string describing the account
		Description string `json:"description"`

		// Flags Flags associated with the account
		Flags *[]V0041OpenapiSlurmdbdConfigRespAccountsFlags `json:"flags,omitempty"`

		// Name Account name
		Name string `json:"name"`

		// Organization Organization to which the account belongs
		Organization string `json:"organization"`
	} `json:"accounts,omitempty"`

	// Associations Associations
	Associations *[]struct {
		// Account Account
		Account *string `json:"account,omitempty"`

		// Accounting Accounting records containing related resource usage
		Accounting *[]struct {
			// TRES Trackable resources
			TRES *struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"TRES,omitempty"`
			Allocated *struct {
				// Seconds Number of cpu seconds allocated
				Seconds *int64 `json:"seconds,omitempty"`
			} `json:"allocated,omitempty"`

			// Id Association ID or Workload characterization key ID
			Id *int32 `json:"id,omitempty"`

			// Start When the record was started
			Start *int64 `json:"start,omitempty"`
		} `json:"accounting,omitempty"`

		// Cluster Cluster name
		Cluster *string `json:"cluster,omitempty"`

		// Comment Arbitrary comment
		Comment *string `json:"comment,omitempty"`
		Default *struct {
			// Qos Default QOS
			Qos *string `json:"qos,omitempty"`
		} `json:"default,omitempty"`

		// Flags Flags on the association
		Flags *[]V0041OpenapiSlurmdbdConfigRespAssociationsFlags `json:"flags,omitempty"`

		// Id Unique ID
		Id *int32 `json:"id,omitempty"`

		// IsDefault Is default association for user
		IsDefault *bool `json:"is_default,omitempty"`

		// Lineage Complete path up the hierarchy to the root association
		Lineage *string `json:"lineage,omitempty"`
		Max     *struct {
			Jobs *struct {
				// Accruing MaxJobsAccrue
				Accruing *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int32 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"accruing,omitempty"`

				// Active MaxJobs
				Active *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int32 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"active,omitempty"`
				Per *struct {
					// Accruing GrpJobsAccrue
					Accruing *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"accruing,omitempty"`

					// Count GrpJobs
					Count *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"count,omitempty"`

					// Submitted GrpSubmitJobs
					Submitted *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"submitted,omitempty"`

					// WallClock MaxWallDurationPerJob
					WallClock *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"wall_clock,omitempty"`
				} `json:"per,omitempty"`

				// Total MaxSubmitJobs
				Total *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int32 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"total,omitempty"`
			} `json:"jobs,omitempty"`
			Per *struct {
				Account *struct {
					// WallClock GrpWall
					WallClock *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"wall_clock,omitempty"`
				} `json:"account,omitempty"`
			} `json:"per,omitempty"`
			Tres *struct {
				Group *struct {
					// Active GrpTRESRunMins
					Active *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"active,omitempty"`

					// Minutes GrpTRESMins
					Minutes *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"minutes,omitempty"`
				} `json:"group,omitempty"`
				Minutes *struct {
					Per *struct {
						// Job MaxTRESMinsPerJob
						Job *[]struct {
							// Count TRES count (0 if listed generically)
							Count *int64 `json:"count,omitempty"`

							// Id ID used in database
							Id *int32 `json:"id,omitempty"`

							// Name TRES name (if applicable)
							Name *string `json:"name,omitempty"`

							// Type TRES type (CPU, MEM, etc)
							Type string `json:"type"`
						} `json:"job,omitempty"`
					} `json:"per,omitempty"`

					// Total MaxTRESMinsPerJob
					Total *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"total,omitempty"`
				} `json:"minutes,omitempty"`
				Per *struct {
					// Job MaxTRESPerJob
					Job *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"job,omitempty"`

					// Node MaxTRESPerNode
					Node *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"node,omitempty"`
				} `json:"per,omitempty"`

				// Total GrpTRES
				Total *[]struct {
					// Count TRES count (0 if listed generically)
					Count *int64 `json:"count,omitempty"`

					// Id ID used in database
					Id *int32 `json:"id,omitempty"`

					// Name TRES name (if applicable)
					Name *string `json:"name,omitempty"`

					// Type TRES type (CPU, MEM, etc)
					Type string `json:"type"`
				} `json:"total,omitempty"`
			} `json:"tres,omitempty"`
		} `json:"max,omitempty"`
		Min *struct {
			// PriorityThreshold MinPrioThreshold
			PriorityThreshold *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"priority_threshold,omitempty"`
		} `json:"min,omitempty"`

		// ParentAccount Name of parent account
		ParentAccount *string `json:"parent_account,omitempty"`

		// Partition Partition name
		Partition *string `json:"partition,omitempty"`

		// Priority Association priority factor
		Priority *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"priority,omitempty"`

		// Qos List of available QOS names
		Qos *[]string `json:"qos,omitempty"`

		// SharesRaw Allocated shares used for fairshare calculation
		SharesRaw *int32 `json:"shares_raw,omitempty"`

		// User User name
		User string `json:"user"`
	} `json:"associations,omitempty"`

	// Clusters Clusters
	Clusters *[]struct {
		Associations *struct {
			// Root Root association information
			Root *struct {
				// Account Account
				Account *string `json:"account,omitempty"`

				// Cluster Cluster
				Cluster *string `json:"cluster,omitempty"`

				// Id Numeric association ID
				Id *int32 `json:"id,omitempty"`

				// Partition Partition
				Partition *string `json:"partition,omitempty"`

				// User User name
				User string `json:"user"`
			} `json:"root,omitempty"`
		} `json:"associations,omitempty"`
		Controller *struct {
			// Host ControlHost
			Host *string `json:"host,omitempty"`

			// Port ControlPort
			Port *int32 `json:"port,omitempty"`
		} `json:"controller,omitempty"`

		// Flags Flags
		Flags *[]V0041OpenapiSlurmdbdConfigRespClustersFlags `json:"flags,omitempty"`

		// Name ClusterName
		Name *string `json:"name,omitempty"`

		// Nodes Node names
		Nodes *string `json:"nodes,omitempty"`

		// RpcVersion RPC version used in the cluster
		RpcVersion *int32 `json:"rpc_version,omitempty"`
		// Deprecated:
		SelectPlugin *string `json:"select_plugin,omitempty"`

		// Tres Trackable resources
		Tres *[]struct {
			// Count TRES count (0 if listed generically)
			Count *int64 `json:"count,omitempty"`

			// Id ID used in database
			Id *int32 `json:"id,omitempty"`

			// Name TRES name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type TRES type (CPU, MEM, etc)
			Type string `json:"type"`
		} `json:"tres,omitempty"`
	} `json:"clusters,omitempty"`

	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Instances Instances
	Instances *[]struct {
		// Cluster Cluster name
		Cluster *string `json:"cluster,omitempty"`

		// Extra Arbitrary string used for node filtering if extra constraints are enabled
		Extra *string `json:"extra,omitempty"`

		// InstanceId Cloud instance ID
		InstanceId *string `json:"instance_id,omitempty"`

		// InstanceType Cloud instance type
		InstanceType *string `json:"instance_type,omitempty"`

		// NodeName NodeName
		NodeName *string `json:"node_name,omitempty"`
		Time     *struct {
			// TimeEnd When the instance will end (UNIX timestamp)
			TimeEnd *int64 `json:"time_end,omitempty"`

			// TimeStart When the instance will start (UNIX timestamp)
			TimeStart *int64 `json:"time_start,omitempty"`
		} `json:"time,omitempty"`
	} `json:"instances,omitempty"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Qos QOS
	Qos *[]struct {
		// Description Arbitrary description
		Description *string `json:"description,omitempty"`

		// Flags Flags, to avoid modifying current values specify NOT_SET
		Flags *[]V0041OpenapiSlurmdbdConfigRespQosFlags `json:"flags,omitempty"`

		// Id Unique ID
		Id     *int32 `json:"id,omitempty"`
		Limits *struct {
			// Factor LimitFactor
			Factor *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *float64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"factor,omitempty"`

			// GraceTime GraceTime
			GraceTime *int32 `json:"grace_time,omitempty"`
			Max       *struct {
				Accruing *struct {
					Per *struct {
						// Account MaxJobsAccruePerAccount
						Account *struct {
							// Infinite True if number has been set to infinite; "set" and "number" will be ignored
							Infinite *bool `json:"infinite,omitempty"`

							// Number If "set" is True the number will be set with value; otherwise ignore number contents
							Number *int32 `json:"number,omitempty"`

							// Set True if number has been set; False if number is unset
							Set *bool `json:"set,omitempty"`
						} `json:"account,omitempty"`

						// User MaxJobsAccruePerUser
						User *struct {
							// Infinite True if number has been set to infinite; "set" and "number" will be ignored
							Infinite *bool `json:"infinite,omitempty"`

							// Number If "set" is True the number will be set with value; otherwise ignore number contents
							Number *int32 `json:"number,omitempty"`

							// Set True if number has been set; False if number is unset
							Set *bool `json:"set,omitempty"`
						} `json:"user,omitempty"`
					} `json:"per,omitempty"`
				} `json:"accruing,omitempty"`
				ActiveJobs *struct {
					// Accruing GrpJobsAccrue
					Accruing *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"accruing,omitempty"`

					// Count GrpJobs
					Count *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"count,omitempty"`
				} `json:"active_jobs,omitempty"`
				Jobs *struct {
					ActiveJobs *struct {
						Per *struct {
							// Account MaxJobsPerAccount
							Account *struct {
								// Infinite True if number has been set to infinite; "set" and "number" will be ignored
								Infinite *bool `json:"infinite,omitempty"`

								// Number If "set" is True the number will be set with value; otherwise ignore number contents
								Number *int32 `json:"number,omitempty"`

								// Set True if number has been set; False if number is unset
								Set *bool `json:"set,omitempty"`
							} `json:"account,omitempty"`

							// User MaxJobsPerUser
							User *struct {
								// Infinite True if number has been set to infinite; "set" and "number" will be ignored
								Infinite *bool `json:"infinite,omitempty"`

								// Number If "set" is True the number will be set with value; otherwise ignore number contents
								Number *int32 `json:"number,omitempty"`

								// Set True if number has been set; False if number is unset
								Set *bool `json:"set,omitempty"`
							} `json:"user,omitempty"`
						} `json:"per,omitempty"`
					} `json:"active_jobs,omitempty"`
					Per *struct {
						// Account MaxSubmitJobsPerAccount
						Account *struct {
							// Infinite True if number has been set to infinite; "set" and "number" will be ignored
							Infinite *bool `json:"infinite,omitempty"`

							// Number If "set" is True the number will be set with value; otherwise ignore number contents
							Number *int32 `json:"number,omitempty"`

							// Set True if number has been set; False if number is unset
							Set *bool `json:"set,omitempty"`
						} `json:"account,omitempty"`

						// User MaxSubmitJobsPerUser
						User *struct {
							// Infinite True if number has been set to infinite; "set" and "number" will be ignored
							Infinite *bool `json:"infinite,omitempty"`

							// Number If "set" is True the number will be set with value; otherwise ignore number contents
							Number *int32 `json:"number,omitempty"`

							// Set True if number has been set; False if number is unset
							Set *bool `json:"set,omitempty"`
						} `json:"user,omitempty"`
					} `json:"per,omitempty"`
				} `json:"jobs,omitempty"`
				Tres *struct {
					Minutes *struct {
						Per *struct {
							// Account MaxTRESRunMinsPerAccount
							Account *[]struct {
								// Count TRES count (0 if listed generically)
								Count *int64 `json:"count,omitempty"`

								// Id ID used in database
								Id *int32 `json:"id,omitempty"`

								// Name TRES name (if applicable)
								Name *string `json:"name,omitempty"`

								// Type TRES type (CPU, MEM, etc)
								Type string `json:"type"`
							} `json:"account,omitempty"`

							// Job MaxTRESMinsPerJob
							Job *[]struct {
								// Count TRES count (0 if listed generically)
								Count *int64 `json:"count,omitempty"`

								// Id ID used in database
								Id *int32 `json:"id,omitempty"`

								// Name TRES name (if applicable)
								Name *string `json:"name,omitempty"`

								// Type TRES type (CPU, MEM, etc)
								Type string `json:"type"`
							} `json:"job,omitempty"`

							// Qos GrpTRESRunMins
							Qos *[]struct {
								// Count TRES count (0 if listed generically)
								Count *int64 `json:"count,omitempty"`

								// Id ID used in database
								Id *int32 `json:"id,omitempty"`

								// Name TRES name (if applicable)
								Name *string `json:"name,omitempty"`

								// Type TRES type (CPU, MEM, etc)
								Type string `json:"type"`
							} `json:"qos,omitempty"`

							// User MaxTRESRunMinsPerUser
							User *[]struct {
								// Count TRES count (0 if listed generically)
								Count *int64 `json:"count,omitempty"`

								// Id ID used in database
								Id *int32 `json:"id,omitempty"`

								// Name TRES name (if applicable)
								Name *string `json:"name,omitempty"`

								// Type TRES type (CPU, MEM, etc)
								Type string `json:"type"`
							} `json:"user,omitempty"`
						} `json:"per,omitempty"`
					} `json:"minutes,omitempty"`
					Per *struct {
						// Account MaxTRESPerAccount
						Account *[]struct {
							// Count TRES count (0 if listed generically)
							Count *int64 `json:"count,omitempty"`

							// Id ID used in database
							Id *int32 `json:"id,omitempty"`

							// Name TRES name (if applicable)
							Name *string `json:"name,omitempty"`

							// Type TRES type (CPU, MEM, etc)
							Type string `json:"type"`
						} `json:"account,omitempty"`

						// Job MaxTRESPerJob
						Job *[]struct {
							// Count TRES count (0 if listed generically)
							Count *int64 `json:"count,omitempty"`

							// Id ID used in database
							Id *int32 `json:"id,omitempty"`

							// Name TRES name (if applicable)
							Name *string `json:"name,omitempty"`

							// Type TRES type (CPU, MEM, etc)
							Type string `json:"type"`
						} `json:"job,omitempty"`

						// Node MaxTRESPerNode
						Node *[]struct {
							// Count TRES count (0 if listed generically)
							Count *int64 `json:"count,omitempty"`

							// Id ID used in database
							Id *int32 `json:"id,omitempty"`

							// Name TRES name (if applicable)
							Name *string `json:"name,omitempty"`

							// Type TRES type (CPU, MEM, etc)
							Type string `json:"type"`
						} `json:"node,omitempty"`

						// User MaxTRESPerUser
						User *[]struct {
							// Count TRES count (0 if listed generically)
							Count *int64 `json:"count,omitempty"`

							// Id ID used in database
							Id *int32 `json:"id,omitempty"`

							// Name TRES name (if applicable)
							Name *string `json:"name,omitempty"`

							// Type TRES type (CPU, MEM, etc)
							Type string `json:"type"`
						} `json:"user,omitempty"`
					} `json:"per,omitempty"`

					// Total GrpTRES
					Total *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"total,omitempty"`
				} `json:"tres,omitempty"`
				WallClock *struct {
					Per *struct {
						// Job MaxWallDurationPerJob
						Job *struct {
							// Infinite True if number has been set to infinite; "set" and "number" will be ignored
							Infinite *bool `json:"infinite,omitempty"`

							// Number If "set" is True the number will be set with value; otherwise ignore number contents
							Number *int32 `json:"number,omitempty"`

							// Set True if number has been set; False if number is unset
							Set *bool `json:"set,omitempty"`
						} `json:"job,omitempty"`

						// Qos GrpWall
						Qos *struct {
							// Infinite True if number has been set to infinite; "set" and "number" will be ignored
							Infinite *bool `json:"infinite,omitempty"`

							// Number If "set" is True the number will be set with value; otherwise ignore number contents
							Number *int32 `json:"number,omitempty"`

							// Set True if number has been set; False if number is unset
							Set *bool `json:"set,omitempty"`
						} `json:"qos,omitempty"`
					} `json:"per,omitempty"`
				} `json:"wall_clock,omitempty"`
			} `json:"max,omitempty"`
			Min *struct {
				// PriorityThreshold MinPrioThreshold
				PriorityThreshold *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int32 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"priority_threshold,omitempty"`
				Tres *struct {
					Per *struct {
						// Job MinTRES
						Job *[]struct {
							// Count TRES count (0 if listed generically)
							Count *int64 `json:"count,omitempty"`

							// Id ID used in database
							Id *int32 `json:"id,omitempty"`

							// Name TRES name (if applicable)
							Name *string `json:"name,omitempty"`

							// Type TRES type (CPU, MEM, etc)
							Type string `json:"type"`
						} `json:"job,omitempty"`
					} `json:"per,omitempty"`
				} `json:"tres,omitempty"`
			} `json:"min,omitempty"`
		} `json:"limits,omitempty"`

		// Name Name
		Name    *string `json:"name,omitempty"`
		Preempt *struct {
			// ExemptTime PreemptExemptTime
			ExemptTime *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"exempt_time,omitempty"`

			// List Other QOS's this QOS can preempt
			List *[]string `json:"list,omitempty"`

			// Mode PreemptMode
			Mode *[]V0041OpenapiSlurmdbdConfigRespQosPreemptMode `json:"mode,omitempty"`
		} `json:"preempt,omitempty"`

		// Priority Priority
		Priority *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"priority,omitempty"`

		// UsageFactor UsageFactor
		UsageFactor *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *float64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"usage_factor,omitempty"`

		// UsageThreshold UsageThreshold
		UsageThreshold *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *float64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"usage_threshold,omitempty"`
	} `json:"qos,omitempty"`

	// Tres TRES
	Tres *[]struct {
		// Count TRES count (0 if listed generically)
		Count *int64 `json:"count,omitempty"`

		// Id ID used in database
		Id *int32 `json:"id,omitempty"`

		// Name TRES name (if applicable)
		Name *string `json:"name,omitempty"`

		// Type TRES type (CPU, MEM, etc)
		Type string `json:"type"`
	} `json:"tres,omitempty"`

	// Users Users
	Users *[]struct {
		// AdministratorLevel AdminLevel granted to the user
		AdministratorLevel *[]V0041OpenapiSlurmdbdConfigRespUsersAdministratorLevel `json:"administrator_level,omitempty"`

		// Associations Associations created for this user
		Associations *[]struct {
			// Account Account
			Account *string `json:"account,omitempty"`

			// Cluster Cluster
			Cluster *string `json:"cluster,omitempty"`

			// Id Numeric association ID
			Id *int32 `json:"id,omitempty"`

			// Partition Partition
			Partition *string `json:"partition,omitempty"`

			// User User name
			User string `json:"user"`
		} `json:"associations,omitempty"`

		// Coordinators Accounts this user is a coordinator for
		Coordinators *[]struct {
			// Direct Indicates whether the coordinator was directly assigned to this account
			Direct *bool `json:"direct,omitempty"`

			// Name User name
			Name string `json:"name"`
		} `json:"coordinators,omitempty"`
		Default *struct {
			// Account Default Account
			Account *string `json:"account,omitempty"`

			// Wckey Default WCKey
			Wckey *string `json:"wckey,omitempty"`
		} `json:"default,omitempty"`

		// Flags Flags associated with user
		Flags *[]V0041OpenapiSlurmdbdConfigRespUsersFlags `json:"flags,omitempty"`

		// Name User name
		Name string `json:"name"`

		// OldName Previous user name
		OldName *string `json:"old_name,omitempty"`

		// Wckeys List of available WCKeys
		Wckeys *[]struct {
			// Accounting Accounting records containing related resource usage
			Accounting *[]struct {
				// TRES Trackable resources
				TRES *struct {
					// Count TRES count (0 if listed generically)
					Count *int64 `json:"count,omitempty"`

					// Id ID used in database
					Id *int32 `json:"id,omitempty"`

					// Name TRES name (if applicable)
					Name *string `json:"name,omitempty"`

					// Type TRES type (CPU, MEM, etc)
					Type string `json:"type"`
				} `json:"TRES,omitempty"`
				Allocated *struct {
					// Seconds Number of cpu seconds allocated
					Seconds *int64 `json:"seconds,omitempty"`
				} `json:"allocated,omitempty"`

				// Id Association ID or Workload characterization key ID
				Id *int32 `json:"id,omitempty"`

				// Start When the record was started
				Start *int64 `json:"start,omitempty"`
			} `json:"accounting,omitempty"`

			// Cluster Cluster name
			Cluster string `json:"cluster"`

			// Flags Flags associated with the WCKey
			Flags *[]V0041OpenapiSlurmdbdConfigRespUsersWckeysFlags `json:"flags,omitempty"`

			// Id Unique ID for this user-cluster-wckey combination
			Id *int32 `json:"id,omitempty"`

			// Name WCKey name
			Name string `json:"name"`

			// User User name
			User string `json:"user"`
		} `json:"wckeys,omitempty"`
	} `json:"users,omitempty"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`

	// Wckeys WCKeys
	Wckeys *[]struct {
		// Accounting Accounting records containing related resource usage
		Accounting *[]struct {
			// TRES Trackable resources
			TRES *struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"TRES,omitempty"`
			Allocated *struct {
				// Seconds Number of cpu seconds allocated
				Seconds *int64 `json:"seconds,omitempty"`
			} `json:"allocated,omitempty"`

			// Id Association ID or Workload characterization key ID
			Id *int32 `json:"id,omitempty"`

			// Start When the record was started
			Start *int64 `json:"start,omitempty"`
		} `json:"accounting,omitempty"`

		// Cluster Cluster name
		Cluster string `json:"cluster"`

		// Flags Flags associated with the WCKey
		Flags *[]V0041OpenapiSlurmdbdConfigRespWckeysFlags `json:"flags,omitempty"`

		// Id Unique ID for this user-cluster-wckey combination
		Id *int32 `json:"id,omitempty"`

		// Name WCKey name
		Name string `json:"name"`

		// User User name
		User string `json:"user"`
	} `json:"wckeys,omitempty"`
}

// V0041OpenapiSlurmdbdConfigRespAccountsFlags defines model for V0041OpenapiSlurmdbdConfigResp.Accounts.Flags.
type V0041OpenapiSlurmdbdConfigRespAccountsFlags string

// V0041OpenapiSlurmdbdConfigRespAssociationsFlags defines model for V0041OpenapiSlurmdbdConfigResp.Associations.Flags.
type V0041OpenapiSlurmdbdConfigRespAssociationsFlags string

// V0041OpenapiSlurmdbdConfigRespClustersFlags defines model for V0041OpenapiSlurmdbdConfigResp.Clusters.Flags.
type V0041OpenapiSlurmdbdConfigRespClustersFlags string

// V0041OpenapiSlurmdbdConfigRespQosFlags defines model for V0041OpenapiSlurmdbdConfigResp.Qos.Flags.
type V0041OpenapiSlurmdbdConfigRespQosFlags string

// V0041OpenapiSlurmdbdConfigRespQosPreemptMode defines model for V0041OpenapiSlurmdbdConfigResp.Qos.Preempt.Mode.
type V0041OpenapiSlurmdbdConfigRespQosPreemptMode string

// V0041OpenapiSlurmdbdConfigRespUsersAdministratorLevel defines model for V0041OpenapiSlurmdbdConfigResp.Users.AdministratorLevel.
type V0041OpenapiSlurmdbdConfigRespUsersAdministratorLevel string

// V0041OpenapiSlurmdbdConfigRespUsersFlags defines model for V0041OpenapiSlurmdbdConfigResp.Users.Flags.
type V0041OpenapiSlurmdbdConfigRespUsersFlags string

// V0041OpenapiSlurmdbdConfigRespUsersWckeysFlags defines model for V0041OpenapiSlurmdbdConfigResp.Users.Wckeys.Flags.
type V0041OpenapiSlurmdbdConfigRespUsersWckeysFlags string

// V0041OpenapiSlurmdbdConfigRespWckeysFlags defines model for V0041OpenapiSlurmdbdConfigResp.Wckeys.Flags.
type V0041OpenapiSlurmdbdConfigRespWckeysFlags string

// V0041OpenapiSlurmdbdJobsResp defines model for v0.0.41_openapi_slurmdbd_jobs_resp.
type V0041OpenapiSlurmdbdJobsResp struct {
	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Jobs jobs
	Jobs []struct {
		// Account Account the job ran under
		Account *string `json:"account,omitempty"`

		// AllocationNodes List of nodes allocated to the job
		AllocationNodes *int32 `json:"allocation_nodes,omitempty"`
		Array           *struct {
			// JobId Job ID of job array, or 0 if N/A
			JobId  *int32 `json:"job_id,omitempty"`
			Limits *struct {
				Max *struct {
					Running *struct {
						// Tasks Maximum number of simultaneously running tasks, 0 if no limit
						Tasks *int32 `json:"tasks,omitempty"`
					} `json:"running,omitempty"`
				} `json:"max,omitempty"`
			} `json:"limits,omitempty"`

			// Task String expression of task IDs in this record
			Task *string `json:"task,omitempty"`

			// TaskId Task ID of this task in job array
			TaskId *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"task_id,omitempty"`
		} `json:"array,omitempty"`

		// Association Unique identifier for the association
		Association *struct {
			// Account Account
			Account *string `json:"account,omitempty"`

			// Cluster Cluster
			Cluster *string `json:"cluster,omitempty"`

			// Id Numeric association ID
			Id *int32 `json:"id,omitempty"`

			// Partition Partition
			Partition *string `json:"partition,omitempty"`

			// User User name
			User string `json:"user"`
		} `json:"association,omitempty"`

		// Block The name of the block to be used (used with Blue Gene systems)
		Block *string `json:"block,omitempty"`

		// Cluster Cluster name
		Cluster *string `json:"cluster,omitempty"`
		Comment *struct {
			// Administrator Arbitrary comment made by administrator
			Administrator *string `json:"administrator,omitempty"`

			// Job Arbitrary comment made by user
			Job *string `json:"job,omitempty"`

			// System Arbitrary comment from slurmctld
			System *string `json:"system,omitempty"`
		} `json:"comment,omitempty"`

		// Constraints Feature(s) the job requested as a constraint
		Constraints *string `json:"constraints,omitempty"`

		// Container Absolute path to OCI container bundle
		Container *string `json:"container,omitempty"`

		// DerivedExitCode Highest exit code of all job steps
		DerivedExitCode *struct {
			// ReturnCode Process return code (numeric)
			ReturnCode *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"return_code,omitempty"`
			Signal *struct {
				// Id Signal sent to process (numeric)
				Id *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int32 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"id,omitempty"`

				// Name Signal sent to process
				Name *string `json:"name,omitempty"`
			} `json:"signal,omitempty"`

			// Status Status given by return code
			Status *[]V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatus `json:"status,omitempty"`
		} `json:"derived_exit_code,omitempty"`

		// ExitCode Exit code
		ExitCode *struct {
			// ReturnCode Process return code (numeric)
			ReturnCode *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"return_code,omitempty"`
			Signal *struct {
				// Id Signal sent to process (numeric)
				Id *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int32 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"id,omitempty"`

				// Name Signal sent to process
				Name *string `json:"name,omitempty"`
			} `json:"signal,omitempty"`

			// Status Status given by return code
			Status *[]V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatus `json:"status,omitempty"`
		} `json:"exit_code,omitempty"`

		// Extra Arbitrary string used for node filtering if extra constraints are enabled
		Extra *string `json:"extra,omitempty"`

		// FailedNode Name of node that caused job failure
		FailedNode *string `json:"failed_node,omitempty"`

		// Flags Flags associated with the job
		Flags *[]V0041OpenapiSlurmdbdJobsRespJobsFlags `json:"flags,omitempty"`

		// Group Group ID of the user that owns the job
		Group *string `json:"group,omitempty"`
		Het   *struct {
			// JobId Heterogeneous job ID, if applicable
			JobId *int32 `json:"job_id,omitempty"`

			// JobOffset Unique sequence number applied to this component of the heterogeneous job
			JobOffset *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"job_offset,omitempty"`
		} `json:"het,omitempty"`

		// Hold Hold (true) or release (false) job
		Hold *bool `json:"hold,omitempty"`

		// JobId Job ID
		JobId *int32 `json:"job_id,omitempty"`

		// KillRequestUser User ID that requested termination of the job
		KillRequestUser *string `json:"kill_request_user,omitempty"`

		// Licenses License(s) required by the job
		Licenses *string `json:"licenses,omitempty"`
		Mcs      *struct {
			// Label Multi-Category Security label on the job
			Label *string `json:"label,omitempty"`
		} `json:"mcs,omitempty"`

		// Name Job name
		Name *string `json:"name,omitempty"`

		// Nodes Node(s) allocated to the job
		Nodes *string `json:"nodes,omitempty"`

		// Partition Partition assigned to the job
		Partition *string `json:"partition,omitempty"`

		// Priority Request specific job priority
		Priority *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"priority,omitempty"`

		// Qos Quality of Service assigned to the job
		Qos      *string `json:"qos,omitempty"`
		Required *struct {
			// CPUs Minimum number of CPUs required
			CPUs *int32 `json:"CPUs,omitempty"`

			// MemoryPerCpu Minimum memory in megabytes per allocated CPU
			MemoryPerCpu *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"memory_per_cpu,omitempty"`

			// MemoryPerNode Minimum memory in megabytes per allocated node
			MemoryPerNode *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"memory_per_node,omitempty"`
		} `json:"required,omitempty"`
		Reservation *struct {
			// Id Unique identifier of requested reservation
			Id *int32 `json:"id,omitempty"`

			// Name Name of reservation to use
			Name *string `json:"name,omitempty"`
		} `json:"reservation,omitempty"`

		// Script Job batch script; only the first component in a HetJob is populated or honored
		Script *string `json:"script,omitempty"`
		State  *struct {
			// Current Current state
			Current *[]V0041OpenapiSlurmdbdJobsRespJobsStateCurrent `json:"current,omitempty"`

			// Reason Reason for previous Pending or Failed state
			Reason *string `json:"reason,omitempty"`
		} `json:"state,omitempty"`

		// Stderr Path to stderr file
		Stderr *string `json:"stderr,omitempty"`

		// StderrExpanded Job stderr with expanded fields
		StderrExpanded *string `json:"stderr_expanded,omitempty"`

		// Stdin Path to stdin file
		Stdin *string `json:"stdin,omitempty"`

		// StdinExpanded Job stdin with expanded fields
		StdinExpanded *string `json:"stdin_expanded,omitempty"`

		// Stdout Path to stdout file
		Stdout *string `json:"stdout,omitempty"`

		// StdoutExpanded Job stdout with expanded fields
		StdoutExpanded *string `json:"stdout_expanded,omitempty"`

		// Steps Individual steps in the job
		Steps *[]struct {
			CPU *struct {
				// Governor Requested CPU frequency governor in kHz
				Governor           *string `json:"governor,omitempty"`
				RequestedFrequency *struct {
					// Max Maximum requested CPU frequency in kHz
					Max *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"max,omitempty"`

					// Min Minimum requested CPU frequency in kHz
					Min *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"min,omitempty"`
				} `json:"requested_frequency,omitempty"`
			} `json:"CPU,omitempty"`

			// ExitCode Exit code
			ExitCode *struct {
				// ReturnCode Process return code (numeric)
				ReturnCode *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int32 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"return_code,omitempty"`
				Signal *struct {
					// Id Signal sent to process (numeric)
					Id *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"id,omitempty"`

					// Name Signal sent to process
					Name *string `json:"name,omitempty"`
				} `json:"signal,omitempty"`

				// Status Status given by return code
				Status *[]V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatus `json:"status,omitempty"`
			} `json:"exit_code,omitempty"`

			// KillRequestUser User ID that requested termination of the step
			KillRequestUser *string `json:"kill_request_user,omitempty"`
			Nodes           *struct {
				// Count Number of nodes in the job step
				Count *int32 `json:"count,omitempty"`

				// List List of nodes used by the step
				List *[]string `json:"list,omitempty"`

				// Range Node(s) allocated to the job step
				Range *string `json:"range,omitempty"`
			} `json:"nodes,omitempty"`

			// Pid Process ID
			Pid *string `json:"pid,omitempty"`

			// State Current state
			State      *[]V0041OpenapiSlurmdbdJobsRespJobsStepsState `json:"state,omitempty"`
			Statistics *struct {
				CPU *struct {
					// ActualFrequency Average weighted CPU frequency of all tasks in kHz
					ActualFrequency *int64 `json:"actual_frequency,omitempty"`
				} `json:"CPU,omitempty"`
				Energy *struct {
					// Consumed Total energy consumed by all tasks in a job in joules
					Consumed *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int64 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"consumed,omitempty"`
				} `json:"energy,omitempty"`
			} `json:"statistics,omitempty"`
			Step *struct {
				// Id Step ID
				Id *string `json:"id,omitempty"`

				// Name Step name
				Name *string `json:"name,omitempty"`
			} `json:"step,omitempty"`
			Task *struct {
				// Distribution The layout of the step was when it was running
				Distribution *string `json:"distribution,omitempty"`
			} `json:"task,omitempty"`
			Tasks *struct {
				// Count Total number of tasks
				Count *int32 `json:"count,omitempty"`
			} `json:"tasks,omitempty"`
			Time *struct {
				// Elapsed Elapsed time in seconds
				Elapsed *int32 `json:"elapsed,omitempty"`

				// End End time (UNIX timestamp)
				End *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int64 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"end,omitempty"`

				// Start Time execution began (UNIX timestamp)
				Start *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int64 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"start,omitempty"`

				// Suspended Time in suspended state in seconds
				Suspended *int32 `json:"suspended,omitempty"`
				System    *struct {
					// Microseconds System CPU time used by the step in microseconds
					Microseconds *int32 `json:"microseconds,omitempty"`

					// Seconds System CPU time used by the step in seconds
					Seconds *int64 `json:"seconds,omitempty"`
				} `json:"system,omitempty"`
				Total *struct {
					// Microseconds Total CPU time used by the step in microseconds
					Microseconds *int32 `json:"microseconds,omitempty"`

					// Seconds Total CPU time used by the step in seconds
					Seconds *int64 `json:"seconds,omitempty"`
				} `json:"total,omitempty"`
				User *struct {
					// Microseconds User CPU time used by the step in microseconds
					Microseconds *int32 `json:"microseconds,omitempty"`

					// Seconds User CPU time used by the step in seconds
					Seconds *int64 `json:"seconds,omitempty"`
				} `json:"user,omitempty"`
			} `json:"time,omitempty"`
			Tres *struct {
				// Allocated Trackable resources allocated to the step
				Allocated *[]struct {
					// Count TRES count (0 if listed generically)
					Count *int64 `json:"count,omitempty"`

					// Id ID used in database
					Id *int32 `json:"id,omitempty"`

					// Name TRES name (if applicable)
					Name *string `json:"name,omitempty"`

					// Type TRES type (CPU, MEM, etc)
					Type string `json:"type"`
				} `json:"allocated,omitempty"`
				Consumed *struct {
					// Average Average TRES usage consumed among all tasks
					Average *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"average,omitempty"`

					// Max Maximum TRES usage consumed among all tasks
					Max *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"max,omitempty"`

					// Min Minimum TRES usage consumed among all tasks
					Min *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"min,omitempty"`

					// Total Total TRES usage consumed among all tasks
					Total *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"total,omitempty"`
				} `json:"consumed,omitempty"`
				Requested *struct {
					// Average Average TRES usage requested among all tasks
					Average *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"average,omitempty"`

					// Max Maximum TRES usage requested among all tasks
					Max *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"max,omitempty"`

					// Min Minimum TRES usage requested among all tasks
					Min *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"min,omitempty"`

					// Total Total TRES usage requested among all tasks
					Total *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"total,omitempty"`
				} `json:"requested,omitempty"`
			} `json:"tres,omitempty"`
		} `json:"steps,omitempty"`

		// SubmitLine Command used to submit the job
		SubmitLine *string `json:"submit_line,omitempty"`
		Time       *struct {
			// Elapsed Elapsed time in seconds
			Elapsed *int32 `json:"elapsed,omitempty"`

			// Eligible Time when the job became eligible to run (UNIX timestamp)
			Eligible *int64 `json:"eligible,omitempty"`

			// End End time (UNIX timestamp)
			End *int64 `json:"end,omitempty"`

			// Limit Maximum run time in minutes
			Limit *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"limit,omitempty"`

			// Planned Time required to start job after becoming eligible to run in seconds
			Planned *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"planned,omitempty"`

			// Start Time execution began (UNIX timestamp)
			Start *int64 `json:"start,omitempty"`

			// Submission Time when the job was submitted (UNIX timestamp)
			Submission *int64 `json:"submission,omitempty"`

			// Suspended Total time in suspended state in seconds
			Suspended *int32 `json:"suspended,omitempty"`
			System    *struct {
				// Microseconds System CPU time used by the job in microseconds
				Microseconds *int64 `json:"microseconds,omitempty"`

				// Seconds System CPU time used by the job in seconds
				Seconds *int64 `json:"seconds,omitempty"`
			} `json:"system,omitempty"`
			Total *struct {
				// Microseconds Sum of System and User CPU time used by the job in microseconds
				Microseconds *int64 `json:"microseconds,omitempty"`

				// Seconds Sum of System and User CPU time used by the job in seconds
				Seconds *int64 `json:"seconds,omitempty"`
			} `json:"total,omitempty"`
			User *struct {
				// Microseconds User CPU time used by the job in microseconds
				Microseconds *int64 `json:"microseconds,omitempty"`

				// Seconds User CPU time used by the job in seconds
				Seconds *int64 `json:"seconds,omitempty"`
			} `json:"user,omitempty"`
		} `json:"time,omitempty"`
		Tres *struct {
			// Allocated Trackable resources allocated to the job
			Allocated *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"allocated,omitempty"`

			// Requested Trackable resources requested by job
			Requested *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"requested,omitempty"`
		} `json:"tres,omitempty"`

		// UsedGres Generic resources used by job
		UsedGres *string `json:"used_gres,omitempty"`

		// User User that owns the job
		User *string `json:"user,omitempty"`

		// Wckey Workload characterization key
		Wckey *struct {
			// Flags Active flags
			Flags []V0041OpenapiSlurmdbdJobsRespJobsWckeyFlags `json:"flags"`

			// Wckey WCKey name
			Wckey string `json:"wckey"`
		} `json:"wckey,omitempty"`

		// WorkingDirectory Path to current working directory
		WorkingDirectory *string `json:"working_directory,omitempty"`
	} `json:"jobs"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatus defines model for V0041OpenapiSlurmdbdJobsResp.Jobs.DerivedExitCode.Status.
type V0041OpenapiSlurmdbdJobsRespJobsDerivedExitCodeStatus string

// V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatus defines model for V0041OpenapiSlurmdbdJobsResp.Jobs.ExitCode.Status.
type V0041OpenapiSlurmdbdJobsRespJobsExitCodeStatus string

// V0041OpenapiSlurmdbdJobsRespJobsFlags defines model for V0041OpenapiSlurmdbdJobsResp.Jobs.Flags.
type V0041OpenapiSlurmdbdJobsRespJobsFlags string

// V0041OpenapiSlurmdbdJobsRespJobsStateCurrent defines model for V0041OpenapiSlurmdbdJobsResp.Jobs.State.Current.
type V0041OpenapiSlurmdbdJobsRespJobsStateCurrent string

// V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatus defines model for V0041OpenapiSlurmdbdJobsResp.Jobs.Steps.ExitCode.Status.
type V0041OpenapiSlurmdbdJobsRespJobsStepsExitCodeStatus string

// V0041OpenapiSlurmdbdJobsRespJobsStepsState defines model for V0041OpenapiSlurmdbdJobsResp.Jobs.Steps.State.
type V0041OpenapiSlurmdbdJobsRespJobsStepsState string

// V0041OpenapiSlurmdbdJobsRespJobsWckeyFlags defines model for V0041OpenapiSlurmdbdJobsResp.Jobs.Wckey.Flags.
type V0041OpenapiSlurmdbdJobsRespJobsWckeyFlags string

// V0041OpenapiSlurmdbdQosResp defines model for v0.0.41_openapi_slurmdbd_qos_resp.
type V0041OpenapiSlurmdbdQosResp struct {
	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Qos List of QOS
	Qos []struct {
		// Description Arbitrary description
		Description *string `json:"description,omitempty"`

		// Flags Flags, to avoid modifying current values specify NOT_SET
		Flags *[]V0041OpenapiSlurmdbdQosRespQosFlags `json:"flags,omitempty"`

		// Id Unique ID
		Id     *int32 `json:"id,omitempty"`
		Limits *struct {
			// Factor LimitFactor
			Factor *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *float64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"factor,omitempty"`

			// GraceTime GraceTime
			GraceTime *int32 `json:"grace_time,omitempty"`
			Max       *struct {
				Accruing *struct {
					Per *struct {
						// Account MaxJobsAccruePerAccount
						Account *struct {
							// Infinite True if number has been set to infinite; "set" and "number" will be ignored
							Infinite *bool `json:"infinite,omitempty"`

							// Number If "set" is True the number will be set with value; otherwise ignore number contents
							Number *int32 `json:"number,omitempty"`

							// Set True if number has been set; False if number is unset
							Set *bool `json:"set,omitempty"`
						} `json:"account,omitempty"`

						// User MaxJobsAccruePerUser
						User *struct {
							// Infinite True if number has been set to infinite; "set" and "number" will be ignored
							Infinite *bool `json:"infinite,omitempty"`

							// Number If "set" is True the number will be set with value; otherwise ignore number contents
							Number *int32 `json:"number,omitempty"`

							// Set True if number has been set; False if number is unset
							Set *bool `json:"set,omitempty"`
						} `json:"user,omitempty"`
					} `json:"per,omitempty"`
				} `json:"accruing,omitempty"`
				ActiveJobs *struct {
					// Accruing GrpJobsAccrue
					Accruing *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"accruing,omitempty"`

					// Count GrpJobs
					Count *struct {
						// Infinite True if number has been set to infinite; "set" and "number" will be ignored
						Infinite *bool `json:"infinite,omitempty"`

						// Number If "set" is True the number will be set with value; otherwise ignore number contents
						Number *int32 `json:"number,omitempty"`

						// Set True if number has been set; False if number is unset
						Set *bool `json:"set,omitempty"`
					} `json:"count,omitempty"`
				} `json:"active_jobs,omitempty"`
				Jobs *struct {
					ActiveJobs *struct {
						Per *struct {
							// Account MaxJobsPerAccount
							Account *struct {
								// Infinite True if number has been set to infinite; "set" and "number" will be ignored
								Infinite *bool `json:"infinite,omitempty"`

								// Number If "set" is True the number will be set with value; otherwise ignore number contents
								Number *int32 `json:"number,omitempty"`

								// Set True if number has been set; False if number is unset
								Set *bool `json:"set,omitempty"`
							} `json:"account,omitempty"`

							// User MaxJobsPerUser
							User *struct {
								// Infinite True if number has been set to infinite; "set" and "number" will be ignored
								Infinite *bool `json:"infinite,omitempty"`

								// Number If "set" is True the number will be set with value; otherwise ignore number contents
								Number *int32 `json:"number,omitempty"`

								// Set True if number has been set; False if number is unset
								Set *bool `json:"set,omitempty"`
							} `json:"user,omitempty"`
						} `json:"per,omitempty"`
					} `json:"active_jobs,omitempty"`
					Per *struct {
						// Account MaxSubmitJobsPerAccount
						Account *struct {
							// Infinite True if number has been set to infinite; "set" and "number" will be ignored
							Infinite *bool `json:"infinite,omitempty"`

							// Number If "set" is True the number will be set with value; otherwise ignore number contents
							Number *int32 `json:"number,omitempty"`

							// Set True if number has been set; False if number is unset
							Set *bool `json:"set,omitempty"`
						} `json:"account,omitempty"`

						// User MaxSubmitJobsPerUser
						User *struct {
							// Infinite True if number has been set to infinite; "set" and "number" will be ignored
							Infinite *bool `json:"infinite,omitempty"`

							// Number If "set" is True the number will be set with value; otherwise ignore number contents
							Number *int32 `json:"number,omitempty"`

							// Set True if number has been set; False if number is unset
							Set *bool `json:"set,omitempty"`
						} `json:"user,omitempty"`
					} `json:"per,omitempty"`
				} `json:"jobs,omitempty"`
				Tres *struct {
					Minutes *struct {
						Per *struct {
							// Account MaxTRESRunMinsPerAccount
							Account *[]struct {
								// Count TRES count (0 if listed generically)
								Count *int64 `json:"count,omitempty"`

								// Id ID used in database
								Id *int32 `json:"id,omitempty"`

								// Name TRES name (if applicable)
								Name *string `json:"name,omitempty"`

								// Type TRES type (CPU, MEM, etc)
								Type string `json:"type"`
							} `json:"account,omitempty"`

							// Job MaxTRESMinsPerJob
							Job *[]struct {
								// Count TRES count (0 if listed generically)
								Count *int64 `json:"count,omitempty"`

								// Id ID used in database
								Id *int32 `json:"id,omitempty"`

								// Name TRES name (if applicable)
								Name *string `json:"name,omitempty"`

								// Type TRES type (CPU, MEM, etc)
								Type string `json:"type"`
							} `json:"job,omitempty"`

							// Qos GrpTRESRunMins
							Qos *[]struct {
								// Count TRES count (0 if listed generically)
								Count *int64 `json:"count,omitempty"`

								// Id ID used in database
								Id *int32 `json:"id,omitempty"`

								// Name TRES name (if applicable)
								Name *string `json:"name,omitempty"`

								// Type TRES type (CPU, MEM, etc)
								Type string `json:"type"`
							} `json:"qos,omitempty"`

							// User MaxTRESRunMinsPerUser
							User *[]struct {
								// Count TRES count (0 if listed generically)
								Count *int64 `json:"count,omitempty"`

								// Id ID used in database
								Id *int32 `json:"id,omitempty"`

								// Name TRES name (if applicable)
								Name *string `json:"name,omitempty"`

								// Type TRES type (CPU, MEM, etc)
								Type string `json:"type"`
							} `json:"user,omitempty"`
						} `json:"per,omitempty"`
					} `json:"minutes,omitempty"`
					Per *struct {
						// Account MaxTRESPerAccount
						Account *[]struct {
							// Count TRES count (0 if listed generically)
							Count *int64 `json:"count,omitempty"`

							// Id ID used in database
							Id *int32 `json:"id,omitempty"`

							// Name TRES name (if applicable)
							Name *string `json:"name,omitempty"`

							// Type TRES type (CPU, MEM, etc)
							Type string `json:"type"`
						} `json:"account,omitempty"`

						// Job MaxTRESPerJob
						Job *[]struct {
							// Count TRES count (0 if listed generically)
							Count *int64 `json:"count,omitempty"`

							// Id ID used in database
							Id *int32 `json:"id,omitempty"`

							// Name TRES name (if applicable)
							Name *string `json:"name,omitempty"`

							// Type TRES type (CPU, MEM, etc)
							Type string `json:"type"`
						} `json:"job,omitempty"`

						// Node MaxTRESPerNode
						Node *[]struct {
							// Count TRES count (0 if listed generically)
							Count *int64 `json:"count,omitempty"`

							// Id ID used in database
							Id *int32 `json:"id,omitempty"`

							// Name TRES name (if applicable)
							Name *string `json:"name,omitempty"`

							// Type TRES type (CPU, MEM, etc)
							Type string `json:"type"`
						} `json:"node,omitempty"`

						// User MaxTRESPerUser
						User *[]struct {
							// Count TRES count (0 if listed generically)
							Count *int64 `json:"count,omitempty"`

							// Id ID used in database
							Id *int32 `json:"id,omitempty"`

							// Name TRES name (if applicable)
							Name *string `json:"name,omitempty"`

							// Type TRES type (CPU, MEM, etc)
							Type string `json:"type"`
						} `json:"user,omitempty"`
					} `json:"per,omitempty"`

					// Total GrpTRES
					Total *[]struct {
						// Count TRES count (0 if listed generically)
						Count *int64 `json:"count,omitempty"`

						// Id ID used in database
						Id *int32 `json:"id,omitempty"`

						// Name TRES name (if applicable)
						Name *string `json:"name,omitempty"`

						// Type TRES type (CPU, MEM, etc)
						Type string `json:"type"`
					} `json:"total,omitempty"`
				} `json:"tres,omitempty"`
				WallClock *struct {
					Per *struct {
						// Job MaxWallDurationPerJob
						Job *struct {
							// Infinite True if number has been set to infinite; "set" and "number" will be ignored
							Infinite *bool `json:"infinite,omitempty"`

							// Number If "set" is True the number will be set with value; otherwise ignore number contents
							Number *int32 `json:"number,omitempty"`

							// Set True if number has been set; False if number is unset
							Set *bool `json:"set,omitempty"`
						} `json:"job,omitempty"`

						// Qos GrpWall
						Qos *struct {
							// Infinite True if number has been set to infinite; "set" and "number" will be ignored
							Infinite *bool `json:"infinite,omitempty"`

							// Number If "set" is True the number will be set with value; otherwise ignore number contents
							Number *int32 `json:"number,omitempty"`

							// Set True if number has been set; False if number is unset
							Set *bool `json:"set,omitempty"`
						} `json:"qos,omitempty"`
					} `json:"per,omitempty"`
				} `json:"wall_clock,omitempty"`
			} `json:"max,omitempty"`
			Min *struct {
				// PriorityThreshold MinPrioThreshold
				PriorityThreshold *struct {
					// Infinite True if number has been set to infinite; "set" and "number" will be ignored
					Infinite *bool `json:"infinite,omitempty"`

					// Number If "set" is True the number will be set with value; otherwise ignore number contents
					Number *int32 `json:"number,omitempty"`

					// Set True if number has been set; False if number is unset
					Set *bool `json:"set,omitempty"`
				} `json:"priority_threshold,omitempty"`
				Tres *struct {
					Per *struct {
						// Job MinTRES
						Job *[]struct {
							// Count TRES count (0 if listed generically)
							Count *int64 `json:"count,omitempty"`

							// Id ID used in database
							Id *int32 `json:"id,omitempty"`

							// Name TRES name (if applicable)
							Name *string `json:"name,omitempty"`

							// Type TRES type (CPU, MEM, etc)
							Type string `json:"type"`
						} `json:"job,omitempty"`
					} `json:"per,omitempty"`
				} `json:"tres,omitempty"`
			} `json:"min,omitempty"`
		} `json:"limits,omitempty"`

		// Name Name
		Name    *string `json:"name,omitempty"`
		Preempt *struct {
			// ExemptTime PreemptExemptTime
			ExemptTime *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"exempt_time,omitempty"`

			// List Other QOS's this QOS can preempt
			List *[]string `json:"list,omitempty"`

			// Mode PreemptMode
			Mode *[]V0041OpenapiSlurmdbdQosRespQosPreemptMode `json:"mode,omitempty"`
		} `json:"preempt,omitempty"`

		// Priority Priority
		Priority *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"priority,omitempty"`

		// UsageFactor UsageFactor
		UsageFactor *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *float64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"usage_factor,omitempty"`

		// UsageThreshold UsageThreshold
		UsageThreshold *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *float64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"usage_threshold,omitempty"`
	} `json:"qos"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// V0041OpenapiSlurmdbdQosRespQosFlags defines model for V0041OpenapiSlurmdbdQosResp.Qos.Flags.
type V0041OpenapiSlurmdbdQosRespQosFlags string

// V0041OpenapiSlurmdbdQosRespQosPreemptMode defines model for V0041OpenapiSlurmdbdQosResp.Qos.Preempt.Mode.
type V0041OpenapiSlurmdbdQosRespQosPreemptMode string

// V0041OpenapiTresResp defines model for v0.0.41_openapi_tres_resp.
type V0041OpenapiTresResp struct {
	// TRES TRES
	TRES []struct {
		// Count TRES count (0 if listed generically)
		Count *int64 `json:"count,omitempty"`

		// Id ID used in database
		Id *int32 `json:"id,omitempty"`

		// Name TRES name (if applicable)
		Name *string `json:"name,omitempty"`

		// Type TRES type (CPU, MEM, etc)
		Type string `json:"type"`
	} `json:"TRES"`

	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// V0041OpenapiUsersResp defines model for v0.0.41_openapi_users_resp.
type V0041OpenapiUsersResp struct {
	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Users users
	Users []struct {
		// AdministratorLevel AdminLevel granted to the user
		AdministratorLevel *[]V0041OpenapiUsersRespUsersAdministratorLevel `json:"administrator_level,omitempty"`

		// Associations Associations created for this user
		Associations *[]struct {
			// Account Account
			Account *string `json:"account,omitempty"`

			// Cluster Cluster
			Cluster *string `json:"cluster,omitempty"`

			// Id Numeric association ID
			Id *int32 `json:"id,omitempty"`

			// Partition Partition
			Partition *string `json:"partition,omitempty"`

			// User User name
			User string `json:"user"`
		} `json:"associations,omitempty"`

		// Coordinators Accounts this user is a coordinator for
		Coordinators *[]struct {
			// Direct Indicates whether the coordinator was directly assigned to this account
			Direct *bool `json:"direct,omitempty"`

			// Name User name
			Name string `json:"name"`
		} `json:"coordinators,omitempty"`
		Default *struct {
			// Account Default Account
			Account *string `json:"account,omitempty"`

			// Wckey Default WCKey
			Wckey *string `json:"wckey,omitempty"`
		} `json:"default,omitempty"`

		// Flags Flags associated with user
		Flags *[]V0041OpenapiUsersRespUsersFlags `json:"flags,omitempty"`

		// Name User name
		Name string `json:"name"`

		// OldName Previous user name
		OldName *string `json:"old_name,omitempty"`

		// Wckeys List of available WCKeys
		Wckeys *[]struct {
			// Accounting Accounting records containing related resource usage
			Accounting *[]struct {
				// TRES Trackable resources
				TRES *struct {
					// Count TRES count (0 if listed generically)
					Count *int64 `json:"count,omitempty"`

					// Id ID used in database
					Id *int32 `json:"id,omitempty"`

					// Name TRES name (if applicable)
					Name *string `json:"name,omitempty"`

					// Type TRES type (CPU, MEM, etc)
					Type string `json:"type"`
				} `json:"TRES,omitempty"`
				Allocated *struct {
					// Seconds Number of cpu seconds allocated
					Seconds *int64 `json:"seconds,omitempty"`
				} `json:"allocated,omitempty"`

				// Id Association ID or Workload characterization key ID
				Id *int32 `json:"id,omitempty"`

				// Start When the record was started
				Start *int64 `json:"start,omitempty"`
			} `json:"accounting,omitempty"`

			// Cluster Cluster name
			Cluster string `json:"cluster"`

			// Flags Flags associated with the WCKey
			Flags *[]V0041OpenapiUsersRespUsersWckeysFlags `json:"flags,omitempty"`

			// Id Unique ID for this user-cluster-wckey combination
			Id *int32 `json:"id,omitempty"`

			// Name WCKey name
			Name string `json:"name"`

			// User User name
			User string `json:"user"`
		} `json:"wckeys,omitempty"`
	} `json:"users"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// V0041OpenapiUsersRespUsersAdministratorLevel defines model for V0041OpenapiUsersResp.Users.AdministratorLevel.
type V0041OpenapiUsersRespUsersAdministratorLevel string

// V0041OpenapiUsersRespUsersFlags defines model for V0041OpenapiUsersResp.Users.Flags.
type V0041OpenapiUsersRespUsersFlags string

// V0041OpenapiUsersRespUsersWckeysFlags defines model for V0041OpenapiUsersResp.Users.Wckeys.Flags.
type V0041OpenapiUsersRespUsersWckeysFlags string

// V0041OpenapiWckeyResp defines model for v0.0.41_openapi_wckey_resp.
type V0041OpenapiWckeyResp struct {
	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`

	// Wckeys wckeys
	Wckeys []struct {
		// Accounting Accounting records containing related resource usage
		Accounting *[]struct {
			// TRES Trackable resources
			TRES *struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"TRES,omitempty"`
			Allocated *struct {
				// Seconds Number of cpu seconds allocated
				Seconds *int64 `json:"seconds,omitempty"`
			} `json:"allocated,omitempty"`

			// Id Association ID or Workload characterization key ID
			Id *int32 `json:"id,omitempty"`

			// Start When the record was started
			Start *int64 `json:"start,omitempty"`
		} `json:"accounting,omitempty"`

		// Cluster Cluster name
		Cluster string `json:"cluster"`

		// Flags Flags associated with the WCKey
		Flags *[]V0041OpenapiWckeyRespWckeysFlags `json:"flags,omitempty"`

		// Id Unique ID for this user-cluster-wckey combination
		Id *int32 `json:"id,omitempty"`

		// Name WCKey name
		Name string `json:"name"`

		// User User name
		User string `json:"user"`
	} `json:"wckeys"`
}

// V0041OpenapiWckeyRespWckeysFlags defines model for V0041OpenapiWckeyResp.Wckeys.Flags.
type V0041OpenapiWckeyRespWckeysFlags string

// SlurmV0041PostJobAllocateJSONBody defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBody struct {
	// Hetjob HetJob description
	Hetjob *[]struct {
		// Account Account associated with the job
		Account *string `json:"account,omitempty"`

		// AccountGatherFrequency Job accounting and profiling sampling intervals in seconds
		AccountGatherFrequency *string `json:"account_gather_frequency,omitempty"`

		// AdminComment Arbitrary comment made by administrator
		AdminComment *string `json:"admin_comment,omitempty"`

		// AllocationNodeList Local node making the resource allocation
		AllocationNodeList *string `json:"allocation_node_list,omitempty"`

		// AllocationNodePort Port to send allocation confirmation to
		AllocationNodePort *int32 `json:"allocation_node_port,omitempty"`

		// Argv Arguments to the script
		Argv *[]string `json:"argv,omitempty"`

		// Array Job array index value specification
		Array *string `json:"array,omitempty"`

		// BatchFeatures Features required for batch script's node
		BatchFeatures *string `json:"batch_features,omitempty"`

		// BeginTime Defer the allocation of the job until the specified time (UNIX timestamp)
		BeginTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"begin_time,omitempty"`

		// BurstBuffer Burst buffer specifications
		BurstBuffer *string `json:"burst_buffer,omitempty"`

		// ClusterConstraint Required features that a federated cluster must have to have a sibling job submitted to it
		ClusterConstraint *string `json:"cluster_constraint,omitempty"`

		// Clusters Clusters that a federated job can run on
		Clusters *string `json:"clusters,omitempty"`

		// Comment Arbitrary comment made by user
		Comment *string `json:"comment,omitempty"`

		// Constraints Comma separated list of features that are required
		Constraints *string `json:"constraints,omitempty"`

		// Container Absolute path to OCI container bundle
		Container *string `json:"container,omitempty"`

		// ContainerId OCI container ID
		ContainerId *string `json:"container_id,omitempty"`

		// Contiguous True if job requires contiguous nodes
		Contiguous *bool `json:"contiguous,omitempty"`

		// CoreSpecification Specialized core count
		CoreSpecification *int32 `json:"core_specification,omitempty"`

		// CpuBinding Method for binding tasks to allocated CPUs
		CpuBinding *string `json:"cpu_binding,omitempty"`

		// CpuBindingFlags Flags for CPU binding
		CpuBindingFlags *[]SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags `json:"cpu_binding_flags,omitempty"`

		// CpuFrequency Requested CPU frequency range <p1>[-p2][:p3]
		CpuFrequency *string `json:"cpu_frequency,omitempty"`

		// CpusPerTask Number of CPUs required by each task
		CpusPerTask *int32 `json:"cpus_per_task,omitempty"`

		// CpusPerTres Semicolon delimited list of TRES=# values values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)
		CpusPerTres *string `json:"cpus_per_tres,omitempty"`

		// Crontab Specification for scrontab job
		Crontab *struct {
			// Command Command to run
			Command *string `json:"command,omitempty"`

			// DayOfMonth Ranged string specifying eligible day of month values (e.g. 0-10,29)
			DayOfMonth *string `json:"day_of_month,omitempty"`

			// DayOfWeek Ranged string specifying eligible day of week values (e.g.0-3,7)
			DayOfWeek *string `json:"day_of_week,omitempty"`

			// Flags Flags
			Flags *[]SlurmV0041PostJobAllocateJSONBodyHetjobCrontabFlags `json:"flags,omitempty"`

			// Hour Ranged string specifying eligible hour values (e.g. 0-5,23)
			Hour *string `json:"hour,omitempty"`
			Line *struct {
				// End End of this entry in file
				End *int32 `json:"end,omitempty"`

				// Start Start of this entry in file
				Start *int32 `json:"start,omitempty"`
			} `json:"line,omitempty"`

			// Minute Ranged string specifying eligible minute values (e.g. 0-10,50)
			Minute *string `json:"minute,omitempty"`

			// Month Ranged string specifying eligible month values (e.g. 0-5,12)
			Month *string `json:"month,omitempty"`

			// Specification Time specification (* means valid for all allowed values) - minute hour day_of_month month day_of_week
			Specification *string `json:"specification,omitempty"`
		} `json:"crontab,omitempty"`

		// CurrentWorkingDirectory Working directory to use for the job
		CurrentWorkingDirectory *string `json:"current_working_directory,omitempty"`

		// Deadline Latest time that the job may start (UNIX timestamp)
		Deadline *int64 `json:"deadline,omitempty"`

		// DelayBoot Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification
		DelayBoot *int32 `json:"delay_boot,omitempty"`

		// Dependency Other jobs that must meet certain criteria before this job can start
		Dependency *string `json:"dependency,omitempty"`

		// Distribution Layout
		Distribution *string `json:"distribution,omitempty"`

		// DistributionPlaneSize Plane size specification when distribution specifies plane
		DistributionPlaneSize *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"distribution_plane_size,omitempty"`

		// EndTime Expected end time (UNIX timestamp)
		EndTime *int64 `json:"end_time,omitempty"`

		// Environment Environment variables to be set for the job
		Environment *[]string `json:"environment,omitempty"`

		// ExcludedNodes Comma separated list of nodes that may not be used
		ExcludedNodes *[]string `json:"excluded_nodes,omitempty"`
		// Deprecated:
		Exclusive *[]SlurmV0041PostJobAllocateJSONBodyHetjobExclusive `json:"exclusive,omitempty"`

		// Extra Arbitrary string used for node filtering if extra constraints are enabled
		Extra *string `json:"extra,omitempty"`

		// Flags Job flags
		Flags *[]SlurmV0041PostJobAllocateJSONBodyHetjobFlags `json:"flags,omitempty"`

		// GroupId Group ID of the user that owns the job
		GroupId *string `json:"group_id,omitempty"`

		// HetjobGroup Unique sequence number applied to this component of the heterogeneous job
		HetjobGroup *int32 `json:"hetjob_group,omitempty"`

		// Hold Hold (true) or release (false) job
		Hold *bool `json:"hold,omitempty"`

		// Immediate If true, exit if resources are not available within the time period specified
		Immediate *bool `json:"immediate,omitempty"`

		// JobId Job ID
		JobId *int32 `json:"job_id,omitempty"`

		// KillOnNodeFail If true, kill job on node failure
		KillOnNodeFail *bool `json:"kill_on_node_fail,omitempty"`

		// KillWarningDelay Number of seconds before end time to send the warning signal
		KillWarningDelay *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"kill_warning_delay,omitempty"`

		// KillWarningFlags Flags related to job signals
		KillWarningFlags *[]SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags `json:"kill_warning_flags,omitempty"`

		// KillWarningSignal Signal to send when approaching end time (e.g. "10" or "USR1")
		KillWarningSignal *string `json:"kill_warning_signal,omitempty"`

		// Licenses License(s) required by the job
		Licenses *string `json:"licenses,omitempty"`

		// MailType Mail event type(s)
		MailType *[]SlurmV0041PostJobAllocateJSONBodyHetjobMailType `json:"mail_type,omitempty"`

		// MailUser User to receive email notifications
		MailUser *string `json:"mail_user,omitempty"`

		// MaximumCpus Maximum number of CPUs required
		MaximumCpus *int32 `json:"maximum_cpus,omitempty"`

		// MaximumNodes Maximum node count
		MaximumNodes *int32 `json:"maximum_nodes,omitempty"`

		// McsLabel Multi-Category Security label on the job
		McsLabel *string `json:"mcs_label,omitempty"`

		// MemoryBinding Binding map for map/mask_cpu
		MemoryBinding *string `json:"memory_binding,omitempty"`

		// MemoryBindingType Method for binding tasks to memory
		MemoryBindingType *[]SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingType `json:"memory_binding_type,omitempty"`

		// MemoryPerCpu Minimum memory in megabytes per allocated CPU
		MemoryPerCpu *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"memory_per_cpu,omitempty"`

		// MemoryPerNode Minimum memory in megabytes per allocated CPU
		MemoryPerNode *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"memory_per_node,omitempty"`

		// MemoryPerTres Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)
		MemoryPerTres *string `json:"memory_per_tres,omitempty"`

		// MinimumBoardsPerNode Boards per node required
		MinimumBoardsPerNode *int32 `json:"minimum_boards_per_node,omitempty"`

		// MinimumCpus Minimum number of CPUs required
		MinimumCpus *int32 `json:"minimum_cpus,omitempty"`

		// MinimumCpusPerNode Minimum number of CPUs per node
		MinimumCpusPerNode *int32 `json:"minimum_cpus_per_node,omitempty"`

		// MinimumNodes Minimum node count
		MinimumNodes *int32 `json:"minimum_nodes,omitempty"`

		// MinimumSocketsPerBoard Sockets per board required
		MinimumSocketsPerBoard *int32 `json:"minimum_sockets_per_board,omitempty"`

		// Name Job name
		Name *string `json:"name,omitempty"`

		// Network Network specs for job step
		Network *string `json:"network,omitempty"`

		// Nice Requested job priority change
		Nice *int32 `json:"nice,omitempty"`

		// Nodes Node count range specification (e.g. 1-15:4)
		Nodes *string `json:"nodes,omitempty"`

		// NtasksPerTres Number of tasks that can access each GPU
		NtasksPerTres *int32 `json:"ntasks_per_tres,omitempty"`

		// OpenMode Open mode used for stdout and stderr files
		OpenMode *[]SlurmV0041PostJobAllocateJSONBodyHetjobOpenMode `json:"open_mode,omitempty"`

		// Overcommit Overcommit resources
		Overcommit *bool `json:"overcommit,omitempty"`
		// Deprecated:
		Oversubscribe *bool `json:"oversubscribe,omitempty"`

		// Partition Partition assigned to the job
		Partition *string `json:"partition,omitempty"`
		// Deprecated:
		PowerFlags *[]interface{} `json:"power_flags,omitempty"`

		// Prefer Comma separated list of features that are preferred but not required
		Prefer *string `json:"prefer,omitempty"`

		// Priority Request specific job priority
		Priority *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"priority,omitempty"`

		// Profile Profile used by the acct_gather_profile plugin
		Profile *[]SlurmV0041PostJobAllocateJSONBodyHetjobProfile `json:"profile,omitempty"`

		// Qos Quality of Service assigned to the job
		Qos *string `json:"qos,omitempty"`

		// Reboot Node reboot requested before start
		Reboot *bool `json:"reboot,omitempty"`

		// Requeue Determines whether the job may be requeued
		Requeue *bool `json:"requeue,omitempty"`

		// RequiredNodes Comma separated list of required nodes
		RequiredNodes *[]string `json:"required_nodes,omitempty"`

		// RequiredSwitches Maximum number of switches
		RequiredSwitches *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"required_switches,omitempty"`

		// Reservation Name of reservation to use
		Reservation *string `json:"reservation,omitempty"`

		// ReservePorts Port to send various notification msg to
		ReservePorts *int32 `json:"reserve_ports,omitempty"`

		// ResvMpiPorts Number of reserved communication ports; can only be used if slurmstepd step manager is enabled
		ResvMpiPorts *int32 `json:"resv_mpi_ports,omitempty"`
		Rlimits      *struct {
			// As Address space limit.
			As *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"as,omitempty"`

			// Core Largest core file that can be created, in bytes.
			Core *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"core,omitempty"`

			// Cpu Per-process CPU limit, in seconds.
			Cpu *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"cpu,omitempty"`

			// Data Maximum size of data segment, in bytes.
			Data *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"data,omitempty"`

			// Fsize Largest file that can be created, in bytes.
			Fsize *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"fsize,omitempty"`

			// Memlock Locked-in-memory address space
			Memlock *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"memlock,omitempty"`

			// Nofile Number of open files.
			Nofile *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"nofile,omitempty"`

			// Nproc Number of processes.
			Nproc *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"nproc,omitempty"`

			// Rss Largest resident set size, in bytes. This affects swapping; processes that are exceeding their resident set size will be more likely to have physical memory taken from them.
			Rss *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"rss,omitempty"`

			// Stack Maximum size of stack segment, in bytes.
			Stack *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"stack,omitempty"`
		} `json:"rlimits,omitempty"`

		// Script Job batch script; only the first component in a HetJob is populated or honored
		Script *string `json:"script,omitempty"`

		// SegmentSize Segment size for topology/block
		SegmentSize *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"segment_size,omitempty"`

		// SelinuxContext SELinux context
		SelinuxContext *string `json:"selinux_context,omitempty"`

		// Shared How the job can share resources with other jobs, if at all
		Shared *[]SlurmV0041PostJobAllocateJSONBodyHetjobShared `json:"shared,omitempty"`

		// SiteFactor Site-specific priority factor
		SiteFactor *int32 `json:"site_factor,omitempty"`

		// SocketsPerNode Sockets per node required
		SocketsPerNode *int32 `json:"sockets_per_node,omitempty"`

		// SpankEnvironment Environment variables for job prolog/epilog scripts as set by SPANK plugins
		SpankEnvironment *[]string `json:"spank_environment,omitempty"`

		// StandardError Path to stderr file
		StandardError *string `json:"standard_error,omitempty"`

		// StandardInput Path to stdin file
		StandardInput *string `json:"standard_input,omitempty"`

		// StandardOutput Path to stdout file
		StandardOutput *string `json:"standard_output,omitempty"`

		// Tasks Number of tasks
		Tasks *int32 `json:"tasks,omitempty"`

		// TasksPerBoard Number of tasks to invoke on each board
		TasksPerBoard *int32 `json:"tasks_per_board,omitempty"`

		// TasksPerCore Number of tasks to invoke on each core
		TasksPerCore *int32 `json:"tasks_per_core,omitempty"`

		// TasksPerNode Number of tasks to invoke on each node
		TasksPerNode *int32 `json:"tasks_per_node,omitempty"`

		// TasksPerSocket Number of tasks to invoke on each socket
		TasksPerSocket *int32 `json:"tasks_per_socket,omitempty"`

		// TemporaryDiskPerNode Minimum tmp disk space required per node
		TemporaryDiskPerNode *int32 `json:"temporary_disk_per_node,omitempty"`

		// ThreadSpecification Specialized thread count
		ThreadSpecification *int32 `json:"thread_specification,omitempty"`

		// ThreadsPerCore Threads per core required
		ThreadsPerCore *int32 `json:"threads_per_core,omitempty"`

		// TimeLimit Maximum run time in minutes
		TimeLimit *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"time_limit,omitempty"`

		// TimeMinimum Minimum run time in minutes
		TimeMinimum *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"time_minimum,omitempty"`

		// TresBind Task to TRES binding directives
		TresBind *string `json:"tres_bind,omitempty"`

		// TresFreq TRES frequency directives
		TresFreq *string `json:"tres_freq,omitempty"`

		// TresPerJob Comma separated list of TRES=# values to be allocated for every job
		TresPerJob *string `json:"tres_per_job,omitempty"`

		// TresPerNode Comma separated list of TRES=# values to be allocated for every node
		TresPerNode *string `json:"tres_per_node,omitempty"`

		// TresPerSocket Comma separated list of TRES=# values to be allocated for every socket
		TresPerSocket *string `json:"tres_per_socket,omitempty"`

		// TresPerTask Comma separated list of TRES=# values to be allocated for every task
		TresPerTask *string `json:"tres_per_task,omitempty"`

		// UserId User ID that owns the job
		UserId *string `json:"user_id,omitempty"`

		// WaitAllNodes If true, wait to start until after all nodes have booted
		WaitAllNodes *bool `json:"wait_all_nodes,omitempty"`

		// WaitForSwitch Maximum time to wait for switches in seconds
		WaitForSwitch *int32 `json:"wait_for_switch,omitempty"`

		// Wckey Workload characterization key
		Wckey *string `json:"wckey,omitempty"`

		// X11 X11 forwarding options
		X11 *[]SlurmV0041PostJobAllocateJSONBodyHetjobX11 `json:"x11,omitempty"`

		// X11MagicCookie Magic cookie for X11 forwarding
		X11MagicCookie *string `json:"x11_magic_cookie,omitempty"`

		// X11TargetHost Hostname or UNIX socket if x11_target_port=0
		X11TargetHost *string `json:"x11_target_host,omitempty"`

		// X11TargetPort TCP port
		X11TargetPort *int32 `json:"x11_target_port,omitempty"`
	} `json:"hetjob,omitempty"`

	// Job Job description
	Job *struct {
		// Account Account associated with the job
		Account *string `json:"account,omitempty"`

		// AccountGatherFrequency Job accounting and profiling sampling intervals in seconds
		AccountGatherFrequency *string `json:"account_gather_frequency,omitempty"`

		// AdminComment Arbitrary comment made by administrator
		AdminComment *string `json:"admin_comment,omitempty"`

		// AllocationNodeList Local node making the resource allocation
		AllocationNodeList *string `json:"allocation_node_list,omitempty"`

		// AllocationNodePort Port to send allocation confirmation to
		AllocationNodePort *int32 `json:"allocation_node_port,omitempty"`

		// Argv Arguments to the script
		Argv *[]string `json:"argv,omitempty"`

		// Array Job array index value specification
		Array *string `json:"array,omitempty"`

		// BatchFeatures Features required for batch script's node
		BatchFeatures *string `json:"batch_features,omitempty"`

		// BeginTime Defer the allocation of the job until the specified time (UNIX timestamp)
		BeginTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"begin_time,omitempty"`

		// BurstBuffer Burst buffer specifications
		BurstBuffer *string `json:"burst_buffer,omitempty"`

		// ClusterConstraint Required features that a federated cluster must have to have a sibling job submitted to it
		ClusterConstraint *string `json:"cluster_constraint,omitempty"`

		// Clusters Clusters that a federated job can run on
		Clusters *string `json:"clusters,omitempty"`

		// Comment Arbitrary comment made by user
		Comment *string `json:"comment,omitempty"`

		// Constraints Comma separated list of features that are required
		Constraints *string `json:"constraints,omitempty"`

		// Container Absolute path to OCI container bundle
		Container *string `json:"container,omitempty"`

		// ContainerId OCI container ID
		ContainerId *string `json:"container_id,omitempty"`

		// Contiguous True if job requires contiguous nodes
		Contiguous *bool `json:"contiguous,omitempty"`

		// CoreSpecification Specialized core count
		CoreSpecification *int32 `json:"core_specification,omitempty"`

		// CpuBinding Method for binding tasks to allocated CPUs
		CpuBinding *string `json:"cpu_binding,omitempty"`

		// CpuBindingFlags Flags for CPU binding
		CpuBindingFlags *[]SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags `json:"cpu_binding_flags,omitempty"`

		// CpuFrequency Requested CPU frequency range <p1>[-p2][:p3]
		CpuFrequency *string `json:"cpu_frequency,omitempty"`

		// CpusPerTask Number of CPUs required by each task
		CpusPerTask *int32 `json:"cpus_per_task,omitempty"`

		// CpusPerTres Semicolon delimited list of TRES=# values values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)
		CpusPerTres *string `json:"cpus_per_tres,omitempty"`

		// Crontab Specification for scrontab job
		Crontab *struct {
			// Command Command to run
			Command *string `json:"command,omitempty"`

			// DayOfMonth Ranged string specifying eligible day of month values (e.g. 0-10,29)
			DayOfMonth *string `json:"day_of_month,omitempty"`

			// DayOfWeek Ranged string specifying eligible day of week values (e.g.0-3,7)
			DayOfWeek *string `json:"day_of_week,omitempty"`

			// Flags Flags
			Flags *[]SlurmV0041PostJobAllocateJSONBodyJobCrontabFlags `json:"flags,omitempty"`

			// Hour Ranged string specifying eligible hour values (e.g. 0-5,23)
			Hour *string `json:"hour,omitempty"`
			Line *struct {
				// End End of this entry in file
				End *int32 `json:"end,omitempty"`

				// Start Start of this entry in file
				Start *int32 `json:"start,omitempty"`
			} `json:"line,omitempty"`

			// Minute Ranged string specifying eligible minute values (e.g. 0-10,50)
			Minute *string `json:"minute,omitempty"`

			// Month Ranged string specifying eligible month values (e.g. 0-5,12)
			Month *string `json:"month,omitempty"`

			// Specification Time specification (* means valid for all allowed values) - minute hour day_of_month month day_of_week
			Specification *string `json:"specification,omitempty"`
		} `json:"crontab,omitempty"`

		// CurrentWorkingDirectory Working directory to use for the job
		CurrentWorkingDirectory *string `json:"current_working_directory,omitempty"`

		// Deadline Latest time that the job may start (UNIX timestamp)
		Deadline *int64 `json:"deadline,omitempty"`

		// DelayBoot Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification
		DelayBoot *int32 `json:"delay_boot,omitempty"`

		// Dependency Other jobs that must meet certain criteria before this job can start
		Dependency *string `json:"dependency,omitempty"`

		// Distribution Layout
		Distribution *string `json:"distribution,omitempty"`

		// DistributionPlaneSize Plane size specification when distribution specifies plane
		DistributionPlaneSize *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"distribution_plane_size,omitempty"`

		// EndTime Expected end time (UNIX timestamp)
		EndTime *int64 `json:"end_time,omitempty"`

		// Environment Environment variables to be set for the job
		Environment *[]string `json:"environment,omitempty"`

		// ExcludedNodes Comma separated list of nodes that may not be used
		ExcludedNodes *[]string `json:"excluded_nodes,omitempty"`
		// Deprecated:
		Exclusive *[]SlurmV0041PostJobAllocateJSONBodyJobExclusive `json:"exclusive,omitempty"`

		// Extra Arbitrary string used for node filtering if extra constraints are enabled
		Extra *string `json:"extra,omitempty"`

		// Flags Job flags
		Flags *[]SlurmV0041PostJobAllocateJSONBodyJobFlags `json:"flags,omitempty"`

		// GroupId Group ID of the user that owns the job
		GroupId *string `json:"group_id,omitempty"`

		// HetjobGroup Unique sequence number applied to this component of the heterogeneous job
		HetjobGroup *int32 `json:"hetjob_group,omitempty"`

		// Hold Hold (true) or release (false) job
		Hold *bool `json:"hold,omitempty"`

		// Immediate If true, exit if resources are not available within the time period specified
		Immediate *bool `json:"immediate,omitempty"`

		// JobId Job ID
		JobId *int32 `json:"job_id,omitempty"`

		// KillOnNodeFail If true, kill job on node failure
		KillOnNodeFail *bool `json:"kill_on_node_fail,omitempty"`

		// KillWarningDelay Number of seconds before end time to send the warning signal
		KillWarningDelay *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"kill_warning_delay,omitempty"`

		// KillWarningFlags Flags related to job signals
		KillWarningFlags *[]SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags `json:"kill_warning_flags,omitempty"`

		// KillWarningSignal Signal to send when approaching end time (e.g. "10" or "USR1")
		KillWarningSignal *string `json:"kill_warning_signal,omitempty"`

		// Licenses License(s) required by the job
		Licenses *string `json:"licenses,omitempty"`

		// MailType Mail event type(s)
		MailType *[]SlurmV0041PostJobAllocateJSONBodyJobMailType `json:"mail_type,omitempty"`

		// MailUser User to receive email notifications
		MailUser *string `json:"mail_user,omitempty"`

		// MaximumCpus Maximum number of CPUs required
		MaximumCpus *int32 `json:"maximum_cpus,omitempty"`

		// MaximumNodes Maximum node count
		MaximumNodes *int32 `json:"maximum_nodes,omitempty"`

		// McsLabel Multi-Category Security label on the job
		McsLabel *string `json:"mcs_label,omitempty"`

		// MemoryBinding Binding map for map/mask_cpu
		MemoryBinding *string `json:"memory_binding,omitempty"`

		// MemoryBindingType Method for binding tasks to memory
		MemoryBindingType *[]SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingType `json:"memory_binding_type,omitempty"`

		// MemoryPerCpu Minimum memory in megabytes per allocated CPU
		MemoryPerCpu *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"memory_per_cpu,omitempty"`

		// MemoryPerNode Minimum memory in megabytes per allocated CPU
		MemoryPerNode *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"memory_per_node,omitempty"`

		// MemoryPerTres Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)
		MemoryPerTres *string `json:"memory_per_tres,omitempty"`

		// MinimumBoardsPerNode Boards per node required
		MinimumBoardsPerNode *int32 `json:"minimum_boards_per_node,omitempty"`

		// MinimumCpus Minimum number of CPUs required
		MinimumCpus *int32 `json:"minimum_cpus,omitempty"`

		// MinimumCpusPerNode Minimum number of CPUs per node
		MinimumCpusPerNode *int32 `json:"minimum_cpus_per_node,omitempty"`

		// MinimumNodes Minimum node count
		MinimumNodes *int32 `json:"minimum_nodes,omitempty"`

		// MinimumSocketsPerBoard Sockets per board required
		MinimumSocketsPerBoard *int32 `json:"minimum_sockets_per_board,omitempty"`

		// Name Job name
		Name *string `json:"name,omitempty"`

		// Network Network specs for job step
		Network *string `json:"network,omitempty"`

		// Nice Requested job priority change
		Nice *int32 `json:"nice,omitempty"`

		// Nodes Node count range specification (e.g. 1-15:4)
		Nodes *string `json:"nodes,omitempty"`

		// NtasksPerTres Number of tasks that can access each GPU
		NtasksPerTres *int32 `json:"ntasks_per_tres,omitempty"`

		// OpenMode Open mode used for stdout and stderr files
		OpenMode *[]SlurmV0041PostJobAllocateJSONBodyJobOpenMode `json:"open_mode,omitempty"`

		// Overcommit Overcommit resources
		Overcommit *bool `json:"overcommit,omitempty"`
		// Deprecated:
		Oversubscribe *bool `json:"oversubscribe,omitempty"`

		// Partition Partition assigned to the job
		Partition *string `json:"partition,omitempty"`
		// Deprecated:
		PowerFlags *[]interface{} `json:"power_flags,omitempty"`

		// Prefer Comma separated list of features that are preferred but not required
		Prefer *string `json:"prefer,omitempty"`

		// Priority Request specific job priority
		Priority *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"priority,omitempty"`

		// Profile Profile used by the acct_gather_profile plugin
		Profile *[]SlurmV0041PostJobAllocateJSONBodyJobProfile `json:"profile,omitempty"`

		// Qos Quality of Service assigned to the job
		Qos *string `json:"qos,omitempty"`

		// Reboot Node reboot requested before start
		Reboot *bool `json:"reboot,omitempty"`

		// Requeue Determines whether the job may be requeued
		Requeue *bool `json:"requeue,omitempty"`

		// RequiredNodes Comma separated list of required nodes
		RequiredNodes *[]string `json:"required_nodes,omitempty"`

		// RequiredSwitches Maximum number of switches
		RequiredSwitches *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"required_switches,omitempty"`

		// Reservation Name of reservation to use
		Reservation *string `json:"reservation,omitempty"`

		// ReservePorts Port to send various notification msg to
		ReservePorts *int32 `json:"reserve_ports,omitempty"`

		// ResvMpiPorts Number of reserved communication ports; can only be used if slurmstepd step manager is enabled
		ResvMpiPorts *int32 `json:"resv_mpi_ports,omitempty"`
		Rlimits      *struct {
			// As Address space limit.
			As *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"as,omitempty"`

			// Core Largest core file that can be created, in bytes.
			Core *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"core,omitempty"`

			// Cpu Per-process CPU limit, in seconds.
			Cpu *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"cpu,omitempty"`

			// Data Maximum size of data segment, in bytes.
			Data *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"data,omitempty"`

			// Fsize Largest file that can be created, in bytes.
			Fsize *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"fsize,omitempty"`

			// Memlock Locked-in-memory address space
			Memlock *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"memlock,omitempty"`

			// Nofile Number of open files.
			Nofile *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"nofile,omitempty"`

			// Nproc Number of processes.
			Nproc *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"nproc,omitempty"`

			// Rss Largest resident set size, in bytes. This affects swapping; processes that are exceeding their resident set size will be more likely to have physical memory taken from them.
			Rss *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"rss,omitempty"`

			// Stack Maximum size of stack segment, in bytes.
			Stack *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"stack,omitempty"`
		} `json:"rlimits,omitempty"`

		// Script Job batch script; only the first component in a HetJob is populated or honored
		Script *string `json:"script,omitempty"`

		// SegmentSize Segment size for topology/block
		SegmentSize *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"segment_size,omitempty"`

		// SelinuxContext SELinux context
		SelinuxContext *string `json:"selinux_context,omitempty"`

		// Shared How the job can share resources with other jobs, if at all
		Shared *[]SlurmV0041PostJobAllocateJSONBodyJobShared `json:"shared,omitempty"`

		// SiteFactor Site-specific priority factor
		SiteFactor *int32 `json:"site_factor,omitempty"`

		// SocketsPerNode Sockets per node required
		SocketsPerNode *int32 `json:"sockets_per_node,omitempty"`

		// SpankEnvironment Environment variables for job prolog/epilog scripts as set by SPANK plugins
		SpankEnvironment *[]string `json:"spank_environment,omitempty"`

		// StandardError Path to stderr file
		StandardError *string `json:"standard_error,omitempty"`

		// StandardInput Path to stdin file
		StandardInput *string `json:"standard_input,omitempty"`

		// StandardOutput Path to stdout file
		StandardOutput *string `json:"standard_output,omitempty"`

		// Tasks Number of tasks
		Tasks *int32 `json:"tasks,omitempty"`

		// TasksPerBoard Number of tasks to invoke on each board
		TasksPerBoard *int32 `json:"tasks_per_board,omitempty"`

		// TasksPerCore Number of tasks to invoke on each core
		TasksPerCore *int32 `json:"tasks_per_core,omitempty"`

		// TasksPerNode Number of tasks to invoke on each node
		TasksPerNode *int32 `json:"tasks_per_node,omitempty"`

		// TasksPerSocket Number of tasks to invoke on each socket
		TasksPerSocket *int32 `json:"tasks_per_socket,omitempty"`

		// TemporaryDiskPerNode Minimum tmp disk space required per node
		TemporaryDiskPerNode *int32 `json:"temporary_disk_per_node,omitempty"`

		// ThreadSpecification Specialized thread count
		ThreadSpecification *int32 `json:"thread_specification,omitempty"`

		// ThreadsPerCore Threads per core required
		ThreadsPerCore *int32 `json:"threads_per_core,omitempty"`

		// TimeLimit Maximum run time in minutes
		TimeLimit *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"time_limit,omitempty"`

		// TimeMinimum Minimum run time in minutes
		TimeMinimum *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"time_minimum,omitempty"`

		// TresBind Task to TRES binding directives
		TresBind *string `json:"tres_bind,omitempty"`

		// TresFreq TRES frequency directives
		TresFreq *string `json:"tres_freq,omitempty"`

		// TresPerJob Comma separated list of TRES=# values to be allocated for every job
		TresPerJob *string `json:"tres_per_job,omitempty"`

		// TresPerNode Comma separated list of TRES=# values to be allocated for every node
		TresPerNode *string `json:"tres_per_node,omitempty"`

		// TresPerSocket Comma separated list of TRES=# values to be allocated for every socket
		TresPerSocket *string `json:"tres_per_socket,omitempty"`

		// TresPerTask Comma separated list of TRES=# values to be allocated for every task
		TresPerTask *string `json:"tres_per_task,omitempty"`

		// UserId User ID that owns the job
		UserId *string `json:"user_id,omitempty"`

		// WaitAllNodes If true, wait to start until after all nodes have booted
		WaitAllNodes *bool `json:"wait_all_nodes,omitempty"`

		// WaitForSwitch Maximum time to wait for switches in seconds
		WaitForSwitch *int32 `json:"wait_for_switch,omitempty"`

		// Wckey Workload characterization key
		Wckey *string `json:"wckey,omitempty"`

		// X11 X11 forwarding options
		X11 *[]SlurmV0041PostJobAllocateJSONBodyJobX11 `json:"x11,omitempty"`

		// X11MagicCookie Magic cookie for X11 forwarding
		X11MagicCookie *string `json:"x11_magic_cookie,omitempty"`

		// X11TargetHost Hostname or UNIX socket if x11_target_port=0
		X11TargetHost *string `json:"x11_target_host,omitempty"`

		// X11TargetPort TCP port
		X11TargetPort *int32 `json:"x11_target_port,omitempty"`
	} `json:"job,omitempty"`
}

// SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyHetjobCpuBindingFlags string

// SlurmV0041PostJobAllocateJSONBodyHetjobCrontabFlags defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyHetjobCrontabFlags string

// SlurmV0041PostJobAllocateJSONBodyHetjobExclusive defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyHetjobExclusive string

// SlurmV0041PostJobAllocateJSONBodyHetjobFlags defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyHetjobFlags string

// SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyHetjobKillWarningFlags string

// SlurmV0041PostJobAllocateJSONBodyHetjobMailType defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyHetjobMailType string

// SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingType defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyHetjobMemoryBindingType string

// SlurmV0041PostJobAllocateJSONBodyHetjobOpenMode defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyHetjobOpenMode string

// SlurmV0041PostJobAllocateJSONBodyHetjobProfile defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyHetjobProfile string

// SlurmV0041PostJobAllocateJSONBodyHetjobShared defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyHetjobShared string

// SlurmV0041PostJobAllocateJSONBodyHetjobX11 defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyHetjobX11 string

// SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyJobCpuBindingFlags string

// SlurmV0041PostJobAllocateJSONBodyJobCrontabFlags defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyJobCrontabFlags string

// SlurmV0041PostJobAllocateJSONBodyJobExclusive defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyJobExclusive string

// SlurmV0041PostJobAllocateJSONBodyJobFlags defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyJobFlags string

// SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyJobKillWarningFlags string

// SlurmV0041PostJobAllocateJSONBodyJobMailType defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyJobMailType string

// SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingType defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyJobMemoryBindingType string

// SlurmV0041PostJobAllocateJSONBodyJobOpenMode defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyJobOpenMode string

// SlurmV0041PostJobAllocateJSONBodyJobProfile defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyJobProfile string

// SlurmV0041PostJobAllocateJSONBodyJobShared defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyJobShared string

// SlurmV0041PostJobAllocateJSONBodyJobX11 defines parameters for SlurmV0041PostJobAllocate.
type SlurmV0041PostJobAllocateJSONBodyJobX11 string

// SlurmV0041PostJobSubmitJSONBody defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBody struct {
	// Job Job description
	Job *struct {
		// Account Account associated with the job
		Account *string `json:"account,omitempty"`

		// AccountGatherFrequency Job accounting and profiling sampling intervals in seconds
		AccountGatherFrequency *string `json:"account_gather_frequency,omitempty"`

		// AdminComment Arbitrary comment made by administrator
		AdminComment *string `json:"admin_comment,omitempty"`

		// AllocationNodeList Local node making the resource allocation
		AllocationNodeList *string `json:"allocation_node_list,omitempty"`

		// AllocationNodePort Port to send allocation confirmation to
		AllocationNodePort *int32 `json:"allocation_node_port,omitempty"`

		// Argv Arguments to the script
		Argv *[]string `json:"argv,omitempty"`

		// Array Job array index value specification
		Array *string `json:"array,omitempty"`

		// BatchFeatures Features required for batch script's node
		BatchFeatures *string `json:"batch_features,omitempty"`

		// BeginTime Defer the allocation of the job until the specified time (UNIX timestamp)
		BeginTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"begin_time,omitempty"`

		// BurstBuffer Burst buffer specifications
		BurstBuffer *string `json:"burst_buffer,omitempty"`

		// ClusterConstraint Required features that a federated cluster must have to have a sibling job submitted to it
		ClusterConstraint *string `json:"cluster_constraint,omitempty"`

		// Clusters Clusters that a federated job can run on
		Clusters *string `json:"clusters,omitempty"`

		// Comment Arbitrary comment made by user
		Comment *string `json:"comment,omitempty"`

		// Constraints Comma separated list of features that are required
		Constraints *string `json:"constraints,omitempty"`

		// Container Absolute path to OCI container bundle
		Container *string `json:"container,omitempty"`

		// ContainerId OCI container ID
		ContainerId *string `json:"container_id,omitempty"`

		// Contiguous True if job requires contiguous nodes
		Contiguous *bool `json:"contiguous,omitempty"`

		// CoreSpecification Specialized core count
		CoreSpecification *int32 `json:"core_specification,omitempty"`

		// CpuBinding Method for binding tasks to allocated CPUs
		CpuBinding *string `json:"cpu_binding,omitempty"`

		// CpuBindingFlags Flags for CPU binding
		CpuBindingFlags *[]SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags `json:"cpu_binding_flags,omitempty"`

		// CpuFrequency Requested CPU frequency range <p1>[-p2][:p3]
		CpuFrequency *string `json:"cpu_frequency,omitempty"`

		// CpusPerTask Number of CPUs required by each task
		CpusPerTask *int32 `json:"cpus_per_task,omitempty"`

		// CpusPerTres Semicolon delimited list of TRES=# values values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)
		CpusPerTres *string `json:"cpus_per_tres,omitempty"`

		// Crontab Specification for scrontab job
		Crontab *struct {
			// Command Command to run
			Command *string `json:"command,omitempty"`

			// DayOfMonth Ranged string specifying eligible day of month values (e.g. 0-10,29)
			DayOfMonth *string `json:"day_of_month,omitempty"`

			// DayOfWeek Ranged string specifying eligible day of week values (e.g.0-3,7)
			DayOfWeek *string `json:"day_of_week,omitempty"`

			// Flags Flags
			Flags *[]SlurmV0041PostJobSubmitJSONBodyJobCrontabFlags `json:"flags,omitempty"`

			// Hour Ranged string specifying eligible hour values (e.g. 0-5,23)
			Hour *string `json:"hour,omitempty"`
			Line *struct {
				// End End of this entry in file
				End *int32 `json:"end,omitempty"`

				// Start Start of this entry in file
				Start *int32 `json:"start,omitempty"`
			} `json:"line,omitempty"`

			// Minute Ranged string specifying eligible minute values (e.g. 0-10,50)
			Minute *string `json:"minute,omitempty"`

			// Month Ranged string specifying eligible month values (e.g. 0-5,12)
			Month *string `json:"month,omitempty"`

			// Specification Time specification (* means valid for all allowed values) - minute hour day_of_month month day_of_week
			Specification *string `json:"specification,omitempty"`
		} `json:"crontab,omitempty"`

		// CurrentWorkingDirectory Working directory to use for the job
		CurrentWorkingDirectory *string `json:"current_working_directory,omitempty"`

		// Deadline Latest time that the job may start (UNIX timestamp)
		Deadline *int64 `json:"deadline,omitempty"`

		// DelayBoot Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification
		DelayBoot *int32 `json:"delay_boot,omitempty"`

		// Dependency Other jobs that must meet certain criteria before this job can start
		Dependency *string `json:"dependency,omitempty"`

		// Distribution Layout
		Distribution *string `json:"distribution,omitempty"`

		// DistributionPlaneSize Plane size specification when distribution specifies plane
		DistributionPlaneSize *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"distribution_plane_size,omitempty"`

		// EndTime Expected end time (UNIX timestamp)
		EndTime *int64 `json:"end_time,omitempty"`

		// Environment Environment variables to be set for the job
		Environment *[]string `json:"environment,omitempty"`

		// ExcludedNodes Comma separated list of nodes that may not be used
		ExcludedNodes *[]string `json:"excluded_nodes,omitempty"`
		// Deprecated:
		Exclusive *[]SlurmV0041PostJobSubmitJSONBodyJobExclusive `json:"exclusive,omitempty"`

		// Extra Arbitrary string used for node filtering if extra constraints are enabled
		Extra *string `json:"extra,omitempty"`

		// Flags Job flags
		Flags *[]SlurmV0041PostJobSubmitJSONBodyJobFlags `json:"flags,omitempty"`

		// GroupId Group ID of the user that owns the job
		GroupId *string `json:"group_id,omitempty"`

		// HetjobGroup Unique sequence number applied to this component of the heterogeneous job
		HetjobGroup *int32 `json:"hetjob_group,omitempty"`

		// Hold Hold (true) or release (false) job
		Hold *bool `json:"hold,omitempty"`

		// Immediate If true, exit if resources are not available within the time period specified
		Immediate *bool `json:"immediate,omitempty"`

		// JobId Job ID
		JobId *int32 `json:"job_id,omitempty"`

		// KillOnNodeFail If true, kill job on node failure
		KillOnNodeFail *bool `json:"kill_on_node_fail,omitempty"`

		// KillWarningDelay Number of seconds before end time to send the warning signal
		KillWarningDelay *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"kill_warning_delay,omitempty"`

		// KillWarningFlags Flags related to job signals
		KillWarningFlags *[]SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags `json:"kill_warning_flags,omitempty"`

		// KillWarningSignal Signal to send when approaching end time (e.g. "10" or "USR1")
		KillWarningSignal *string `json:"kill_warning_signal,omitempty"`

		// Licenses License(s) required by the job
		Licenses *string `json:"licenses,omitempty"`

		// MailType Mail event type(s)
		MailType *[]SlurmV0041PostJobSubmitJSONBodyJobMailType `json:"mail_type,omitempty"`

		// MailUser User to receive email notifications
		MailUser *string `json:"mail_user,omitempty"`

		// MaximumCpus Maximum number of CPUs required
		MaximumCpus *int32 `json:"maximum_cpus,omitempty"`

		// MaximumNodes Maximum node count
		MaximumNodes *int32 `json:"maximum_nodes,omitempty"`

		// McsLabel Multi-Category Security label on the job
		McsLabel *string `json:"mcs_label,omitempty"`

		// MemoryBinding Binding map for map/mask_cpu
		MemoryBinding *string `json:"memory_binding,omitempty"`

		// MemoryBindingType Method for binding tasks to memory
		MemoryBindingType *[]SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingType `json:"memory_binding_type,omitempty"`

		// MemoryPerCpu Minimum memory in megabytes per allocated CPU
		MemoryPerCpu *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"memory_per_cpu,omitempty"`

		// MemoryPerNode Minimum memory in megabytes per allocated CPU
		MemoryPerNode *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"memory_per_node,omitempty"`

		// MemoryPerTres Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)
		MemoryPerTres *string `json:"memory_per_tres,omitempty"`

		// MinimumBoardsPerNode Boards per node required
		MinimumBoardsPerNode *int32 `json:"minimum_boards_per_node,omitempty"`

		// MinimumCpus Minimum number of CPUs required
		MinimumCpus *int32 `json:"minimum_cpus,omitempty"`

		// MinimumCpusPerNode Minimum number of CPUs per node
		MinimumCpusPerNode *int32 `json:"minimum_cpus_per_node,omitempty"`

		// MinimumNodes Minimum node count
		MinimumNodes *int32 `json:"minimum_nodes,omitempty"`

		// MinimumSocketsPerBoard Sockets per board required
		MinimumSocketsPerBoard *int32 `json:"minimum_sockets_per_board,omitempty"`

		// Name Job name
		Name *string `json:"name,omitempty"`

		// Network Network specs for job step
		Network *string `json:"network,omitempty"`

		// Nice Requested job priority change
		Nice *int32 `json:"nice,omitempty"`

		// Nodes Node count range specification (e.g. 1-15:4)
		Nodes *string `json:"nodes,omitempty"`

		// NtasksPerTres Number of tasks that can access each GPU
		NtasksPerTres *int32 `json:"ntasks_per_tres,omitempty"`

		// OpenMode Open mode used for stdout and stderr files
		OpenMode *[]SlurmV0041PostJobSubmitJSONBodyJobOpenMode `json:"open_mode,omitempty"`

		// Overcommit Overcommit resources
		Overcommit *bool `json:"overcommit,omitempty"`
		// Deprecated:
		Oversubscribe *bool `json:"oversubscribe,omitempty"`

		// Partition Partition assigned to the job
		Partition *string `json:"partition,omitempty"`
		// Deprecated:
		PowerFlags *[]interface{} `json:"power_flags,omitempty"`

		// Prefer Comma separated list of features that are preferred but not required
		Prefer *string `json:"prefer,omitempty"`

		// Priority Request specific job priority
		Priority *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"priority,omitempty"`

		// Profile Profile used by the acct_gather_profile plugin
		Profile *[]SlurmV0041PostJobSubmitJSONBodyJobProfile `json:"profile,omitempty"`

		// Qos Quality of Service assigned to the job
		Qos *string `json:"qos,omitempty"`

		// Reboot Node reboot requested before start
		Reboot *bool `json:"reboot,omitempty"`

		// Requeue Determines whether the job may be requeued
		Requeue *bool `json:"requeue,omitempty"`

		// RequiredNodes Comma separated list of required nodes
		RequiredNodes *[]string `json:"required_nodes,omitempty"`

		// RequiredSwitches Maximum number of switches
		RequiredSwitches *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"required_switches,omitempty"`

		// Reservation Name of reservation to use
		Reservation *string `json:"reservation,omitempty"`

		// ReservePorts Port to send various notification msg to
		ReservePorts *int32 `json:"reserve_ports,omitempty"`

		// ResvMpiPorts Number of reserved communication ports; can only be used if slurmstepd step manager is enabled
		ResvMpiPorts *int32 `json:"resv_mpi_ports,omitempty"`
		Rlimits      *struct {
			// As Address space limit.
			As *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"as,omitempty"`

			// Core Largest core file that can be created, in bytes.
			Core *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"core,omitempty"`

			// Cpu Per-process CPU limit, in seconds.
			Cpu *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"cpu,omitempty"`

			// Data Maximum size of data segment, in bytes.
			Data *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"data,omitempty"`

			// Fsize Largest file that can be created, in bytes.
			Fsize *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"fsize,omitempty"`

			// Memlock Locked-in-memory address space
			Memlock *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"memlock,omitempty"`

			// Nofile Number of open files.
			Nofile *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"nofile,omitempty"`

			// Nproc Number of processes.
			Nproc *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"nproc,omitempty"`

			// Rss Largest resident set size, in bytes. This affects swapping; processes that are exceeding their resident set size will be more likely to have physical memory taken from them.
			Rss *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"rss,omitempty"`

			// Stack Maximum size of stack segment, in bytes.
			Stack *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"stack,omitempty"`
		} `json:"rlimits,omitempty"`

		// Script Job batch script; only the first component in a HetJob is populated or honored
		Script *string `json:"script,omitempty"`

		// SegmentSize Segment size for topology/block
		SegmentSize *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"segment_size,omitempty"`

		// SelinuxContext SELinux context
		SelinuxContext *string `json:"selinux_context,omitempty"`

		// Shared How the job can share resources with other jobs, if at all
		Shared *[]SlurmV0041PostJobSubmitJSONBodyJobShared `json:"shared,omitempty"`

		// SiteFactor Site-specific priority factor
		SiteFactor *int32 `json:"site_factor,omitempty"`

		// SocketsPerNode Sockets per node required
		SocketsPerNode *int32 `json:"sockets_per_node,omitempty"`

		// SpankEnvironment Environment variables for job prolog/epilog scripts as set by SPANK plugins
		SpankEnvironment *[]string `json:"spank_environment,omitempty"`

		// StandardError Path to stderr file
		StandardError *string `json:"standard_error,omitempty"`

		// StandardInput Path to stdin file
		StandardInput *string `json:"standard_input,omitempty"`

		// StandardOutput Path to stdout file
		StandardOutput *string `json:"standard_output,omitempty"`

		// Tasks Number of tasks
		Tasks *int32 `json:"tasks,omitempty"`

		// TasksPerBoard Number of tasks to invoke on each board
		TasksPerBoard *int32 `json:"tasks_per_board,omitempty"`

		// TasksPerCore Number of tasks to invoke on each core
		TasksPerCore *int32 `json:"tasks_per_core,omitempty"`

		// TasksPerNode Number of tasks to invoke on each node
		TasksPerNode *int32 `json:"tasks_per_node,omitempty"`

		// TasksPerSocket Number of tasks to invoke on each socket
		TasksPerSocket *int32 `json:"tasks_per_socket,omitempty"`

		// TemporaryDiskPerNode Minimum tmp disk space required per node
		TemporaryDiskPerNode *int32 `json:"temporary_disk_per_node,omitempty"`

		// ThreadSpecification Specialized thread count
		ThreadSpecification *int32 `json:"thread_specification,omitempty"`

		// ThreadsPerCore Threads per core required
		ThreadsPerCore *int32 `json:"threads_per_core,omitempty"`

		// TimeLimit Maximum run time in minutes
		TimeLimit *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"time_limit,omitempty"`

		// TimeMinimum Minimum run time in minutes
		TimeMinimum *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"time_minimum,omitempty"`

		// TresBind Task to TRES binding directives
		TresBind *string `json:"tres_bind,omitempty"`

		// TresFreq TRES frequency directives
		TresFreq *string `json:"tres_freq,omitempty"`

		// TresPerJob Comma separated list of TRES=# values to be allocated for every job
		TresPerJob *string `json:"tres_per_job,omitempty"`

		// TresPerNode Comma separated list of TRES=# values to be allocated for every node
		TresPerNode *string `json:"tres_per_node,omitempty"`

		// TresPerSocket Comma separated list of TRES=# values to be allocated for every socket
		TresPerSocket *string `json:"tres_per_socket,omitempty"`

		// TresPerTask Comma separated list of TRES=# values to be allocated for every task
		TresPerTask *string `json:"tres_per_task,omitempty"`

		// UserId User ID that owns the job
		UserId *string `json:"user_id,omitempty"`

		// WaitAllNodes If true, wait to start until after all nodes have booted
		WaitAllNodes *bool `json:"wait_all_nodes,omitempty"`

		// WaitForSwitch Maximum time to wait for switches in seconds
		WaitForSwitch *int32 `json:"wait_for_switch,omitempty"`

		// Wckey Workload characterization key
		Wckey *string `json:"wckey,omitempty"`

		// X11 X11 forwarding options
		X11 *[]SlurmV0041PostJobSubmitJSONBodyJobX11 `json:"x11,omitempty"`

		// X11MagicCookie Magic cookie for X11 forwarding
		X11MagicCookie *string `json:"x11_magic_cookie,omitempty"`

		// X11TargetHost Hostname or UNIX socket if x11_target_port=0
		X11TargetHost *string `json:"x11_target_host,omitempty"`

		// X11TargetPort TCP port
		X11TargetPort *int32 `json:"x11_target_port,omitempty"`
	} `json:"job,omitempty"`

	// Jobs HetJob description
	Jobs *[]struct {
		// Account Account associated with the job
		Account *string `json:"account,omitempty"`

		// AccountGatherFrequency Job accounting and profiling sampling intervals in seconds
		AccountGatherFrequency *string `json:"account_gather_frequency,omitempty"`

		// AdminComment Arbitrary comment made by administrator
		AdminComment *string `json:"admin_comment,omitempty"`

		// AllocationNodeList Local node making the resource allocation
		AllocationNodeList *string `json:"allocation_node_list,omitempty"`

		// AllocationNodePort Port to send allocation confirmation to
		AllocationNodePort *int32 `json:"allocation_node_port,omitempty"`

		// Argv Arguments to the script
		Argv *[]string `json:"argv,omitempty"`

		// Array Job array index value specification
		Array *string `json:"array,omitempty"`

		// BatchFeatures Features required for batch script's node
		BatchFeatures *string `json:"batch_features,omitempty"`

		// BeginTime Defer the allocation of the job until the specified time (UNIX timestamp)
		BeginTime *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"begin_time,omitempty"`

		// BurstBuffer Burst buffer specifications
		BurstBuffer *string `json:"burst_buffer,omitempty"`

		// ClusterConstraint Required features that a federated cluster must have to have a sibling job submitted to it
		ClusterConstraint *string `json:"cluster_constraint,omitempty"`

		// Clusters Clusters that a federated job can run on
		Clusters *string `json:"clusters,omitempty"`

		// Comment Arbitrary comment made by user
		Comment *string `json:"comment,omitempty"`

		// Constraints Comma separated list of features that are required
		Constraints *string `json:"constraints,omitempty"`

		// Container Absolute path to OCI container bundle
		Container *string `json:"container,omitempty"`

		// ContainerId OCI container ID
		ContainerId *string `json:"container_id,omitempty"`

		// Contiguous True if job requires contiguous nodes
		Contiguous *bool `json:"contiguous,omitempty"`

		// CoreSpecification Specialized core count
		CoreSpecification *int32 `json:"core_specification,omitempty"`

		// CpuBinding Method for binding tasks to allocated CPUs
		CpuBinding *string `json:"cpu_binding,omitempty"`

		// CpuBindingFlags Flags for CPU binding
		CpuBindingFlags *[]SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags `json:"cpu_binding_flags,omitempty"`

		// CpuFrequency Requested CPU frequency range <p1>[-p2][:p3]
		CpuFrequency *string `json:"cpu_frequency,omitempty"`

		// CpusPerTask Number of CPUs required by each task
		CpusPerTask *int32 `json:"cpus_per_task,omitempty"`

		// CpusPerTres Semicolon delimited list of TRES=# values values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)
		CpusPerTres *string `json:"cpus_per_tres,omitempty"`

		// Crontab Specification for scrontab job
		Crontab *struct {
			// Command Command to run
			Command *string `json:"command,omitempty"`

			// DayOfMonth Ranged string specifying eligible day of month values (e.g. 0-10,29)
			DayOfMonth *string `json:"day_of_month,omitempty"`

			// DayOfWeek Ranged string specifying eligible day of week values (e.g.0-3,7)
			DayOfWeek *string `json:"day_of_week,omitempty"`

			// Flags Flags
			Flags *[]SlurmV0041PostJobSubmitJSONBodyJobsCrontabFlags `json:"flags,omitempty"`

			// Hour Ranged string specifying eligible hour values (e.g. 0-5,23)
			Hour *string `json:"hour,omitempty"`
			Line *struct {
				// End End of this entry in file
				End *int32 `json:"end,omitempty"`

				// Start Start of this entry in file
				Start *int32 `json:"start,omitempty"`
			} `json:"line,omitempty"`

			// Minute Ranged string specifying eligible minute values (e.g. 0-10,50)
			Minute *string `json:"minute,omitempty"`

			// Month Ranged string specifying eligible month values (e.g. 0-5,12)
			Month *string `json:"month,omitempty"`

			// Specification Time specification (* means valid for all allowed values) - minute hour day_of_month month day_of_week
			Specification *string `json:"specification,omitempty"`
		} `json:"crontab,omitempty"`

		// CurrentWorkingDirectory Working directory to use for the job
		CurrentWorkingDirectory *string `json:"current_working_directory,omitempty"`

		// Deadline Latest time that the job may start (UNIX timestamp)
		Deadline *int64 `json:"deadline,omitempty"`

		// DelayBoot Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification
		DelayBoot *int32 `json:"delay_boot,omitempty"`

		// Dependency Other jobs that must meet certain criteria before this job can start
		Dependency *string `json:"dependency,omitempty"`

		// Distribution Layout
		Distribution *string `json:"distribution,omitempty"`

		// DistributionPlaneSize Plane size specification when distribution specifies plane
		DistributionPlaneSize *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"distribution_plane_size,omitempty"`

		// EndTime Expected end time (UNIX timestamp)
		EndTime *int64 `json:"end_time,omitempty"`

		// Environment Environment variables to be set for the job
		Environment *[]string `json:"environment,omitempty"`

		// ExcludedNodes Comma separated list of nodes that may not be used
		ExcludedNodes *[]string `json:"excluded_nodes,omitempty"`
		// Deprecated:
		Exclusive *[]SlurmV0041PostJobSubmitJSONBodyJobsExclusive `json:"exclusive,omitempty"`

		// Extra Arbitrary string used for node filtering if extra constraints are enabled
		Extra *string `json:"extra,omitempty"`

		// Flags Job flags
		Flags *[]SlurmV0041PostJobSubmitJSONBodyJobsFlags `json:"flags,omitempty"`

		// GroupId Group ID of the user that owns the job
		GroupId *string `json:"group_id,omitempty"`

		// HetjobGroup Unique sequence number applied to this component of the heterogeneous job
		HetjobGroup *int32 `json:"hetjob_group,omitempty"`

		// Hold Hold (true) or release (false) job
		Hold *bool `json:"hold,omitempty"`

		// Immediate If true, exit if resources are not available within the time period specified
		Immediate *bool `json:"immediate,omitempty"`

		// JobId Job ID
		JobId *int32 `json:"job_id,omitempty"`

		// KillOnNodeFail If true, kill job on node failure
		KillOnNodeFail *bool `json:"kill_on_node_fail,omitempty"`

		// KillWarningDelay Number of seconds before end time to send the warning signal
		KillWarningDelay *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"kill_warning_delay,omitempty"`

		// KillWarningFlags Flags related to job signals
		KillWarningFlags *[]SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags `json:"kill_warning_flags,omitempty"`

		// KillWarningSignal Signal to send when approaching end time (e.g. "10" or "USR1")
		KillWarningSignal *string `json:"kill_warning_signal,omitempty"`

		// Licenses License(s) required by the job
		Licenses *string `json:"licenses,omitempty"`

		// MailType Mail event type(s)
		MailType *[]SlurmV0041PostJobSubmitJSONBodyJobsMailType `json:"mail_type,omitempty"`

		// MailUser User to receive email notifications
		MailUser *string `json:"mail_user,omitempty"`

		// MaximumCpus Maximum number of CPUs required
		MaximumCpus *int32 `json:"maximum_cpus,omitempty"`

		// MaximumNodes Maximum node count
		MaximumNodes *int32 `json:"maximum_nodes,omitempty"`

		// McsLabel Multi-Category Security label on the job
		McsLabel *string `json:"mcs_label,omitempty"`

		// MemoryBinding Binding map for map/mask_cpu
		MemoryBinding *string `json:"memory_binding,omitempty"`

		// MemoryBindingType Method for binding tasks to memory
		MemoryBindingType *[]SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingType `json:"memory_binding_type,omitempty"`

		// MemoryPerCpu Minimum memory in megabytes per allocated CPU
		MemoryPerCpu *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"memory_per_cpu,omitempty"`

		// MemoryPerNode Minimum memory in megabytes per allocated CPU
		MemoryPerNode *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"memory_per_node,omitempty"`

		// MemoryPerTres Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)
		MemoryPerTres *string `json:"memory_per_tres,omitempty"`

		// MinimumBoardsPerNode Boards per node required
		MinimumBoardsPerNode *int32 `json:"minimum_boards_per_node,omitempty"`

		// MinimumCpus Minimum number of CPUs required
		MinimumCpus *int32 `json:"minimum_cpus,omitempty"`

		// MinimumCpusPerNode Minimum number of CPUs per node
		MinimumCpusPerNode *int32 `json:"minimum_cpus_per_node,omitempty"`

		// MinimumNodes Minimum node count
		MinimumNodes *int32 `json:"minimum_nodes,omitempty"`

		// MinimumSocketsPerBoard Sockets per board required
		MinimumSocketsPerBoard *int32 `json:"minimum_sockets_per_board,omitempty"`

		// Name Job name
		Name *string `json:"name,omitempty"`

		// Network Network specs for job step
		Network *string `json:"network,omitempty"`

		// Nice Requested job priority change
		Nice *int32 `json:"nice,omitempty"`

		// Nodes Node count range specification (e.g. 1-15:4)
		Nodes *string `json:"nodes,omitempty"`

		// NtasksPerTres Number of tasks that can access each GPU
		NtasksPerTres *int32 `json:"ntasks_per_tres,omitempty"`

		// OpenMode Open mode used for stdout and stderr files
		OpenMode *[]SlurmV0041PostJobSubmitJSONBodyJobsOpenMode `json:"open_mode,omitempty"`

		// Overcommit Overcommit resources
		Overcommit *bool `json:"overcommit,omitempty"`
		// Deprecated:
		Oversubscribe *bool `json:"oversubscribe,omitempty"`

		// Partition Partition assigned to the job
		Partition *string `json:"partition,omitempty"`
		// Deprecated:
		PowerFlags *[]interface{} `json:"power_flags,omitempty"`

		// Prefer Comma separated list of features that are preferred but not required
		Prefer *string `json:"prefer,omitempty"`

		// Priority Request specific job priority
		Priority *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"priority,omitempty"`

		// Profile Profile used by the acct_gather_profile plugin
		Profile *[]SlurmV0041PostJobSubmitJSONBodyJobsProfile `json:"profile,omitempty"`

		// Qos Quality of Service assigned to the job
		Qos *string `json:"qos,omitempty"`

		// Reboot Node reboot requested before start
		Reboot *bool `json:"reboot,omitempty"`

		// Requeue Determines whether the job may be requeued
		Requeue *bool `json:"requeue,omitempty"`

		// RequiredNodes Comma separated list of required nodes
		RequiredNodes *[]string `json:"required_nodes,omitempty"`

		// RequiredSwitches Maximum number of switches
		RequiredSwitches *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"required_switches,omitempty"`

		// Reservation Name of reservation to use
		Reservation *string `json:"reservation,omitempty"`

		// ReservePorts Port to send various notification msg to
		ReservePorts *int32 `json:"reserve_ports,omitempty"`

		// ResvMpiPorts Number of reserved communication ports; can only be used if slurmstepd step manager is enabled
		ResvMpiPorts *int32 `json:"resv_mpi_ports,omitempty"`
		Rlimits      *struct {
			// As Address space limit.
			As *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"as,omitempty"`

			// Core Largest core file that can be created, in bytes.
			Core *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"core,omitempty"`

			// Cpu Per-process CPU limit, in seconds.
			Cpu *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"cpu,omitempty"`

			// Data Maximum size of data segment, in bytes.
			Data *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"data,omitempty"`

			// Fsize Largest file that can be created, in bytes.
			Fsize *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"fsize,omitempty"`

			// Memlock Locked-in-memory address space
			Memlock *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"memlock,omitempty"`

			// Nofile Number of open files.
			Nofile *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"nofile,omitempty"`

			// Nproc Number of processes.
			Nproc *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"nproc,omitempty"`

			// Rss Largest resident set size, in bytes. This affects swapping; processes that are exceeding their resident set size will be more likely to have physical memory taken from them.
			Rss *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"rss,omitempty"`

			// Stack Maximum size of stack segment, in bytes.
			Stack *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int64 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"stack,omitempty"`
		} `json:"rlimits,omitempty"`

		// Script Job batch script; only the first component in a HetJob is populated or honored
		Script *string `json:"script,omitempty"`

		// SegmentSize Segment size for topology/block
		SegmentSize *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"segment_size,omitempty"`

		// SelinuxContext SELinux context
		SelinuxContext *string `json:"selinux_context,omitempty"`

		// Shared How the job can share resources with other jobs, if at all
		Shared *[]SlurmV0041PostJobSubmitJSONBodyJobsShared `json:"shared,omitempty"`

		// SiteFactor Site-specific priority factor
		SiteFactor *int32 `json:"site_factor,omitempty"`

		// SocketsPerNode Sockets per node required
		SocketsPerNode *int32 `json:"sockets_per_node,omitempty"`

		// SpankEnvironment Environment variables for job prolog/epilog scripts as set by SPANK plugins
		SpankEnvironment *[]string `json:"spank_environment,omitempty"`

		// StandardError Path to stderr file
		StandardError *string `json:"standard_error,omitempty"`

		// StandardInput Path to stdin file
		StandardInput *string `json:"standard_input,omitempty"`

		// StandardOutput Path to stdout file
		StandardOutput *string `json:"standard_output,omitempty"`

		// Tasks Number of tasks
		Tasks *int32 `json:"tasks,omitempty"`

		// TasksPerBoard Number of tasks to invoke on each board
		TasksPerBoard *int32 `json:"tasks_per_board,omitempty"`

		// TasksPerCore Number of tasks to invoke on each core
		TasksPerCore *int32 `json:"tasks_per_core,omitempty"`

		// TasksPerNode Number of tasks to invoke on each node
		TasksPerNode *int32 `json:"tasks_per_node,omitempty"`

		// TasksPerSocket Number of tasks to invoke on each socket
		TasksPerSocket *int32 `json:"tasks_per_socket,omitempty"`

		// TemporaryDiskPerNode Minimum tmp disk space required per node
		TemporaryDiskPerNode *int32 `json:"temporary_disk_per_node,omitempty"`

		// ThreadSpecification Specialized thread count
		ThreadSpecification *int32 `json:"thread_specification,omitempty"`

		// ThreadsPerCore Threads per core required
		ThreadsPerCore *int32 `json:"threads_per_core,omitempty"`

		// TimeLimit Maximum run time in minutes
		TimeLimit *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"time_limit,omitempty"`

		// TimeMinimum Minimum run time in minutes
		TimeMinimum *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int32 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"time_minimum,omitempty"`

		// TresBind Task to TRES binding directives
		TresBind *string `json:"tres_bind,omitempty"`

		// TresFreq TRES frequency directives
		TresFreq *string `json:"tres_freq,omitempty"`

		// TresPerJob Comma separated list of TRES=# values to be allocated for every job
		TresPerJob *string `json:"tres_per_job,omitempty"`

		// TresPerNode Comma separated list of TRES=# values to be allocated for every node
		TresPerNode *string `json:"tres_per_node,omitempty"`

		// TresPerSocket Comma separated list of TRES=# values to be allocated for every socket
		TresPerSocket *string `json:"tres_per_socket,omitempty"`

		// TresPerTask Comma separated list of TRES=# values to be allocated for every task
		TresPerTask *string `json:"tres_per_task,omitempty"`

		// UserId User ID that owns the job
		UserId *string `json:"user_id,omitempty"`

		// WaitAllNodes If true, wait to start until after all nodes have booted
		WaitAllNodes *bool `json:"wait_all_nodes,omitempty"`

		// WaitForSwitch Maximum time to wait for switches in seconds
		WaitForSwitch *int32 `json:"wait_for_switch,omitempty"`

		// Wckey Workload characterization key
		Wckey *string `json:"wckey,omitempty"`

		// X11 X11 forwarding options
		X11 *[]SlurmV0041PostJobSubmitJSONBodyJobsX11 `json:"x11,omitempty"`

		// X11MagicCookie Magic cookie for X11 forwarding
		X11MagicCookie *string `json:"x11_magic_cookie,omitempty"`

		// X11TargetHost Hostname or UNIX socket if x11_target_port=0
		X11TargetHost *string `json:"x11_target_host,omitempty"`

		// X11TargetPort TCP port
		X11TargetPort *int32 `json:"x11_target_port,omitempty"`
	} `json:"jobs,omitempty"`

	// Script Deprecated; Populate script field in jobs[0] or job
	// Deprecated:
	Script *string `json:"script,omitempty"`
}

// SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobCpuBindingFlags string

// SlurmV0041PostJobSubmitJSONBodyJobCrontabFlags defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobCrontabFlags string

// SlurmV0041PostJobSubmitJSONBodyJobExclusive defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobExclusive string

// SlurmV0041PostJobSubmitJSONBodyJobFlags defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobFlags string

// SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobKillWarningFlags string

// SlurmV0041PostJobSubmitJSONBodyJobMailType defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobMailType string

// SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingType defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobMemoryBindingType string

// SlurmV0041PostJobSubmitJSONBodyJobOpenMode defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobOpenMode string

// SlurmV0041PostJobSubmitJSONBodyJobProfile defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobProfile string

// SlurmV0041PostJobSubmitJSONBodyJobShared defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobShared string

// SlurmV0041PostJobSubmitJSONBodyJobX11 defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobX11 string

// SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobsCpuBindingFlags string

// SlurmV0041PostJobSubmitJSONBodyJobsCrontabFlags defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobsCrontabFlags string

// SlurmV0041PostJobSubmitJSONBodyJobsExclusive defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobsExclusive string

// SlurmV0041PostJobSubmitJSONBodyJobsFlags defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobsFlags string

// SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobsKillWarningFlags string

// SlurmV0041PostJobSubmitJSONBodyJobsMailType defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobsMailType string

// SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingType defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobsMemoryBindingType string

// SlurmV0041PostJobSubmitJSONBodyJobsOpenMode defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobsOpenMode string

// SlurmV0041PostJobSubmitJSONBodyJobsProfile defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobsProfile string

// SlurmV0041PostJobSubmitJSONBodyJobsShared defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobsShared string

// SlurmV0041PostJobSubmitJSONBodyJobsX11 defines parameters for SlurmV0041PostJobSubmit.
type SlurmV0041PostJobSubmitJSONBodyJobsX11 string

// SlurmV0041DeleteJobParams defines parameters for SlurmV0041DeleteJob.
type SlurmV0041DeleteJobParams struct {
	// Signal Signal to send to Job
	Signal *string `form:"signal,omitempty" json:"signal,omitempty"`

	// Flags Signalling flags
	Flags *SlurmV0041DeleteJobParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0041DeleteJobParamsFlags defines parameters for SlurmV0041DeleteJob.
type SlurmV0041DeleteJobParamsFlags string

// SlurmV0041GetJobParams defines parameters for SlurmV0041GetJob.
type SlurmV0041GetJobParams struct {
	// UpdateTime Filter jobs since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0041GetJobParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0041GetJobParamsFlags defines parameters for SlurmV0041GetJob.
type SlurmV0041GetJobParamsFlags string

// SlurmV0041PostJobJSONBody defines parameters for SlurmV0041PostJob.
type SlurmV0041PostJobJSONBody struct {
	// Account Account associated with the job
	Account *string `json:"account,omitempty"`

	// AccountGatherFrequency Job accounting and profiling sampling intervals in seconds
	AccountGatherFrequency *string `json:"account_gather_frequency,omitempty"`

	// AdminComment Arbitrary comment made by administrator
	AdminComment *string `json:"admin_comment,omitempty"`

	// AllocationNodeList Local node making the resource allocation
	AllocationNodeList *string `json:"allocation_node_list,omitempty"`

	// AllocationNodePort Port to send allocation confirmation to
	AllocationNodePort *int32 `json:"allocation_node_port,omitempty"`

	// Argv Arguments to the script
	Argv *[]string `json:"argv,omitempty"`

	// Array Job array index value specification
	Array *string `json:"array,omitempty"`

	// BatchFeatures Features required for batch script's node
	BatchFeatures *string `json:"batch_features,omitempty"`

	// BeginTime Defer the allocation of the job until the specified time (UNIX timestamp)
	BeginTime *struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int64 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"begin_time,omitempty"`

	// BurstBuffer Burst buffer specifications
	BurstBuffer *string `json:"burst_buffer,omitempty"`

	// ClusterConstraint Required features that a federated cluster must have to have a sibling job submitted to it
	ClusterConstraint *string `json:"cluster_constraint,omitempty"`

	// Clusters Clusters that a federated job can run on
	Clusters *string `json:"clusters,omitempty"`

	// Comment Arbitrary comment made by user
	Comment *string `json:"comment,omitempty"`

	// Constraints Comma separated list of features that are required
	Constraints *string `json:"constraints,omitempty"`

	// Container Absolute path to OCI container bundle
	Container *string `json:"container,omitempty"`

	// ContainerId OCI container ID
	ContainerId *string `json:"container_id,omitempty"`

	// Contiguous True if job requires contiguous nodes
	Contiguous *bool `json:"contiguous,omitempty"`

	// CoreSpecification Specialized core count
	CoreSpecification *int32 `json:"core_specification,omitempty"`

	// CpuBinding Method for binding tasks to allocated CPUs
	CpuBinding *string `json:"cpu_binding,omitempty"`

	// CpuBindingFlags Flags for CPU binding
	CpuBindingFlags *[]SlurmV0041PostJobJSONBodyCpuBindingFlags `json:"cpu_binding_flags,omitempty"`

	// CpuFrequency Requested CPU frequency range <p1>[-p2][:p3]
	CpuFrequency *string `json:"cpu_frequency,omitempty"`

	// CpusPerTask Number of CPUs required by each task
	CpusPerTask *int32 `json:"cpus_per_task,omitempty"`

	// CpusPerTres Semicolon delimited list of TRES=# values values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)
	CpusPerTres *string `json:"cpus_per_tres,omitempty"`

	// Crontab Specification for scrontab job
	Crontab *struct {
		// Command Command to run
		Command *string `json:"command,omitempty"`

		// DayOfMonth Ranged string specifying eligible day of month values (e.g. 0-10,29)
		DayOfMonth *string `json:"day_of_month,omitempty"`

		// DayOfWeek Ranged string specifying eligible day of week values (e.g.0-3,7)
		DayOfWeek *string `json:"day_of_week,omitempty"`

		// Flags Flags
		Flags *[]SlurmV0041PostJobJSONBodyCrontabFlags `json:"flags,omitempty"`

		// Hour Ranged string specifying eligible hour values (e.g. 0-5,23)
		Hour *string `json:"hour,omitempty"`
		Line *struct {
			// End End of this entry in file
			End *int32 `json:"end,omitempty"`

			// Start Start of this entry in file
			Start *int32 `json:"start,omitempty"`
		} `json:"line,omitempty"`

		// Minute Ranged string specifying eligible minute values (e.g. 0-10,50)
		Minute *string `json:"minute,omitempty"`

		// Month Ranged string specifying eligible month values (e.g. 0-5,12)
		Month *string `json:"month,omitempty"`

		// Specification Time specification (* means valid for all allowed values) - minute hour day_of_month month day_of_week
		Specification *string `json:"specification,omitempty"`
	} `json:"crontab,omitempty"`

	// CurrentWorkingDirectory Working directory to use for the job
	CurrentWorkingDirectory *string `json:"current_working_directory,omitempty"`

	// Deadline Latest time that the job may start (UNIX timestamp)
	Deadline *int64 `json:"deadline,omitempty"`

	// DelayBoot Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification
	DelayBoot *int32 `json:"delay_boot,omitempty"`

	// Dependency Other jobs that must meet certain criteria before this job can start
	Dependency *string `json:"dependency,omitempty"`

	// Distribution Layout
	Distribution *string `json:"distribution,omitempty"`

	// DistributionPlaneSize Plane size specification when distribution specifies plane
	DistributionPlaneSize *struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int32 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"distribution_plane_size,omitempty"`

	// EndTime Expected end time (UNIX timestamp)
	EndTime *int64 `json:"end_time,omitempty"`

	// Environment Environment variables to be set for the job
	Environment *[]string `json:"environment,omitempty"`

	// ExcludedNodes Comma separated list of nodes that may not be used
	ExcludedNodes *[]string `json:"excluded_nodes,omitempty"`
	// Deprecated:
	Exclusive *[]SlurmV0041PostJobJSONBodyExclusive `json:"exclusive,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`

	// Flags Job flags
	Flags *[]SlurmV0041PostJobJSONBodyFlags `json:"flags,omitempty"`

	// GroupId Group ID of the user that owns the job
	GroupId *string `json:"group_id,omitempty"`

	// HetjobGroup Unique sequence number applied to this component of the heterogeneous job
	HetjobGroup *int32 `json:"hetjob_group,omitempty"`

	// Hold Hold (true) or release (false) job
	Hold *bool `json:"hold,omitempty"`

	// Immediate If true, exit if resources are not available within the time period specified
	Immediate *bool `json:"immediate,omitempty"`

	// JobId Job ID
	JobId *int32 `json:"job_id,omitempty"`

	// KillOnNodeFail If true, kill job on node failure
	KillOnNodeFail *bool `json:"kill_on_node_fail,omitempty"`

	// KillWarningDelay Number of seconds before end time to send the warning signal
	KillWarningDelay *struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int32 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"kill_warning_delay,omitempty"`

	// KillWarningFlags Flags related to job signals
	KillWarningFlags *[]SlurmV0041PostJobJSONBodyKillWarningFlags `json:"kill_warning_flags,omitempty"`

	// KillWarningSignal Signal to send when approaching end time (e.g. "10" or "USR1")
	KillWarningSignal *string `json:"kill_warning_signal,omitempty"`

	// Licenses License(s) required by the job
	Licenses *string `json:"licenses,omitempty"`

	// MailType Mail event type(s)
	MailType *[]SlurmV0041PostJobJSONBodyMailType `json:"mail_type,omitempty"`

	// MailUser User to receive email notifications
	MailUser *string `json:"mail_user,omitempty"`

	// MaximumCpus Maximum number of CPUs required
	MaximumCpus *int32 `json:"maximum_cpus,omitempty"`

	// MaximumNodes Maximum node count
	MaximumNodes *int32 `json:"maximum_nodes,omitempty"`

	// McsLabel Multi-Category Security label on the job
	McsLabel *string `json:"mcs_label,omitempty"`

	// MemoryBinding Binding map for map/mask_cpu
	MemoryBinding *string `json:"memory_binding,omitempty"`

	// MemoryBindingType Method for binding tasks to memory
	MemoryBindingType *[]SlurmV0041PostJobJSONBodyMemoryBindingType `json:"memory_binding_type,omitempty"`

	// MemoryPerCpu Minimum memory in megabytes per allocated CPU
	MemoryPerCpu *struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int64 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"memory_per_cpu,omitempty"`

	// MemoryPerNode Minimum memory in megabytes per allocated CPU
	MemoryPerNode *struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int64 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"memory_per_node,omitempty"`

	// MemoryPerTres Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)
	MemoryPerTres *string `json:"memory_per_tres,omitempty"`

	// MinimumBoardsPerNode Boards per node required
	MinimumBoardsPerNode *int32 `json:"minimum_boards_per_node,omitempty"`

	// MinimumCpus Minimum number of CPUs required
	MinimumCpus *int32 `json:"minimum_cpus,omitempty"`

	// MinimumCpusPerNode Minimum number of CPUs per node
	MinimumCpusPerNode *int32 `json:"minimum_cpus_per_node,omitempty"`

	// MinimumNodes Minimum node count
	MinimumNodes *int32 `json:"minimum_nodes,omitempty"`

	// MinimumSocketsPerBoard Sockets per board required
	MinimumSocketsPerBoard *int32 `json:"minimum_sockets_per_board,omitempty"`

	// Name Job name
	Name *string `json:"name,omitempty"`

	// Network Network specs for job step
	Network *string `json:"network,omitempty"`

	// Nice Requested job priority change
	Nice *int32 `json:"nice,omitempty"`

	// Nodes Node count range specification (e.g. 1-15:4)
	Nodes *string `json:"nodes,omitempty"`

	// NtasksPerTres Number of tasks that can access each GPU
	NtasksPerTres *int32 `json:"ntasks_per_tres,omitempty"`

	// OpenMode Open mode used for stdout and stderr files
	OpenMode *[]SlurmV0041PostJobJSONBodyOpenMode `json:"open_mode,omitempty"`

	// Overcommit Overcommit resources
	Overcommit *bool `json:"overcommit,omitempty"`
	// Deprecated:
	Oversubscribe *bool `json:"oversubscribe,omitempty"`

	// Partition Partition assigned to the job
	Partition *string `json:"partition,omitempty"`
	// Deprecated:
	PowerFlags *[]interface{} `json:"power_flags,omitempty"`

	// Prefer Comma separated list of features that are preferred but not required
	Prefer *string `json:"prefer,omitempty"`

	// Priority Request specific job priority
	Priority *struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int32 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"priority,omitempty"`

	// Profile Profile used by the acct_gather_profile plugin
	Profile *[]SlurmV0041PostJobJSONBodyProfile `json:"profile,omitempty"`

	// Qos Quality of Service assigned to the job
	Qos *string `json:"qos,omitempty"`

	// Reboot Node reboot requested before start
	Reboot *bool `json:"reboot,omitempty"`

	// Requeue Determines whether the job may be requeued
	Requeue *bool `json:"requeue,omitempty"`

	// RequiredNodes Comma separated list of required nodes
	RequiredNodes *[]string `json:"required_nodes,omitempty"`

	// RequiredSwitches Maximum number of switches
	RequiredSwitches *struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int32 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"required_switches,omitempty"`

	// Reservation Name of reservation to use
	Reservation *string `json:"reservation,omitempty"`

	// ReservePorts Port to send various notification msg to
	ReservePorts *int32 `json:"reserve_ports,omitempty"`

	// ResvMpiPorts Number of reserved communication ports; can only be used if slurmstepd step manager is enabled
	ResvMpiPorts *int32 `json:"resv_mpi_ports,omitempty"`
	Rlimits      *struct {
		// As Address space limit.
		As *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"as,omitempty"`

		// Core Largest core file that can be created, in bytes.
		Core *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"core,omitempty"`

		// Cpu Per-process CPU limit, in seconds.
		Cpu *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"cpu,omitempty"`

		// Data Maximum size of data segment, in bytes.
		Data *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"data,omitempty"`

		// Fsize Largest file that can be created, in bytes.
		Fsize *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"fsize,omitempty"`

		// Memlock Locked-in-memory address space
		Memlock *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"memlock,omitempty"`

		// Nofile Number of open files.
		Nofile *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"nofile,omitempty"`

		// Nproc Number of processes.
		Nproc *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"nproc,omitempty"`

		// Rss Largest resident set size, in bytes. This affects swapping; processes that are exceeding their resident set size will be more likely to have physical memory taken from them.
		Rss *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"rss,omitempty"`

		// Stack Maximum size of stack segment, in bytes.
		Stack *struct {
			// Infinite True if number has been set to infinite; "set" and "number" will be ignored
			Infinite *bool `json:"infinite,omitempty"`

			// Number If "set" is True the number will be set with value; otherwise ignore number contents
			Number *int64 `json:"number,omitempty"`

			// Set True if number has been set; False if number is unset
			Set *bool `json:"set,omitempty"`
		} `json:"stack,omitempty"`
	} `json:"rlimits,omitempty"`

	// Script Job batch script; only the first component in a HetJob is populated or honored
	Script *string `json:"script,omitempty"`

	// SegmentSize Segment size for topology/block
	SegmentSize *struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int32 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"segment_size,omitempty"`

	// SelinuxContext SELinux context
	SelinuxContext *string `json:"selinux_context,omitempty"`

	// Shared How the job can share resources with other jobs, if at all
	Shared *[]SlurmV0041PostJobJSONBodyShared `json:"shared,omitempty"`

	// SiteFactor Site-specific priority factor
	SiteFactor *int32 `json:"site_factor,omitempty"`

	// SocketsPerNode Sockets per node required
	SocketsPerNode *int32 `json:"sockets_per_node,omitempty"`

	// SpankEnvironment Environment variables for job prolog/epilog scripts as set by SPANK plugins
	SpankEnvironment *[]string `json:"spank_environment,omitempty"`

	// StandardError Path to stderr file
	StandardError *string `json:"standard_error,omitempty"`

	// StandardInput Path to stdin file
	StandardInput *string `json:"standard_input,omitempty"`

	// StandardOutput Path to stdout file
	StandardOutput *string `json:"standard_output,omitempty"`

	// Tasks Number of tasks
	Tasks *int32 `json:"tasks,omitempty"`

	// TasksPerBoard Number of tasks to invoke on each board
	TasksPerBoard *int32 `json:"tasks_per_board,omitempty"`

	// TasksPerCore Number of tasks to invoke on each core
	TasksPerCore *int32 `json:"tasks_per_core,omitempty"`

	// TasksPerNode Number of tasks to invoke on each node
	TasksPerNode *int32 `json:"tasks_per_node,omitempty"`

	// TasksPerSocket Number of tasks to invoke on each socket
	TasksPerSocket *int32 `json:"tasks_per_socket,omitempty"`

	// TemporaryDiskPerNode Minimum tmp disk space required per node
	TemporaryDiskPerNode *int32 `json:"temporary_disk_per_node,omitempty"`

	// ThreadSpecification Specialized thread count
	ThreadSpecification *int32 `json:"thread_specification,omitempty"`

	// ThreadsPerCore Threads per core required
	ThreadsPerCore *int32 `json:"threads_per_core,omitempty"`

	// TimeLimit Maximum run time in minutes
	TimeLimit *struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int32 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"time_limit,omitempty"`

	// TimeMinimum Minimum run time in minutes
	TimeMinimum *struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int32 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"time_minimum,omitempty"`

	// TresBind Task to TRES binding directives
	TresBind *string `json:"tres_bind,omitempty"`

	// TresFreq TRES frequency directives
	TresFreq *string `json:"tres_freq,omitempty"`

	// TresPerJob Comma separated list of TRES=# values to be allocated for every job
	TresPerJob *string `json:"tres_per_job,omitempty"`

	// TresPerNode Comma separated list of TRES=# values to be allocated for every node
	TresPerNode *string `json:"tres_per_node,omitempty"`

	// TresPerSocket Comma separated list of TRES=# values to be allocated for every socket
	TresPerSocket *string `json:"tres_per_socket,omitempty"`

	// TresPerTask Comma separated list of TRES=# values to be allocated for every task
	TresPerTask *string `json:"tres_per_task,omitempty"`

	// UserId User ID that owns the job
	UserId *string `json:"user_id,omitempty"`

	// WaitAllNodes If true, wait to start until after all nodes have booted
	WaitAllNodes *bool `json:"wait_all_nodes,omitempty"`

	// WaitForSwitch Maximum time to wait for switches in seconds
	WaitForSwitch *int32 `json:"wait_for_switch,omitempty"`

	// Wckey Workload characterization key
	Wckey *string `json:"wckey,omitempty"`

	// X11 X11 forwarding options
	X11 *[]SlurmV0041PostJobJSONBodyX11 `json:"x11,omitempty"`

	// X11MagicCookie Magic cookie for X11 forwarding
	X11MagicCookie *string `json:"x11_magic_cookie,omitempty"`

	// X11TargetHost Hostname or UNIX socket if x11_target_port=0
	X11TargetHost *string `json:"x11_target_host,omitempty"`

	// X11TargetPort TCP port
	X11TargetPort *int32 `json:"x11_target_port,omitempty"`
}

// SlurmV0041PostJobJSONBodyCpuBindingFlags defines parameters for SlurmV0041PostJob.
type SlurmV0041PostJobJSONBodyCpuBindingFlags string

// SlurmV0041PostJobJSONBodyCrontabFlags defines parameters for SlurmV0041PostJob.
type SlurmV0041PostJobJSONBodyCrontabFlags string

// SlurmV0041PostJobJSONBodyExclusive defines parameters for SlurmV0041PostJob.
type SlurmV0041PostJobJSONBodyExclusive string

// SlurmV0041PostJobJSONBodyFlags defines parameters for SlurmV0041PostJob.
type SlurmV0041PostJobJSONBodyFlags string

// SlurmV0041PostJobJSONBodyKillWarningFlags defines parameters for SlurmV0041PostJob.
type SlurmV0041PostJobJSONBodyKillWarningFlags string

// SlurmV0041PostJobJSONBodyMailType defines parameters for SlurmV0041PostJob.
type SlurmV0041PostJobJSONBodyMailType string

// SlurmV0041PostJobJSONBodyMemoryBindingType defines parameters for SlurmV0041PostJob.
type SlurmV0041PostJobJSONBodyMemoryBindingType string

// SlurmV0041PostJobJSONBodyOpenMode defines parameters for SlurmV0041PostJob.
type SlurmV0041PostJobJSONBodyOpenMode string

// SlurmV0041PostJobJSONBodyProfile defines parameters for SlurmV0041PostJob.
type SlurmV0041PostJobJSONBodyProfile string

// SlurmV0041PostJobJSONBodyShared defines parameters for SlurmV0041PostJob.
type SlurmV0041PostJobJSONBodyShared string

// SlurmV0041PostJobJSONBodyX11 defines parameters for SlurmV0041PostJob.
type SlurmV0041PostJobJSONBodyX11 string

// SlurmV0041DeleteJobsJSONBody defines parameters for SlurmV0041DeleteJobs.
type SlurmV0041DeleteJobsJSONBody struct {
	// Account Filter jobs to a specific account
	Account *string `json:"account,omitempty"`

	// Flags Filter jobs according to flags
	Flags *[]SlurmV0041DeleteJobsJSONBodyFlags `json:"flags,omitempty"`

	// JobName Filter jobs to a specific name
	JobName *string `json:"job_name,omitempty"`

	// JobState Filter jobs to a specific state
	JobState *[]SlurmV0041DeleteJobsJSONBodyJobState `json:"job_state,omitempty"`

	// Jobs List of jobs to signal
	Jobs *[]string `json:"jobs,omitempty"`

	// Nodes Filter jobs to a set of nodes
	Nodes *[]string `json:"nodes,omitempty"`

	// Partition Filter jobs to a specific partition
	Partition *string `json:"partition,omitempty"`

	// Qos Filter jobs to a specific QOS
	Qos *string `json:"qos,omitempty"`

	// Reservation Filter jobs to a specific reservation
	Reservation *string `json:"reservation,omitempty"`

	// Signal Signal to send to jobs
	Signal *string `json:"signal,omitempty"`

	// UserId Filter jobs to a specific numeric user id
	UserId *string `json:"user_id,omitempty"`

	// UserName Filter jobs to a specific user name
	UserName *string `json:"user_name,omitempty"`

	// Wckey Filter jobs to a specific wckey
	Wckey *string `json:"wckey,omitempty"`
}

// SlurmV0041DeleteJobsJSONBodyFlags defines parameters for SlurmV0041DeleteJobs.
type SlurmV0041DeleteJobsJSONBodyFlags string

// SlurmV0041DeleteJobsJSONBodyJobState defines parameters for SlurmV0041DeleteJobs.
type SlurmV0041DeleteJobsJSONBodyJobState string

// SlurmV0041GetJobsParams defines parameters for SlurmV0041GetJobs.
type SlurmV0041GetJobsParams struct {
	// UpdateTime Filter jobs since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0041GetJobsParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0041GetJobsParamsFlags defines parameters for SlurmV0041GetJobs.
type SlurmV0041GetJobsParamsFlags string

// SlurmV0041GetJobsStateParams defines parameters for SlurmV0041GetJobsState.
type SlurmV0041GetJobsStateParams struct {
	// UpdateTime Filter jobs since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0041GetJobsStateParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0041GetJobsStateParamsFlags defines parameters for SlurmV0041GetJobsState.
type SlurmV0041GetJobsStateParamsFlags string

// SlurmV0041GetNodeParams defines parameters for SlurmV0041GetNode.
type SlurmV0041GetNodeParams struct {
	// UpdateTime Filter jobs since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0041GetNodeParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0041GetNodeParamsFlags defines parameters for SlurmV0041GetNode.
type SlurmV0041GetNodeParamsFlags string

// SlurmV0041PostNodeJSONBody defines parameters for SlurmV0041PostNode.
type SlurmV0041PostNodeJSONBody struct {
	// Address NodeAddr, used to establish a communication path
	Address *[]string `json:"address,omitempty"`

	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`

	// CpuBind Default method for binding tasks to allocated CPUs
	CpuBind *int32 `json:"cpu_bind,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`

	// Features Available features
	Features *[]string `json:"features,omitempty"`

	// FeaturesAct Currently active features
	FeaturesAct *[]string `json:"features_act,omitempty"`

	// Gres Generic resources
	Gres *string `json:"gres,omitempty"`

	// Hostname NodeHostname
	Hostname *[]string `json:"hostname,omitempty"`

	// Name NodeName
	Name *[]string `json:"name,omitempty"`

	// Reason Reason for node being DOWN or DRAINING
	Reason *string `json:"reason,omitempty"`

	// ReasonUid User ID to associate with the reason (needed if user root is sending message)
	ReasonUid *string `json:"reason_uid,omitempty"`

	// ResumeAfter Number of seconds after which to automatically resume DOWN or DRAINED node
	ResumeAfter *struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int32 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"resume_after,omitempty"`

	// State New state to assign to the node
	State *[]SlurmV0041PostNodeJSONBodyState `json:"state,omitempty"`

	// Weight Weight of the node for scheduling purposes
	Weight *struct {
		// Infinite True if number has been set to infinite; "set" and "number" will be ignored
		Infinite *bool `json:"infinite,omitempty"`

		// Number If "set" is True the number will be set with value; otherwise ignore number contents
		Number *int32 `json:"number,omitempty"`

		// Set True if number has been set; False if number is unset
		Set *bool `json:"set,omitempty"`
	} `json:"weight,omitempty"`
}

// SlurmV0041PostNodeJSONBodyState defines parameters for SlurmV0041PostNode.
type SlurmV0041PostNodeJSONBodyState string

// SlurmV0041GetNodesParams defines parameters for SlurmV0041GetNodes.
type SlurmV0041GetNodesParams struct {
	// UpdateTime Filter jobs since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0041GetNodesParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0041GetNodesParamsFlags defines parameters for SlurmV0041GetNodes.
type SlurmV0041GetNodesParamsFlags string

// SlurmV0041GetPartitionParams defines parameters for SlurmV0041GetPartition.
type SlurmV0041GetPartitionParams struct {
	// UpdateTime Filter partitions since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0041GetPartitionParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0041GetPartitionParamsFlags defines parameters for SlurmV0041GetPartition.
type SlurmV0041GetPartitionParamsFlags string

// SlurmV0041GetPartitionsParams defines parameters for SlurmV0041GetPartitions.
type SlurmV0041GetPartitionsParams struct {
	// UpdateTime Filter partitions since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0041GetPartitionsParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0041GetPartitionsParamsFlags defines parameters for SlurmV0041GetPartitions.
type SlurmV0041GetPartitionsParamsFlags string

// SlurmV0041GetReservationParams defines parameters for SlurmV0041GetReservation.
type SlurmV0041GetReservationParams struct {
	// UpdateTime Filter reservations since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmV0041GetReservationsParams defines parameters for SlurmV0041GetReservations.
type SlurmV0041GetReservationsParams struct {
	// UpdateTime Filter reservations since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmV0041GetSharesParams defines parameters for SlurmV0041GetShares.
type SlurmV0041GetSharesParams struct {
	// Accounts Accounts to query
	Accounts *string `form:"accounts,omitempty" json:"accounts,omitempty"`

	// Users Users to query
	Users *string `form:"users,omitempty" json:"users,omitempty"`
}

// SlurmdbV0041GetAccountParams defines parameters for SlurmdbV0041GetAccount.
type SlurmdbV0041GetAccountParams struct {
	// WithAssocs Include associations
	WithAssocs *string `form:"with_assocs,omitempty" json:"with_assocs,omitempty"`

	// WithCoords Include coordinators
	WithCoords *string `form:"with_coords,omitempty" json:"with_coords,omitempty"`

	// WithDeleted Include deleted
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0041GetAccountsParams defines parameters for SlurmdbV0041GetAccounts.
type SlurmdbV0041GetAccountsParams struct {
	// Description CSV description list
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// DELETED include deleted associations
	DELETED *string `form:"DELETED,omitempty" json:"DELETED,omitempty"`

	// WithAssociations query includes associations
	WithAssociations *string `form:"WithAssociations,omitempty" json:"WithAssociations,omitempty"`

	// WithCoordinators query includes coordinators
	WithCoordinators *string `form:"WithCoordinators,omitempty" json:"WithCoordinators,omitempty"`

	// NoUsersAreCoords remove users as coordinators
	NoUsersAreCoords *string `form:"NoUsersAreCoords,omitempty" json:"NoUsersAreCoords,omitempty"`

	// UsersAreCoords users are coordinators
	UsersAreCoords *string `form:"UsersAreCoords,omitempty" json:"UsersAreCoords,omitempty"`
}

// SlurmdbV0041PostAccountsAssociationJSONBody defines parameters for SlurmdbV0041PostAccountsAssociation.
type SlurmdbV0041PostAccountsAssociationJSONBody struct {
	// Account Account organization and description
	Account *struct {
		// Description Arbitrary string describing the account
		Description *string `json:"description,omitempty"`

		// Organization Organization to which the account belongs
		Organization *string `json:"organization,omitempty"`
	} `json:"account,omitempty"`

	// AssociationCondition CSV list of accounts, association limits and options, CSV list of clusters
	AssociationCondition *struct {
		// Accounts CSV accounts list
		Accounts []string `json:"accounts"`

		// Association Association limits and options
		Association *struct {
			// Comment Arbitrary comment
			Comment *string `json:"comment,omitempty"`

			// Defaultqos Default QOS
			Defaultqos *string `json:"defaultqos,omitempty"`

			// Fairshare Allocated shares used for fairshare calculation
			Fairshare *int32 `json:"fairshare,omitempty"`

			// Grpjobs Maximum number of running jobs in this association and its children
			Grpjobs *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"grpjobs,omitempty"`

			// Grpjobsaccrue Maximum number of pending jobs able to accrue age priority in this association and its children
			Grpjobsaccrue *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"grpjobsaccrue,omitempty"`

			// Grpsubmitjobs Maximum number of jobs which can be in a pending or running state at any time in this association and its children
			Grpsubmitjobs *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"grpsubmitjobs,omitempty"`

			// Grptres Maximum number of TRES able to be allocated by running jobs in this association and its children
			Grptres *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"grptres,omitempty"`

			// Grptresmins Total number of TRES minutes that can possibly be used by past, present and future jobs in this association and its children
			Grptresmins *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"grptresmins,omitempty"`

			// Grptresrunmins Maximum number of TRES minutes able to be allocated by running jobs in this association and its children
			Grptresrunmins *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"grptresrunmins,omitempty"`

			// Grpwall Maximum wall clock time in minutes able to be allocated by running jobs in this association and its children
			Grpwall *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"grpwall,omitempty"`

			// Maxjobs Maximum number of running jobs per user in this association
			Maxjobs *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"maxjobs,omitempty"`

			// Maxjobsaccrue Maximum number of pending jobs able to accrue age priority at any given time in this association
			Maxjobsaccrue *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"maxjobsaccrue,omitempty"`

			// Maxsubmitjobs Maximum number of jobs which can be in a pending or running state at any time in this association
			Maxsubmitjobs *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"maxsubmitjobs,omitempty"`

			// Maxtresminsperjob Maximum number of TRES minutes each job is able to use in this association
			Maxtresminsperjob *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"maxtresminsperjob,omitempty"`

			// Maxtresperjob Maximum number of TRES each job is able to use in this association
			Maxtresperjob *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"maxtresperjob,omitempty"`

			// Maxtrespernode Maximum number of TRES each node is able to use
			Maxtrespernode *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"maxtrespernode,omitempty"`

			// Maxtresrunmins Maximum number of TRES minutes able to be allocated by running jobs in this association
			Maxtresrunmins *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"maxtresrunmins,omitempty"`

			// Maxwalldurationperjob Maximum wall clock time each job is able to use in this association
			Maxwalldurationperjob *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"maxwalldurationperjob,omitempty"`

			// Minpriothresh Minimum priority required to reserve resources when scheduling
			Minpriothresh *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"minpriothresh,omitempty"`

			// Parent Name of parent account
			Parent *string `json:"parent,omitempty"`

			// Priority Association priority factor
			Priority *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"priority,omitempty"`

			// Qoslevel List of available QOS names
			Qoslevel *[]string `json:"qoslevel,omitempty"`
		} `json:"association,omitempty"`

		// Clusters CSV clusters list
		Clusters *[]string `json:"clusters,omitempty"`
	} `json:"association_condition,omitempty"`

	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// SlurmdbV0041DeleteAssociationParams defines parameters for SlurmdbV0041DeleteAssociation.
type SlurmdbV0041DeleteAssociationParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// OnlyDefaults Filter to only defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted associations
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithRawQos Include a raw qos or delta_qos
	WithRawQos *string `form:"with_raw_qos,omitempty" json:"with_raw_qos,omitempty"`

	// WithSubAccts Include sub acct information
	WithSubAccts *string `form:"with_sub_accts,omitempty" json:"with_sub_accts,omitempty"`

	// WithoutParentInfo Exclude parent id/name
	WithoutParentInfo *string `form:"without_parent_info,omitempty" json:"without_parent_info,omitempty"`

	// WithoutParentLimits Exclude limits from parents
	WithoutParentLimits *string `form:"without_parent_limits,omitempty" json:"without_parent_limits,omitempty"`
}

// SlurmdbV0041GetAssociationParams defines parameters for SlurmdbV0041GetAssociation.
type SlurmdbV0041GetAssociationParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// OnlyDefaults Filter to only defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted associations
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithRawQos Include a raw qos or delta_qos
	WithRawQos *string `form:"with_raw_qos,omitempty" json:"with_raw_qos,omitempty"`

	// WithSubAccts Include sub acct information
	WithSubAccts *string `form:"with_sub_accts,omitempty" json:"with_sub_accts,omitempty"`

	// WithoutParentInfo Exclude parent id/name
	WithoutParentInfo *string `form:"without_parent_info,omitempty" json:"without_parent_info,omitempty"`

	// WithoutParentLimits Exclude limits from parents
	WithoutParentLimits *string `form:"without_parent_limits,omitempty" json:"without_parent_limits,omitempty"`
}

// SlurmdbV0041DeleteAssociationsParams defines parameters for SlurmdbV0041DeleteAssociations.
type SlurmdbV0041DeleteAssociationsParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// OnlyDefaults Filter to only defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted associations
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithRawQos Include a raw qos or delta_qos
	WithRawQos *string `form:"with_raw_qos,omitempty" json:"with_raw_qos,omitempty"`

	// WithSubAccts Include sub acct information
	WithSubAccts *string `form:"with_sub_accts,omitempty" json:"with_sub_accts,omitempty"`

	// WithoutParentInfo Exclude parent id/name
	WithoutParentInfo *string `form:"without_parent_info,omitempty" json:"without_parent_info,omitempty"`

	// WithoutParentLimits Exclude limits from parents
	WithoutParentLimits *string `form:"without_parent_limits,omitempty" json:"without_parent_limits,omitempty"`
}

// SlurmdbV0041GetAssociationsParams defines parameters for SlurmdbV0041GetAssociations.
type SlurmdbV0041GetAssociationsParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// OnlyDefaults Filter to only defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted associations
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithRawQos Include a raw qos or delta_qos
	WithRawQos *string `form:"with_raw_qos,omitempty" json:"with_raw_qos,omitempty"`

	// WithSubAccts Include sub acct information
	WithSubAccts *string `form:"with_sub_accts,omitempty" json:"with_sub_accts,omitempty"`

	// WithoutParentInfo Exclude parent id/name
	WithoutParentInfo *string `form:"without_parent_info,omitempty" json:"without_parent_info,omitempty"`

	// WithoutParentLimits Exclude limits from parents
	WithoutParentLimits *string `form:"without_parent_limits,omitempty" json:"without_parent_limits,omitempty"`
}

// SlurmdbV0041DeleteClusterParams defines parameters for SlurmdbV0041DeleteCluster.
type SlurmdbV0041DeleteClusterParams struct {
	// Classification Type of machine
	Classification *SlurmdbV0041DeleteClusterParamsClassification `form:"classification,omitempty" json:"classification,omitempty"`

	// Cluster CSV cluster list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Federation CSV federation list
	Federation *string `form:"federation,omitempty" json:"federation,omitempty"`

	// Flags Query flags
	Flags *SlurmdbV0041DeleteClusterParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// RpcVersion CSV RPC version list
	RpcVersion *string `form:"rpc_version,omitempty" json:"rpc_version,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// WithDeleted Include deleted clusters
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`
}

// SlurmdbV0041DeleteClusterParamsClassification defines parameters for SlurmdbV0041DeleteCluster.
type SlurmdbV0041DeleteClusterParamsClassification string

// SlurmdbV0041DeleteClusterParamsFlags defines parameters for SlurmdbV0041DeleteCluster.
type SlurmdbV0041DeleteClusterParamsFlags string

// SlurmdbV0041GetClusterParams defines parameters for SlurmdbV0041GetCluster.
type SlurmdbV0041GetClusterParams struct {
	// Classification Type of machine
	Classification *SlurmdbV0041GetClusterParamsClassification `form:"classification,omitempty" json:"classification,omitempty"`

	// Cluster CSV cluster list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Federation CSV federation list
	Federation *string `form:"federation,omitempty" json:"federation,omitempty"`

	// Flags Query flags
	Flags *SlurmdbV0041GetClusterParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// RpcVersion CSV RPC version list
	RpcVersion *string `form:"rpc_version,omitempty" json:"rpc_version,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// WithDeleted Include deleted clusters
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`
}

// SlurmdbV0041GetClusterParamsClassification defines parameters for SlurmdbV0041GetCluster.
type SlurmdbV0041GetClusterParamsClassification string

// SlurmdbV0041GetClusterParamsFlags defines parameters for SlurmdbV0041GetCluster.
type SlurmdbV0041GetClusterParamsFlags string

// SlurmdbV0041GetClustersParams defines parameters for SlurmdbV0041GetClusters.
type SlurmdbV0041GetClustersParams struct {
	// UpdateTime Filter reservations since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmdbV0041PostClustersParams defines parameters for SlurmdbV0041PostClusters.
type SlurmdbV0041PostClustersParams struct {
	// UpdateTime Filter reservations since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmdbV0041GetInstanceParams defines parameters for SlurmdbV0041GetInstance.
type SlurmdbV0041GetInstanceParams struct {
	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Extra CSV extra list
	Extra *string `form:"extra,omitempty" json:"extra,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// InstanceId CSV instance_id list
	InstanceId *string `form:"instance_id,omitempty" json:"instance_id,omitempty"`

	// InstanceType CSV instance_type list
	InstanceType *string `form:"instance_type,omitempty" json:"instance_type,omitempty"`

	// NodeList Ranged node string
	NodeList *string `form:"node_list,omitempty" json:"node_list,omitempty"`

	// TimeEnd Time end (UNIX timestamp)
	TimeEnd *string `form:"time_end,omitempty" json:"time_end,omitempty"`

	// TimeStart Time start (UNIX timestamp)
	TimeStart *string `form:"time_start,omitempty" json:"time_start,omitempty"`
}

// SlurmdbV0041GetInstancesParams defines parameters for SlurmdbV0041GetInstances.
type SlurmdbV0041GetInstancesParams struct {
	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Extra CSV extra list
	Extra *string `form:"extra,omitempty" json:"extra,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// InstanceId CSV instance_id list
	InstanceId *string `form:"instance_id,omitempty" json:"instance_id,omitempty"`

	// InstanceType CSV instance_type list
	InstanceType *string `form:"instance_type,omitempty" json:"instance_type,omitempty"`

	// NodeList Ranged node string
	NodeList *string `form:"node_list,omitempty" json:"node_list,omitempty"`

	// TimeEnd Time end (UNIX timestamp)
	TimeEnd *string `form:"time_end,omitempty" json:"time_end,omitempty"`

	// TimeStart Time start (UNIX timestamp)
	TimeStart *string `form:"time_start,omitempty" json:"time_start,omitempty"`
}

// SlurmdbV0041GetJobsParams defines parameters for SlurmdbV0041GetJobs.
type SlurmdbV0041GetJobsParams struct {
	// Account CSV account list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Association CSV association list
	Association *string `form:"association,omitempty" json:"association,omitempty"`

	// Cluster CSV cluster list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Constraints CSV constraint list
	Constraints *string `form:"constraints,omitempty" json:"constraints,omitempty"`

	// SchedulerUnset Schedule bits not set
	SchedulerUnset *string `form:"scheduler_unset,omitempty" json:"scheduler_unset,omitempty"`

	// ScheduledOnSubmit Job was started on submit
	ScheduledOnSubmit *string `form:"scheduled_on_submit,omitempty" json:"scheduled_on_submit,omitempty"`

	// ScheduledByMain Job was started from main scheduler
	ScheduledByMain *string `form:"scheduled_by_main,omitempty" json:"scheduled_by_main,omitempty"`

	// ScheduledByBackfill Job was started from backfill
	ScheduledByBackfill *string `form:"scheduled_by_backfill,omitempty" json:"scheduled_by_backfill,omitempty"`

	// JobStarted Job start RPC was received
	JobStarted *string `form:"job_started,omitempty" json:"job_started,omitempty"`

	// ExitCode Job exit code (numeric)
	ExitCode *string `form:"exit_code,omitempty" json:"exit_code,omitempty"`

	// ShowDuplicates Include duplicate job entries
	ShowDuplicates *string `form:"show_duplicates,omitempty" json:"show_duplicates,omitempty"`

	// SkipSteps Exclude job step details
	SkipSteps *string `form:"skip_steps,omitempty" json:"skip_steps,omitempty"`

	// DisableTruncateUsageTime Do not truncate the time to usage_start and usage_end
	DisableTruncateUsageTime *string `form:"disable_truncate_usage_time,omitempty" json:"disable_truncate_usage_time,omitempty"`

	// WholeHetjob Include details on all hetjob components
	WholeHetjob *string `form:"whole_hetjob,omitempty" json:"whole_hetjob,omitempty"`

	// DisableWholeHetjob Only show details on specified hetjob components
	DisableWholeHetjob *string `form:"disable_whole_hetjob,omitempty" json:"disable_whole_hetjob,omitempty"`

	// DisableWaitForResult Tell dbd not to wait for the result
	DisableWaitForResult *string `form:"disable_wait_for_result,omitempty" json:"disable_wait_for_result,omitempty"`

	// UsageTimeAsSubmitTime Use usage_time as the submit_time of the job
	UsageTimeAsSubmitTime *string `form:"usage_time_as_submit_time,omitempty" json:"usage_time_as_submit_time,omitempty"`

	// ShowBatchScript Include job script
	ShowBatchScript *string `form:"show_batch_script,omitempty" json:"show_batch_script,omitempty"`

	// ShowJobEnvironment Include job environment
	ShowJobEnvironment *string `form:"show_job_environment,omitempty" json:"show_job_environment,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Groups CSV group list
	Groups *string `form:"groups,omitempty" json:"groups,omitempty"`

	// JobName CSV job name list
	JobName *string `form:"job_name,omitempty" json:"job_name,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS name list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// Reason CSV reason list
	Reason *string `form:"reason,omitempty" json:"reason,omitempty"`

	// Reservation CSV reservation name list
	Reservation *string `form:"reservation,omitempty" json:"reservation,omitempty"`

	// ReservationId CSV reservation ID list
	ReservationId *string `form:"reservation_id,omitempty" json:"reservation_id,omitempty"`

	// State CSV state list
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// Step CSV step id list
	Step *string `form:"step,omitempty" json:"step,omitempty"`

	// EndTime Usage end (UNIX timestamp)
	EndTime *string `form:"end_time,omitempty" json:"end_time,omitempty"`

	// StartTime Usage start (UNIX timestamp)
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty"`

	// Node Ranged node string where jobs ran
	Node *string `form:"node,omitempty" json:"node,omitempty"`

	// Users CSV user name list
	Users *string `form:"users,omitempty" json:"users,omitempty"`

	// Wckey CSV wckey list
	Wckey *string `form:"wckey,omitempty" json:"wckey,omitempty"`
}

// SlurmdbV0041GetQosParams defines parameters for SlurmdbV0041GetQos.
type SlurmdbV0041GetQosParams struct {
	// Description CSV description list
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Id CSV QOS id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Name CSV QOS name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// PreemptMode PreemptMode used when jobs in this QOS are preempted
	PreemptMode *SlurmdbV0041GetQosParamsPreemptMode `form:"preempt_mode,omitempty" json:"preempt_mode,omitempty"`

	// WithDeleted Include deleted QOS
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0041GetQosParamsPreemptMode defines parameters for SlurmdbV0041GetQos.
type SlurmdbV0041GetQosParamsPreemptMode string

// SlurmdbV0041PostQosParams defines parameters for SlurmdbV0041PostQos.
type SlurmdbV0041PostQosParams struct {
	// Description CSV description list
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Id CSV QOS id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Format CSV format list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Name CSV QOS name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// PreemptMode PreemptMode used when jobs in this QOS are preempted
	PreemptMode *SlurmdbV0041PostQosParamsPreemptMode `form:"preempt_mode,omitempty" json:"preempt_mode,omitempty"`

	// WithDeleted Include deleted QOS
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0041PostQosParamsPreemptMode defines parameters for SlurmdbV0041PostQos.
type SlurmdbV0041PostQosParamsPreemptMode string

// SlurmdbV0041GetSingleQosParams defines parameters for SlurmdbV0041GetSingleQos.
type SlurmdbV0041GetSingleQosParams struct {
	// WithDeleted Query includes deleted QOS
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0041GetUserParams defines parameters for SlurmdbV0041GetUser.
type SlurmdbV0041GetUserParams struct {
	// WithDeleted Include deleted users
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithAssocs Include associations
	WithAssocs *string `form:"with_assocs,omitempty" json:"with_assocs,omitempty"`

	// WithCoords Include coordinators
	WithCoords *string `form:"with_coords,omitempty" json:"with_coords,omitempty"`

	// WithWckeys Include wckeys
	WithWckeys *string `form:"with_wckeys,omitempty" json:"with_wckeys,omitempty"`
}

// SlurmdbV0041GetUsersParams defines parameters for SlurmdbV0041GetUsers.
type SlurmdbV0041GetUsersParams struct {
	// AdminLevel Administrator level
	AdminLevel *SlurmdbV0041GetUsersParamsAdminLevel `form:"admin_level,omitempty" json:"admin_level,omitempty"`

	// DefaultAccount CSV default account list
	DefaultAccount *string `form:"default_account,omitempty" json:"default_account,omitempty"`

	// DefaultWckey CSV default wckey list
	DefaultWckey *string `form:"default_wckey,omitempty" json:"default_wckey,omitempty"`

	// WithAssocs With associations
	WithAssocs *string `form:"with_assocs,omitempty" json:"with_assocs,omitempty"`

	// WithCoords With coordinators
	WithCoords *string `form:"with_coords,omitempty" json:"with_coords,omitempty"`

	// WithDeleted With deleted
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithWckeys With wckeys
	WithWckeys *string `form:"with_wckeys,omitempty" json:"with_wckeys,omitempty"`

	// WithoutDefaults Exclude defaults
	WithoutDefaults *string `form:"without_defaults,omitempty" json:"without_defaults,omitempty"`
}

// SlurmdbV0041GetUsersParamsAdminLevel defines parameters for SlurmdbV0041GetUsers.
type SlurmdbV0041GetUsersParamsAdminLevel string

// SlurmdbV0041PostUsersAssociationJSONBody defines parameters for SlurmdbV0041PostUsersAssociation.
type SlurmdbV0041PostUsersAssociationJSONBody struct {
	// AssociationCondition Filters to select associations for users
	AssociationCondition struct {
		// Accounts CSV accounts list
		Accounts *[]string `json:"accounts,omitempty"`

		// Association Association limits and options
		Association *struct {
			// Comment Arbitrary comment
			Comment *string `json:"comment,omitempty"`

			// Defaultqos Default QOS
			Defaultqos *string `json:"defaultqos,omitempty"`

			// Fairshare Allocated shares used for fairshare calculation
			Fairshare *int32 `json:"fairshare,omitempty"`

			// Grpjobs Maximum number of running jobs in this association and its children
			Grpjobs *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"grpjobs,omitempty"`

			// Grpjobsaccrue Maximum number of pending jobs able to accrue age priority in this association and its children
			Grpjobsaccrue *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"grpjobsaccrue,omitempty"`

			// Grpsubmitjobs Maximum number of jobs which can be in a pending or running state at any time in this association and its children
			Grpsubmitjobs *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"grpsubmitjobs,omitempty"`

			// Grptres Maximum number of TRES able to be allocated by running jobs in this association and its children
			Grptres *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"grptres,omitempty"`

			// Grptresmins Total number of TRES minutes that can possibly be used by past, present and future jobs in this association and its children
			Grptresmins *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"grptresmins,omitempty"`

			// Grptresrunmins Maximum number of TRES minutes able to be allocated by running jobs in this association and its children
			Grptresrunmins *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"grptresrunmins,omitempty"`

			// Grpwall Maximum wall clock time in minutes able to be allocated by running jobs in this association and its children
			Grpwall *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"grpwall,omitempty"`

			// Maxjobs Maximum number of running jobs per user in this association
			Maxjobs *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"maxjobs,omitempty"`

			// Maxjobsaccrue Maximum number of pending jobs able to accrue age priority at any given time in this association
			Maxjobsaccrue *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"maxjobsaccrue,omitempty"`

			// Maxsubmitjobs Maximum number of jobs which can be in a pending or running state at any time in this association
			Maxsubmitjobs *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"maxsubmitjobs,omitempty"`

			// Maxtresminsperjob Maximum number of TRES minutes each job is able to use in this association
			Maxtresminsperjob *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"maxtresminsperjob,omitempty"`

			// Maxtresperjob Maximum number of TRES each job is able to use in this association
			Maxtresperjob *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"maxtresperjob,omitempty"`

			// Maxtrespernode Maximum number of TRES each node is able to use
			Maxtrespernode *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"maxtrespernode,omitempty"`

			// Maxtresrunmins Maximum number of TRES minutes able to be allocated by running jobs in this association
			Maxtresrunmins *[]struct {
				// Count TRES count (0 if listed generically)
				Count *int64 `json:"count,omitempty"`

				// Id ID used in database
				Id *int32 `json:"id,omitempty"`

				// Name TRES name (if applicable)
				Name *string `json:"name,omitempty"`

				// Type TRES type (CPU, MEM, etc)
				Type string `json:"type"`
			} `json:"maxtresrunmins,omitempty"`

			// Maxwalldurationperjob Maximum wall clock time each job is able to use in this association
			Maxwalldurationperjob *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"maxwalldurationperjob,omitempty"`

			// Minpriothresh Minimum priority required to reserve resources when scheduling
			Minpriothresh *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"minpriothresh,omitempty"`

			// Parent Name of parent account
			Parent *string `json:"parent,omitempty"`

			// Priority Association priority factor
			Priority *struct {
				// Infinite True if number has been set to infinite; "set" and "number" will be ignored
				Infinite *bool `json:"infinite,omitempty"`

				// Number If "set" is True the number will be set with value; otherwise ignore number contents
				Number *int32 `json:"number,omitempty"`

				// Set True if number has been set; False if number is unset
				Set *bool `json:"set,omitempty"`
			} `json:"priority,omitempty"`

			// Qoslevel List of available QOS names
			Qoslevel *[]string `json:"qoslevel,omitempty"`
		} `json:"association,omitempty"`

		// Clusters CSV clusters list
		Clusters *[]string `json:"clusters,omitempty"`

		// Partitions CSV partitions list
		Partitions *[]string `json:"partitions,omitempty"`

		// Users CSV users list
		Users []string `json:"users"`

		// Wckeys CSV WCKeys list
		Wckeys *[]string `json:"wckeys,omitempty"`
	} `json:"association_condition"`

	// Errors Query errors
	Errors *[]struct {
		// Description Long form error description
		Description *string `json:"description,omitempty"`

		// Error Short form error description
		Error *string `json:"error,omitempty"`

		// ErrorNumber Slurm numeric error identifier
		ErrorNumber *int32 `json:"error_number,omitempty"`

		// Source Source of error or where error was first detected
		Source *string `json:"source,omitempty"`
	} `json:"errors,omitempty"`

	// Meta Slurm meta values
	Meta *struct {
		Client *struct {
			// Group Client group (if known)
			Group *string `json:"group,omitempty"`

			// Source Client source description
			Source *string `json:"source,omitempty"`

			// User Client user (if known)
			User *string `json:"user,omitempty"`
		} `json:"client,omitempty"`

		// Command CLI command (if applicable)
		Command *[]string `json:"command,omitempty"`
		Plugin  *struct {
			// AccountingStorage Slurm accounting plugin
			AccountingStorage *string `json:"accounting_storage,omitempty"`

			// DataParser Slurm data_parser plugin
			DataParser *string `json:"data_parser,omitempty"`

			// Name Slurm plugin name (if applicable)
			Name *string `json:"name,omitempty"`

			// Type Slurm plugin type (if applicable)
			Type *string `json:"type,omitempty"`
		} `json:"plugin,omitempty"`
		Slurm *struct {
			// Cluster Slurm cluster name
			Cluster *string `json:"cluster,omitempty"`

			// Release Slurm release string
			Release *string `json:"release,omitempty"`
			Version *struct {
				// Major Slurm release major version
				Major *string `json:"major,omitempty"`

				// Micro Slurm release micro version
				Micro *string `json:"micro,omitempty"`

				// Minor Slurm release minor version
				Minor *string `json:"minor,omitempty"`
			} `json:"version,omitempty"`
		} `json:"slurm,omitempty"`
	} `json:"meta,omitempty"`

	// User Admin level of user, DefaultAccount, DefaultWCKey
	User struct {
		// Adminlevel AdminLevel granted to the user
		Adminlevel *[]SlurmdbV0041PostUsersAssociationJSONBodyUserAdminlevel `json:"adminlevel,omitempty"`

		// Defaultaccount Default account
		Defaultaccount *string `json:"defaultaccount,omitempty"`

		// Defaultwckey Default WCKey
		Defaultwckey *string `json:"defaultwckey,omitempty"`
	} `json:"user"`

	// Warnings Query warnings
	Warnings *[]struct {
		// Description Long form warning description
		Description *string `json:"description,omitempty"`

		// Source Source of warning or where warning was first detected
		Source *string `json:"source,omitempty"`
	} `json:"warnings,omitempty"`
}

// SlurmdbV0041PostUsersAssociationParams defines parameters for SlurmdbV0041PostUsersAssociation.
type SlurmdbV0041PostUsersAssociationParams struct {
	// UpdateTime Filter partitions since update timestamp
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmdbV0041PostUsersAssociationParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmdbV0041PostUsersAssociationParamsFlags defines parameters for SlurmdbV0041PostUsersAssociation.
type SlurmdbV0041PostUsersAssociationParamsFlags string

// SlurmdbV0041PostUsersAssociationJSONBodyUserAdminlevel defines parameters for SlurmdbV0041PostUsersAssociation.
type SlurmdbV0041PostUsersAssociationJSONBodyUserAdminlevel string

// SlurmdbV0041GetWckeysParams defines parameters for SlurmdbV0041GetWckeys.
type SlurmdbV0041GetWckeysParams struct {
	// Cluster CSV cluster name list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Format CSV format name list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name CSV name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// OnlyDefaults Only query defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted wckeys
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0041PostWckeysParams defines parameters for SlurmdbV0041PostWckeys.
type SlurmdbV0041PostWckeysParams struct {
	// Cluster CSV cluster name list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Format CSV format name list
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name CSV name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// OnlyDefaults Only query defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted wckeys
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmV0041PostJobAllocateJSONRequestBody defines body for SlurmV0041PostJobAllocate for application/json ContentType.
type SlurmV0041PostJobAllocateJSONRequestBody SlurmV0041PostJobAllocateJSONBody

// SlurmV0041PostJobSubmitJSONRequestBody defines body for SlurmV0041PostJobSubmit for application/json ContentType.
type SlurmV0041PostJobSubmitJSONRequestBody SlurmV0041PostJobSubmitJSONBody

// SlurmV0041PostJobJSONRequestBody defines body for SlurmV0041PostJob for application/json ContentType.
type SlurmV0041PostJobJSONRequestBody SlurmV0041PostJobJSONBody

// SlurmV0041DeleteJobsJSONRequestBody defines body for SlurmV0041DeleteJobs for application/json ContentType.
type SlurmV0041DeleteJobsJSONRequestBody SlurmV0041DeleteJobsJSONBody

// SlurmV0041PostNodeJSONRequestBody defines body for SlurmV0041PostNode for application/json ContentType.
type SlurmV0041PostNodeJSONRequestBody SlurmV0041PostNodeJSONBody

// SlurmdbV0041PostAccountsJSONRequestBody defines body for SlurmdbV0041PostAccounts for application/json ContentType.
type SlurmdbV0041PostAccountsJSONRequestBody = V0041OpenapiAccountsResp

// SlurmdbV0041PostAccountsAssociationJSONRequestBody defines body for SlurmdbV0041PostAccountsAssociation for application/json ContentType.
type SlurmdbV0041PostAccountsAssociationJSONRequestBody SlurmdbV0041PostAccountsAssociationJSONBody

// SlurmdbV0041PostAssociationsJSONRequestBody defines body for SlurmdbV0041PostAssociations for application/json ContentType.
type SlurmdbV0041PostAssociationsJSONRequestBody = V0041OpenapiAssocsResp

// SlurmdbV0041PostClustersJSONRequestBody defines body for SlurmdbV0041PostClusters for application/json ContentType.
type SlurmdbV0041PostClustersJSONRequestBody = V0041OpenapiClustersResp

// SlurmdbV0041PostConfigJSONRequestBody defines body for SlurmdbV0041PostConfig for application/json ContentType.
type SlurmdbV0041PostConfigJSONRequestBody = V0041OpenapiSlurmdbdConfigResp

// SlurmdbV0041PostQosJSONRequestBody defines body for SlurmdbV0041PostQos for application/json ContentType.
type SlurmdbV0041PostQosJSONRequestBody = V0041OpenapiSlurmdbdQosResp

// SlurmdbV0041PostTresJSONRequestBody defines body for SlurmdbV0041PostTres for application/json ContentType.
type SlurmdbV0041PostTresJSONRequestBody = V0041OpenapiTresResp

// SlurmdbV0041PostUsersJSONRequestBody defines body for SlurmdbV0041PostUsers for application/json ContentType.
type SlurmdbV0041PostUsersJSONRequestBody = V0041OpenapiUsersResp

// SlurmdbV0041PostUsersAssociationJSONRequestBody defines body for SlurmdbV0041PostUsersAssociation for application/json ContentType.
type SlurmdbV0041PostUsersAssociationJSONRequestBody SlurmdbV0041PostUsersAssociationJSONBody

// SlurmdbV0041PostWckeysJSONRequestBody defines body for SlurmdbV0041PostWckeys for application/json ContentType.
type SlurmdbV0041PostWckeysJSONRequestBody = V0041OpenapiWckeyResp
